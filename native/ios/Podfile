require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require File.join(File.dirname(`node --print "require.resolve('@react-native-community/cli-platform-ios/package.json')"`), "native_modules")

platform :ios, '12.4'
install! 'cocoapods', :deterministic_uuids => false

require 'json'

def common_comm_target_pods
  pod 'SQLCipher-Amalgamation', :path => '../../node_modules/@commapp/sqlcipher-amalgamation'
end

target 'Comm' do
  pod 'ReactNativeKeyboardTrackingView', :path => '../../node_modules/react-native-keyboard-tracking-view'
  pod 'ReactNativeKeyboardInput', :path => '../../node_modules/react-native-keyboard-input'
  pod 'react-native-video/VideoCaching', :podspec => '../../node_modules/react-native-video/react-native-video.podspec'
  pod 'react-native-ffmpeg/min-lts', :podspec => '../../node_modules/react-native-ffmpeg/react-native-ffmpeg.podspec'
  common_comm_target_pods

  use_expo_modules!
  use_native_modules!

  # Flags change depending on the env values.
  flags = get_default_flags()

  podfile_properties = JSON.parse(File.read('./Podfile.properties.json')) rescue {}
  use_react_native!(
    :path => "../../node_modules/react-native",
    # Hermes is now enabled by default. Disable by setting this flag to false.
    # Upcoming versions of React Native may rely on get_default_flags(), but
    # we make it explicit here to aid in the React Native upgrade process.
    :hermes_enabled => podfile_properties['expo.jsEngine'] == 'hermes',
    :fabric_enabled => flags[:fabric_enabled],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => FlipperConfiguration.enabled,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )
end

target 'NotificationService' do
  common_comm_target_pods
  pod 'OLMKit', :path => "../node_modules/olm"
  pod 'RCT-Folly', :podspec => "../../node_modules/react-native/third-party-podspecs/RCT-Folly.podspec"

  # Lines below are only needed to compile and use Expo Secure Store in
  # Notification Service.
  # If Apple disapproves 'APPLICATION_EXTENSION_API_ONLY' flag then we can
  # safely delete them and use customized Expo Secure Store that does not depend
  # on ExpoModulesCore
  podfile_properties = JSON.parse(File.read('./Podfile.properties.json')) rescue {}
  use_expo_modules!
  use_react_native!(
    :path => "../../node_modules/react-native",
    :hermes_enabled => podfile_properties['expo.jsEngine'] == 'hermes'
  )
end

post_install do |installer|
  react_native_post_install(
    installer,
    # Set `mac_catalyst_enabled` to `true` in order to apply patches
    # necessary for Mac Catalyst builds
    :mac_catalyst_enabled => false
  )
  __apply_Xcode_12_5_M1_post_install_workaround(installer)

  # Excluding arm64 because ARM-based Mac simulator isn't supported yet
  # Excluding 32-bit x86 because nobody uses it and it causes compilation issues
  installer.pods_project.build_configurations.each do |config|
    config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64 i386"
    config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '-DDONT_AUTOINSTALL_REANIMATED'
  end

  # Lines below are only needed to compile and use Expo Secure Store in
  # Notification Service.
  # If Apple disapproves 'APPLICATION_EXTENSION_API_ONLY' flag then we can
  # safely delete them and use customized Expo Secure Store that does not depend
  # on ExpoModulesCore
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['APPLICATION_EXTENSION_API_ONLY'] = 'NO'
    end
  end 

  # This is necessary for Xcode 14, because it signs resource bundles by default
  # when building for devices.
  installer.target_installation_results.pod_target_installation_results
    .each do |pod_name, target_installation_result|
    target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
      resource_bundle_target.build_configurations.each do |config|
        config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
      end
    end
  end
end
