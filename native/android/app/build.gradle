apply plugin: "com.android.application"

import de.undercouch.gradle.tasks.download.Download
import app.comm.gradle.tasks.GitModules

apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
 react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
 
    /* Folders */
     //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
 
    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]
 
    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
 
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []
 
    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
 
    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

/**
 * Architectures to build native code for.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86_64", "arm64-v8a"]
}

def customDownloadsDir = System.getenv("REACT_NATIVE_DOWNLOADS_DIR")
def dependenciesPath = System.getenv("REACT_NATIVE_DEPENDENCIES")
def downloadsDir = customDownloadsDir ? new File(customDownloadsDir) : new File("$buildDir/downloads")
def thirdPartyNdkDir = new File("$buildDir/third-party-ndk")

task createNativeDepsDirectories {
    downloadsDir.mkdirs()
    thirdPartyNdkDir.mkdirs()
}

// OPENSSL
def hostSystem = System.getProperty('os.name').toLowerCase(Locale.ROOT)
def hostTag = hostSystem.contains('mac') ? 'darwin-x86_64' : 'linux-x86_64'

task downloadOpenSSL(dependsOn: createNativeDepsDirectories, type: Download) {
    src("https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz")
    onlyIfNewer(true)
    overwrite(false)
    dest(new File(downloadsDir, "openssl-${OPENSSL_VERSION}.tar.gz"))
}

task prepareOpenSSL(
    dependsOn: dependenciesPath ? [] : [downloadOpenSSL],
    type: Copy
) {
    from(dependenciesPath ?: tarTree(downloadOpenSSL.dest))
    include("openssl-${OPENSSL_VERSION}/**/*")
    includeEmptyDirs = false
    into("${thirdPartyNdkDir}/openssl")
}

task prebuildOpenSSL(dependsOn: dependenciesPath ? [] : [prepareOpenSSL]) {
    inputs.properties([
        'openssl.version': OPENSSL_VERSION,
        'openssl.abis': getBuildTypeABIs(reactNativeArchitectures())
    ])
    outputs.dir("${thirdPartyNdkDir}/openssl/openssl-${OPENSSL_VERSION}/build/")
        .withPropertyName('openssl.output')
    doFirst {
        getBuildTypeABIs(reactNativeArchitectures()).each { buildABI ->
            logger.info("Building OpenSSL library for the ${buildABI}")
            exec {
                commandLine './bash/build_openssl.sh',
                // OPENSSL_SUBMODULE_PATH
                "${thirdPartyNdkDir}/openssl/openssl-${OPENSSL_VERSION}/",
                // HOST_TAG
                hostTag,
                // ANDROID_ARCH_ABI
                "${buildABI}",
                // MIN_SDK_VERSION
                rootProject.ext.minSdkVersion,
                // ANDROID_NDK_HOME
                android.ndkDirectory.absolutePath,
                // PARALLEL_THREADS
                Runtime.getRuntime().availableProcessors()
            }
        }
    }
}

// EXTERNAL LIBS
task prepareExternalLibs {
    dependsOn prebuildOpenSSL
}

// Removes the '.cxx' directory to prevent running
// ninja clean when the 'clean' command is executed
task removeCXX(type: Exec) {
    commandLine 'rm', '-rf', '.cxx'
}

// Add cross-compilation targets to Rust toolchain
task updateRustToolchain(type: Exec) {
    commandLine "rustup", "target", "add",
        "aarch64-linux-android",
        "armv7-linux-androideabi",
        "x86_64-linux-android"
}

def nativeRustLibraryDir = "../../native_rust_library"
def nativeRustLibraryManifestPath = "${nativeRustLibraryDir}/Cargo.toml"
def cxxBridgeBindingDir = "${nativeRustLibraryDir}/target/cxxbridge/native_rust_library/src"
def cxxBridgeCommonDir = "${nativeRustLibraryDir}/target/cxxbridge/rust"

task buildNativeRustLibrary(type: Exec) {
  commandLine "cargo", "build", "--manifest-path", nativeRustLibraryManifestPath
}

task copyNativeRustLibraryFiles(dependsOn: buildNativeRustLibrary, type: Copy) {
  from(cxxBridgeBindingDir) {
    include 'lib.rs.h'
    include 'lib.rs.cc'
  }
  from(cxxBridgeCommonDir) {
    include 'cxx.h'
  }
  into nativeRustLibraryDir
}

// Bind preBuild dependencies only if not 'clean' running
if (!isCleanRunning()) {
    afterEvaluate {
        preBuild.dependsOn(prepareExternalLibs, updateRustToolchain, copyNativeRustLibraryFiles)
    }
}

gradle.projectsEvaluated {
  tasks.named('createBundleReleaseJsAndAssets').configure {
    dependsOn copyNativeRustLibraryFiles
  }
}

// Run removing CXX task before the clean execution
beforeEvaluate {
    clean.dependsOn(removeCXX)
}

// Detects are we running the 'clean' commands
def isCleanRunning() {
    gradle.startParameter.taskRequests.any {
        !it.args.isEmpty() && it.args.first().startsWith('clean')
    }
}

// Release keystore via macOS Keychain Access
def getPassword(String keyLabel) {
    if (System.getenv('ANDROID_SIGNING_PASSWORD')) {
        return System.getenv('ANDROID_SIGNING_PASSWORD') 
    }
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'security',
            'find-generic-password',
            '-wl', keyLabel,
            '-a', System.properties['user.name']
        standardOutput = stdout
        ignoreExitValue true
    }
    return stdout.toString().strip()
}

// Returns all ABIs architectures for the 'bundleRelease'
// or only from 'adb devices' if running debug release.
def getBuildTypeABIs(nativeArchitectures) {
    if (System.getenv("BUILDKITE") == "true") {
        return ["arm64-v8a"] 
    }
    def isBundleRelease = gradle.startParameter.taskRequests.any {
        !it.args.isEmpty() && it.args.first().contains("bundleRelease")
    }
    if (isBundleRelease) {
        // All of the supported ABIs
        // https://developer.android.com/ndk/guides/abis.html#sa
        final allAbis = ["armeabi-v7a", "arm64-v8a", "x86_64"]
        logger.info("Using all architectures to build: ${allAbis}")
        return allAbis
    }
    if (nativeArchitectures) {
        return nativeArchitectures
    }
    // Get current 'adb devices' architectures
    def commandOutput = new ByteArrayOutputStream()
    exec {
        commandLine "./bash/detect_abis.sh"
        standardOutput = commandOutput
    }
    final detectedAbis = commandOutput.toString("UTF-8").trim().tokenize()
    logger.info("Detected architectures to build: ${detectedAbis}")
    return detectedAbis
}

android {
    buildFeatures {
        prefab true
    }
    configurations {
        all*.exclude module: 'fbjni-java-only'
        extractHeaders
        extractJNI
    }
    dependencies {
        implementation 'com.facebook.fbjni:fbjni:0.2.2'
        compileOnly 'com.facebook.fbjni:fbjni:0.2.2'
        extractHeaders 'com.facebook.fbjni:fbjni:0.2.2:headers'
        extractJNI 'com.facebook.fbjni:fbjni:0.2.2'
    }

    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion
 
    namespace "app.comm.android"

    defaultConfig {
        applicationId 'app.comm.android'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 528
        versionName '1.0.528'
        multiDexEnabled true
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('COMM_UPLOAD_STORE_FILE')) {
                def password = getPassword('CommAndroidKeyPassword')
                storeFile file(COMM_UPLOAD_STORE_FILE)
                storePassword password
                keyAlias COMM_UPLOAD_KEY_ALIAS
                keyPassword password
            }
        }
    }
    buildTypes {
        final buildABIs = getBuildTypeABIs(reactNativeArchitectures())
        release {
            if (project.hasProperty('COMM_UPLOAD_STORE_FILE')) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            ndk {
                abiFilters = []
                abiFilters.addAll(buildABIs)
            }
        }
        debug {
            signingConfig signingConfigs.debug
            ndk {
                abiFilters = []
                abiFilters.addAll(buildABIs)
            }
        }
    }

    packagingOptions {
        pickFirst "**/libc++_shared.so"
        pickFirst "**/libfbjni.so"
    }

    defaultConfig {
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared",
                    "-DOPENSSL_VERSION=" + OPENSSL_VERSION,
                    "-DNDK_VERSION=" + rootProject.ext.ndkVersion,
                    "-DCI=${System.getenv('CI')}"
                targets "comm_jni_module", "turbomodulejsijni"
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
            version "3.18.1"
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

dependencies {
    implementation 'com.tencent:mmkv:1.3.5'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.10"

    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        // For animated gif support
        implementation("com.facebook.fresco:animated-gif:${expoLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        // For webp support
        implementation("com.facebook.fresco:webpsupport:${expoLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation("com.facebook.fresco:animated-webp:${expoLibs.versions.fresco.get()}")
        }
    }

    implementation "com.google.android.gms:play-services-base:16.1.0"
    implementation "com.google.firebase:firebase-core:21.1.0"
    implementation "com.google.firebase:firebase-messaging:21.1.0"
    implementation "me.leolin:ShortcutBadger:1.1.21@aar"
    implementation project(':reactnativekeyboardinput')
    implementation "androidx.multidex:multidex:2.0.1"

    implementation "androidx.lifecycle:lifecycle-process:2.5.1"

    implementation 'com.facebook.fresco:fresco:2.5.0'
    implementation 'com.facebook.fresco:animated-gif:2.5.0'
    implementation 'com.facebook.fresco:animated-webp:2.5.0'
    implementation 'com.facebook.fresco:webpsupport:2.5.0'

    implementation 'org.conscrypt:conscrypt-android:2.0.0'

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    def work_version = "2.8.1"
    // (Java only)
    implementation "androidx.work:work-runtime:$work_version"
    // Guava for listenable future to solve the bug:
    // https://stackoverflow.com/questions/64290141/android-studio-class-file-for-com-google-common-util-concurrent-listenablefuture
    // https://github.com/google/ExoPlayer/issues/7993
    implementation "com.google.guava:guava:31.0.1-android"

    api "androidx.biometric:biometric:1.1.0"
}

apply plugin: 'com.google.gms.google-services'
