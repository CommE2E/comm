// @generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tunnelbroker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tunnelbroker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tunnelbroker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tunnelbroker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tunnelbroker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tunnelbroker_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_tunnelbroker_2eproto_metadata_getter(int index);
namespace tunnelbroker {
class CheckRequest;
struct CheckRequestDefaultTypeInternal;
extern CheckRequestDefaultTypeInternal _CheckRequest_default_instance_;
class CheckResponse;
struct CheckResponseDefaultTypeInternal;
extern CheckResponseDefaultTypeInternal _CheckResponse_default_instance_;
class GetRequest;
struct GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
struct GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class InboundMessage;
struct InboundMessageDefaultTypeInternal;
extern InboundMessageDefaultTypeInternal _InboundMessage_default_instance_;
class NewPrimaryRequest;
struct NewPrimaryRequestDefaultTypeInternal;
extern NewPrimaryRequestDefaultTypeInternal _NewPrimaryRequest_default_instance_;
class NewPrimaryResponse;
struct NewPrimaryResponseDefaultTypeInternal;
extern NewPrimaryResponseDefaultTypeInternal _NewPrimaryResponse_default_instance_;
class NewSessionRequest;
struct NewSessionRequestDefaultTypeInternal;
extern NewSessionRequestDefaultTypeInternal _NewSessionRequest_default_instance_;
class NewSessionResponse;
struct NewSessionResponseDefaultTypeInternal;
extern NewSessionResponseDefaultTypeInternal _NewSessionResponse_default_instance_;
class OutboundMessage;
struct OutboundMessageDefaultTypeInternal;
extern OutboundMessageDefaultTypeInternal _OutboundMessage_default_instance_;
class PongRequest;
struct PongRequestDefaultTypeInternal;
extern PongRequestDefaultTypeInternal _PongRequest_default_instance_;
class SendRequest;
struct SendRequestDefaultTypeInternal;
extern SendRequestDefaultTypeInternal _SendRequest_default_instance_;
class SessionSignatureRequest;
struct SessionSignatureRequestDefaultTypeInternal;
extern SessionSignatureRequestDefaultTypeInternal _SessionSignatureRequest_default_instance_;
class SessionSignatureResponse;
struct SessionSignatureResponseDefaultTypeInternal;
extern SessionSignatureResponseDefaultTypeInternal _SessionSignatureResponse_default_instance_;
}  // namespace tunnelbroker
PROTOBUF_NAMESPACE_OPEN
template<> ::tunnelbroker::CheckRequest* Arena::CreateMaybeMessage<::tunnelbroker::CheckRequest>(Arena*);
template<> ::tunnelbroker::CheckResponse* Arena::CreateMaybeMessage<::tunnelbroker::CheckResponse>(Arena*);
template<> ::tunnelbroker::GetRequest* Arena::CreateMaybeMessage<::tunnelbroker::GetRequest>(Arena*);
template<> ::tunnelbroker::GetResponse* Arena::CreateMaybeMessage<::tunnelbroker::GetResponse>(Arena*);
template<> ::tunnelbroker::InboundMessage* Arena::CreateMaybeMessage<::tunnelbroker::InboundMessage>(Arena*);
template<> ::tunnelbroker::NewPrimaryRequest* Arena::CreateMaybeMessage<::tunnelbroker::NewPrimaryRequest>(Arena*);
template<> ::tunnelbroker::NewPrimaryResponse* Arena::CreateMaybeMessage<::tunnelbroker::NewPrimaryResponse>(Arena*);
template<> ::tunnelbroker::NewSessionRequest* Arena::CreateMaybeMessage<::tunnelbroker::NewSessionRequest>(Arena*);
template<> ::tunnelbroker::NewSessionResponse* Arena::CreateMaybeMessage<::tunnelbroker::NewSessionResponse>(Arena*);
template<> ::tunnelbroker::OutboundMessage* Arena::CreateMaybeMessage<::tunnelbroker::OutboundMessage>(Arena*);
template<> ::tunnelbroker::PongRequest* Arena::CreateMaybeMessage<::tunnelbroker::PongRequest>(Arena*);
template<> ::tunnelbroker::SendRequest* Arena::CreateMaybeMessage<::tunnelbroker::SendRequest>(Arena*);
template<> ::tunnelbroker::SessionSignatureRequest* Arena::CreateMaybeMessage<::tunnelbroker::SessionSignatureRequest>(Arena*);
template<> ::tunnelbroker::SessionSignatureResponse* Arena::CreateMaybeMessage<::tunnelbroker::SessionSignatureResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tunnelbroker {

enum NewSessionRequest_DeviceTypes : int {
  NewSessionRequest_DeviceTypes_MOBILE = 0,
  NewSessionRequest_DeviceTypes_WEB = 1,
  NewSessionRequest_DeviceTypes_KEYSERVER = 2,
  NewSessionRequest_DeviceTypes_NewSessionRequest_DeviceTypes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NewSessionRequest_DeviceTypes_NewSessionRequest_DeviceTypes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NewSessionRequest_DeviceTypes_IsValid(int value);
constexpr NewSessionRequest_DeviceTypes NewSessionRequest_DeviceTypes_DeviceTypes_MIN = NewSessionRequest_DeviceTypes_MOBILE;
constexpr NewSessionRequest_DeviceTypes NewSessionRequest_DeviceTypes_DeviceTypes_MAX = NewSessionRequest_DeviceTypes_KEYSERVER;
constexpr int NewSessionRequest_DeviceTypes_DeviceTypes_ARRAYSIZE = NewSessionRequest_DeviceTypes_DeviceTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NewSessionRequest_DeviceTypes_descriptor();
template<typename T>
inline const std::string& NewSessionRequest_DeviceTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NewSessionRequest_DeviceTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NewSessionRequest_DeviceTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NewSessionRequest_DeviceTypes_descriptor(), enum_t_value);
}
inline bool NewSessionRequest_DeviceTypes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NewSessionRequest_DeviceTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NewSessionRequest_DeviceTypes>(
    NewSessionRequest_DeviceTypes_descriptor(), name, value);
}
enum CheckResponseType : int {
  PRIMARY_DOESNT_EXIST = 0,
  PRIMARY_ONLINE = 1,
  PRIMARY_OFFLINE = 2,
  CURRENT_IS_PRIMARY = 3,
  CheckResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CheckResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CheckResponseType_IsValid(int value);
constexpr CheckResponseType CheckResponseType_MIN = PRIMARY_DOESNT_EXIST;
constexpr CheckResponseType CheckResponseType_MAX = CURRENT_IS_PRIMARY;
constexpr int CheckResponseType_ARRAYSIZE = CheckResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckResponseType_descriptor();
template<typename T>
inline const std::string& CheckResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CheckResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CheckResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CheckResponseType_descriptor(), enum_t_value);
}
inline bool CheckResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CheckResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CheckResponseType>(
    CheckResponseType_descriptor(), name, value);
}
// ===================================================================

class SessionSignatureRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.SessionSignatureRequest) */ {
 public:
  inline SessionSignatureRequest() : SessionSignatureRequest(nullptr) {}
  virtual ~SessionSignatureRequest();
  explicit constexpr SessionSignatureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionSignatureRequest(const SessionSignatureRequest& from);
  SessionSignatureRequest(SessionSignatureRequest&& from) noexcept
    : SessionSignatureRequest() {
    *this = ::std::move(from);
  }

  inline SessionSignatureRequest& operator=(const SessionSignatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionSignatureRequest& operator=(SessionSignatureRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionSignatureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionSignatureRequest* internal_default_instance() {
    return reinterpret_cast<const SessionSignatureRequest*>(
               &_SessionSignatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SessionSignatureRequest& a, SessionSignatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionSignatureRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionSignatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionSignatureRequest* New() const final {
    return CreateMaybeMessage<SessionSignatureRequest>(nullptr);
  }

  SessionSignatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionSignatureRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionSignatureRequest& from);
  void MergeFrom(const SessionSignatureRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionSignatureRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.SessionSignatureRequest";
  }
  protected:
  explicit SessionSignatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDFieldNumber = 1,
  };
  // string deviceID = 1;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.SessionSignatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class SessionSignatureResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.SessionSignatureResponse) */ {
 public:
  inline SessionSignatureResponse() : SessionSignatureResponse(nullptr) {}
  virtual ~SessionSignatureResponse();
  explicit constexpr SessionSignatureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionSignatureResponse(const SessionSignatureResponse& from);
  SessionSignatureResponse(SessionSignatureResponse&& from) noexcept
    : SessionSignatureResponse() {
    *this = ::std::move(from);
  }

  inline SessionSignatureResponse& operator=(const SessionSignatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionSignatureResponse& operator=(SessionSignatureResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionSignatureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionSignatureResponse* internal_default_instance() {
    return reinterpret_cast<const SessionSignatureResponse*>(
               &_SessionSignatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SessionSignatureResponse& a, SessionSignatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionSignatureResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionSignatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionSignatureResponse* New() const final {
    return CreateMaybeMessage<SessionSignatureResponse>(nullptr);
  }

  SessionSignatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionSignatureResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionSignatureResponse& from);
  void MergeFrom(const SessionSignatureResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionSignatureResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.SessionSignatureResponse";
  }
  protected:
  explicit SessionSignatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToSignFieldNumber = 1,
  };
  // string toSign = 1;
  void clear_tosign();
  const std::string& tosign() const;
  void set_tosign(const std::string& value);
  void set_tosign(std::string&& value);
  void set_tosign(const char* value);
  void set_tosign(const char* value, size_t size);
  std::string* mutable_tosign();
  std::string* release_tosign();
  void set_allocated_tosign(std::string* tosign);
  private:
  const std::string& _internal_tosign() const;
  void _internal_set_tosign(const std::string& value);
  std::string* _internal_mutable_tosign();
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.SessionSignatureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tosign_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class NewSessionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.NewSessionRequest) */ {
 public:
  inline NewSessionRequest() : NewSessionRequest(nullptr) {}
  virtual ~NewSessionRequest();
  explicit constexpr NewSessionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewSessionRequest(const NewSessionRequest& from);
  NewSessionRequest(NewSessionRequest&& from) noexcept
    : NewSessionRequest() {
    *this = ::std::move(from);
  }

  inline NewSessionRequest& operator=(const NewSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewSessionRequest& operator=(NewSessionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewSessionRequest* internal_default_instance() {
    return reinterpret_cast<const NewSessionRequest*>(
               &_NewSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NewSessionRequest& a, NewSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NewSessionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewSessionRequest* New() const final {
    return CreateMaybeMessage<NewSessionRequest>(nullptr);
  }

  NewSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewSessionRequest& from);
  void MergeFrom(const NewSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.NewSessionRequest";
  }
  protected:
  explicit NewSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef NewSessionRequest_DeviceTypes DeviceTypes;
  static constexpr DeviceTypes MOBILE =
    NewSessionRequest_DeviceTypes_MOBILE;
  static constexpr DeviceTypes WEB =
    NewSessionRequest_DeviceTypes_WEB;
  static constexpr DeviceTypes KEYSERVER =
    NewSessionRequest_DeviceTypes_KEYSERVER;
  static inline bool DeviceTypes_IsValid(int value) {
    return NewSessionRequest_DeviceTypes_IsValid(value);
  }
  static constexpr DeviceTypes DeviceTypes_MIN =
    NewSessionRequest_DeviceTypes_DeviceTypes_MIN;
  static constexpr DeviceTypes DeviceTypes_MAX =
    NewSessionRequest_DeviceTypes_DeviceTypes_MAX;
  static constexpr int DeviceTypes_ARRAYSIZE =
    NewSessionRequest_DeviceTypes_DeviceTypes_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeviceTypes_descriptor() {
    return NewSessionRequest_DeviceTypes_descriptor();
  }
  template<typename T>
  static inline const std::string& DeviceTypes_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeviceTypes>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeviceTypes_Name.");
    return NewSessionRequest_DeviceTypes_Name(enum_t_value);
  }
  static inline bool DeviceTypes_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DeviceTypes* value) {
    return NewSessionRequest_DeviceTypes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kNotifyTokenFieldNumber = 4,
    kDeviceAppVersionFieldNumber = 6,
    kDeviceOSFieldNumber = 7,
    kDeviceTypeFieldNumber = 5,
  };
  // string deviceID = 1;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string publicKey = 2;
  void clear_publickey();
  const std::string& publickey() const;
  void set_publickey(const std::string& value);
  void set_publickey(std::string&& value);
  void set_publickey(const char* value);
  void set_publickey(const char* value, size_t size);
  std::string* mutable_publickey();
  std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);
  private:
  const std::string& _internal_publickey() const;
  void _internal_set_publickey(const std::string& value);
  std::string* _internal_mutable_publickey();
  public:

  // string signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // string notifyToken = 4;
  bool has_notifytoken() const;
  private:
  bool _internal_has_notifytoken() const;
  public:
  void clear_notifytoken();
  const std::string& notifytoken() const;
  void set_notifytoken(const std::string& value);
  void set_notifytoken(std::string&& value);
  void set_notifytoken(const char* value);
  void set_notifytoken(const char* value, size_t size);
  std::string* mutable_notifytoken();
  std::string* release_notifytoken();
  void set_allocated_notifytoken(std::string* notifytoken);
  private:
  const std::string& _internal_notifytoken() const;
  void _internal_set_notifytoken(const std::string& value);
  std::string* _internal_mutable_notifytoken();
  public:

  // string deviceAppVersion = 6;
  void clear_deviceappversion();
  const std::string& deviceappversion() const;
  void set_deviceappversion(const std::string& value);
  void set_deviceappversion(std::string&& value);
  void set_deviceappversion(const char* value);
  void set_deviceappversion(const char* value, size_t size);
  std::string* mutable_deviceappversion();
  std::string* release_deviceappversion();
  void set_allocated_deviceappversion(std::string* deviceappversion);
  private:
  const std::string& _internal_deviceappversion() const;
  void _internal_set_deviceappversion(const std::string& value);
  std::string* _internal_mutable_deviceappversion();
  public:

  // string deviceOS = 7;
  void clear_deviceos();
  const std::string& deviceos() const;
  void set_deviceos(const std::string& value);
  void set_deviceos(std::string&& value);
  void set_deviceos(const char* value);
  void set_deviceos(const char* value, size_t size);
  std::string* mutable_deviceos();
  std::string* release_deviceos();
  void set_allocated_deviceos(std::string* deviceos);
  private:
  const std::string& _internal_deviceos() const;
  void _internal_set_deviceos(const std::string& value);
  std::string* _internal_mutable_deviceos();
  public:

  // .tunnelbroker.NewSessionRequest.DeviceTypes deviceType = 5;
  void clear_devicetype();
  ::tunnelbroker::NewSessionRequest_DeviceTypes devicetype() const;
  void set_devicetype(::tunnelbroker::NewSessionRequest_DeviceTypes value);
  private:
  ::tunnelbroker::NewSessionRequest_DeviceTypes _internal_devicetype() const;
  void _internal_set_devicetype(::tunnelbroker::NewSessionRequest_DeviceTypes value);
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.NewSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notifytoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceappversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceos_;
  int devicetype_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class NewSessionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.NewSessionResponse) */ {
 public:
  inline NewSessionResponse() : NewSessionResponse(nullptr) {}
  virtual ~NewSessionResponse();
  explicit constexpr NewSessionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewSessionResponse(const NewSessionResponse& from);
  NewSessionResponse(NewSessionResponse&& from) noexcept
    : NewSessionResponse() {
    *this = ::std::move(from);
  }

  inline NewSessionResponse& operator=(const NewSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewSessionResponse& operator=(NewSessionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewSessionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewSessionResponse* internal_default_instance() {
    return reinterpret_cast<const NewSessionResponse*>(
               &_NewSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NewSessionResponse& a, NewSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NewSessionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewSessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewSessionResponse* New() const final {
    return CreateMaybeMessage<NewSessionResponse>(nullptr);
  }

  NewSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewSessionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewSessionResponse& from);
  void MergeFrom(const NewSessionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewSessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.NewSessionResponse";
  }
  protected:
  explicit NewSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIDFieldNumber = 1,
  };
  // string sessionID = 1;
  void clear_sessionid();
  const std::string& sessionid() const;
  void set_sessionid(const std::string& value);
  void set_sessionid(std::string&& value);
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  std::string* mutable_sessionid();
  std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.NewSessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class SendRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.SendRequest) */ {
 public:
  inline SendRequest() : SendRequest(nullptr) {}
  virtual ~SendRequest();
  explicit constexpr SendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendRequest(const SendRequest& from);
  SendRequest(SendRequest&& from) noexcept
    : SendRequest() {
    *this = ::std::move(from);
  }

  inline SendRequest& operator=(const SendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendRequest& operator=(SendRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendRequest* internal_default_instance() {
    return reinterpret_cast<const SendRequest*>(
               &_SendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SendRequest& a, SendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendRequest* New() const final {
    return CreateMaybeMessage<SendRequest>(nullptr);
  }

  SendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendRequest& from);
  void MergeFrom(const SendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.SendRequest";
  }
  protected:
  explicit SendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobHashesFieldNumber = 4,
    kSessionIDFieldNumber = 1,
    kToDeviceIDFieldNumber = 2,
    kPayloadFieldNumber = 3,
  };
  // repeated string blobHashes = 4;
  int blobhashes_size() const;
  private:
  int _internal_blobhashes_size() const;
  public:
  void clear_blobhashes();
  const std::string& blobhashes(int index) const;
  std::string* mutable_blobhashes(int index);
  void set_blobhashes(int index, const std::string& value);
  void set_blobhashes(int index, std::string&& value);
  void set_blobhashes(int index, const char* value);
  void set_blobhashes(int index, const char* value, size_t size);
  std::string* add_blobhashes();
  void add_blobhashes(const std::string& value);
  void add_blobhashes(std::string&& value);
  void add_blobhashes(const char* value);
  void add_blobhashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blobhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blobhashes();
  private:
  const std::string& _internal_blobhashes(int index) const;
  std::string* _internal_add_blobhashes();
  public:

  // string sessionID = 1;
  void clear_sessionid();
  const std::string& sessionid() const;
  void set_sessionid(const std::string& value);
  void set_sessionid(std::string&& value);
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  std::string* mutable_sessionid();
  std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // string toDeviceID = 2;
  void clear_todeviceid();
  const std::string& todeviceid() const;
  void set_todeviceid(const std::string& value);
  void set_todeviceid(std::string&& value);
  void set_todeviceid(const char* value);
  void set_todeviceid(const char* value, size_t size);
  std::string* mutable_todeviceid();
  std::string* release_todeviceid();
  void set_allocated_todeviceid(std::string* todeviceid);
  private:
  const std::string& _internal_todeviceid() const;
  void _internal_set_todeviceid(const std::string& value);
  std::string* _internal_mutable_todeviceid();
  public:

  // bytes payload = 3;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.SendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blobhashes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr todeviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class GetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  virtual ~GetRequest();
  explicit constexpr GetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRequest(const GetRequest& from);
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(nullptr);
  }

  GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.GetRequest";
  }
  protected:
  explicit GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIDFieldNumber = 1,
  };
  // string sessionID = 1;
  void clear_sessionid();
  const std::string& sessionid() const;
  void set_sessionid(const std::string& value);
  void set_sessionid(std::string&& value);
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  std::string* mutable_sessionid();
  std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.GetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class GetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.GetResponse) */ {
 public:
  inline GetResponse() : GetResponse(nullptr) {}
  virtual ~GetResponse();
  explicit constexpr GetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetResponse(const GetResponse& from);
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const final {
    return CreateMaybeMessage<GetResponse>(nullptr);
  }

  GetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.GetResponse";
  }
  protected:
  explicit GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobHashesFieldNumber = 3,
    kFromDeviceIDFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // repeated string blobHashes = 3;
  int blobhashes_size() const;
  private:
  int _internal_blobhashes_size() const;
  public:
  void clear_blobhashes();
  const std::string& blobhashes(int index) const;
  std::string* mutable_blobhashes(int index);
  void set_blobhashes(int index, const std::string& value);
  void set_blobhashes(int index, std::string&& value);
  void set_blobhashes(int index, const char* value);
  void set_blobhashes(int index, const char* value, size_t size);
  std::string* add_blobhashes();
  void add_blobhashes(const std::string& value);
  void add_blobhashes(std::string&& value);
  void add_blobhashes(const char* value);
  void add_blobhashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blobhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blobhashes();
  private:
  const std::string& _internal_blobhashes(int index) const;
  std::string* _internal_add_blobhashes();
  public:

  // string fromDeviceID = 1;
  void clear_fromdeviceid();
  const std::string& fromdeviceid() const;
  void set_fromdeviceid(const std::string& value);
  void set_fromdeviceid(std::string&& value);
  void set_fromdeviceid(const char* value);
  void set_fromdeviceid(const char* value, size_t size);
  std::string* mutable_fromdeviceid();
  std::string* release_fromdeviceid();
  void set_allocated_fromdeviceid(std::string* fromdeviceid);
  private:
  const std::string& _internal_fromdeviceid() const;
  void _internal_set_fromdeviceid(const std::string& value);
  std::string* _internal_mutable_fromdeviceid();
  public:

  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.GetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blobhashes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromdeviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class OutboundMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.OutboundMessage) */ {
 public:
  inline OutboundMessage() : OutboundMessage(nullptr) {}
  virtual ~OutboundMessage();
  explicit constexpr OutboundMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutboundMessage(const OutboundMessage& from);
  OutboundMessage(OutboundMessage&& from) noexcept
    : OutboundMessage() {
    *this = ::std::move(from);
  }

  inline OutboundMessage& operator=(const OutboundMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutboundMessage& operator=(OutboundMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutboundMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutboundMessage* internal_default_instance() {
    return reinterpret_cast<const OutboundMessage*>(
               &_OutboundMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OutboundMessage& a, OutboundMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(OutboundMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutboundMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutboundMessage* New() const final {
    return CreateMaybeMessage<OutboundMessage>(nullptr);
  }

  OutboundMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutboundMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutboundMessage& from);
  void MergeFrom(const OutboundMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutboundMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.OutboundMessage";
  }
  protected:
  explicit OutboundMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobHashesFieldNumber = 3,
    kToDeviceIDFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // repeated string blobHashes = 3;
  int blobhashes_size() const;
  private:
  int _internal_blobhashes_size() const;
  public:
  void clear_blobhashes();
  const std::string& blobhashes(int index) const;
  std::string* mutable_blobhashes(int index);
  void set_blobhashes(int index, const std::string& value);
  void set_blobhashes(int index, std::string&& value);
  void set_blobhashes(int index, const char* value);
  void set_blobhashes(int index, const char* value, size_t size);
  std::string* add_blobhashes();
  void add_blobhashes(const std::string& value);
  void add_blobhashes(std::string&& value);
  void add_blobhashes(const char* value);
  void add_blobhashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blobhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blobhashes();
  private:
  const std::string& _internal_blobhashes(int index) const;
  std::string* _internal_add_blobhashes();
  public:

  // string toDeviceID = 1;
  void clear_todeviceid();
  const std::string& todeviceid() const;
  void set_todeviceid(const std::string& value);
  void set_todeviceid(std::string&& value);
  void set_todeviceid(const char* value);
  void set_todeviceid(const char* value, size_t size);
  std::string* mutable_todeviceid();
  std::string* release_todeviceid();
  void set_allocated_todeviceid(std::string* todeviceid);
  private:
  const std::string& _internal_todeviceid() const;
  void _internal_set_todeviceid(const std::string& value);
  std::string* _internal_mutable_todeviceid();
  public:

  // string payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.OutboundMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blobhashes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr todeviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class InboundMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.InboundMessage) */ {
 public:
  inline InboundMessage() : InboundMessage(nullptr) {}
  virtual ~InboundMessage();
  explicit constexpr InboundMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InboundMessage(const InboundMessage& from);
  InboundMessage(InboundMessage&& from) noexcept
    : InboundMessage() {
    *this = ::std::move(from);
  }

  inline InboundMessage& operator=(const InboundMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InboundMessage& operator=(InboundMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InboundMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InboundMessage* internal_default_instance() {
    return reinterpret_cast<const InboundMessage*>(
               &_InboundMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InboundMessage& a, InboundMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InboundMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InboundMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InboundMessage* New() const final {
    return CreateMaybeMessage<InboundMessage>(nullptr);
  }

  InboundMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InboundMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InboundMessage& from);
  void MergeFrom(const InboundMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InboundMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.InboundMessage";
  }
  protected:
  explicit InboundMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobHashesFieldNumber = 4,
    kFromDeviceIDFieldNumber = 1,
    kFromConnectionIDFieldNumber = 2,
    kPayloadFieldNumber = 3,
  };
  // repeated string blobHashes = 4;
  int blobhashes_size() const;
  private:
  int _internal_blobhashes_size() const;
  public:
  void clear_blobhashes();
  const std::string& blobhashes(int index) const;
  std::string* mutable_blobhashes(int index);
  void set_blobhashes(int index, const std::string& value);
  void set_blobhashes(int index, std::string&& value);
  void set_blobhashes(int index, const char* value);
  void set_blobhashes(int index, const char* value, size_t size);
  std::string* add_blobhashes();
  void add_blobhashes(const std::string& value);
  void add_blobhashes(std::string&& value);
  void add_blobhashes(const char* value);
  void add_blobhashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blobhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blobhashes();
  private:
  const std::string& _internal_blobhashes(int index) const;
  std::string* _internal_add_blobhashes();
  public:

  // string fromDeviceID = 1;
  void clear_fromdeviceid();
  const std::string& fromdeviceid() const;
  void set_fromdeviceid(const std::string& value);
  void set_fromdeviceid(std::string&& value);
  void set_fromdeviceid(const char* value);
  void set_fromdeviceid(const char* value, size_t size);
  std::string* mutable_fromdeviceid();
  std::string* release_fromdeviceid();
  void set_allocated_fromdeviceid(std::string* fromdeviceid);
  private:
  const std::string& _internal_fromdeviceid() const;
  void _internal_set_fromdeviceid(const std::string& value);
  std::string* _internal_mutable_fromdeviceid();
  public:

  // string fromConnectionID = 2;
  void clear_fromconnectionid();
  const std::string& fromconnectionid() const;
  void set_fromconnectionid(const std::string& value);
  void set_fromconnectionid(std::string&& value);
  void set_fromconnectionid(const char* value);
  void set_fromconnectionid(const char* value, size_t size);
  std::string* mutable_fromconnectionid();
  std::string* release_fromconnectionid();
  void set_allocated_fromconnectionid(std::string* fromconnectionid);
  private:
  const std::string& _internal_fromconnectionid() const;
  void _internal_set_fromconnectionid(const std::string& value);
  std::string* _internal_mutable_fromconnectionid();
  public:

  // string payload = 3;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.InboundMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blobhashes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromdeviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromconnectionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class CheckRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.CheckRequest) */ {
 public:
  inline CheckRequest() : CheckRequest(nullptr) {}
  virtual ~CheckRequest();
  explicit constexpr CheckRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckRequest(const CheckRequest& from);
  CheckRequest(CheckRequest&& from) noexcept
    : CheckRequest() {
    *this = ::std::move(from);
  }

  inline CheckRequest& operator=(const CheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckRequest& operator=(CheckRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckRequest* internal_default_instance() {
    return reinterpret_cast<const CheckRequest*>(
               &_CheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CheckRequest& a, CheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckRequest* New() const final {
    return CreateMaybeMessage<CheckRequest>(nullptr);
  }

  CheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckRequest& from);
  void MergeFrom(const CheckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.CheckRequest";
  }
  protected:
  explicit CheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kDeviceTokenFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string deviceToken = 2;
  void clear_devicetoken();
  const std::string& devicetoken() const;
  void set_devicetoken(const std::string& value);
  void set_devicetoken(std::string&& value);
  void set_devicetoken(const char* value);
  void set_devicetoken(const char* value, size_t size);
  std::string* mutable_devicetoken();
  std::string* release_devicetoken();
  void set_allocated_devicetoken(std::string* devicetoken);
  private:
  const std::string& _internal_devicetoken() const;
  void _internal_set_devicetoken(const std::string& value);
  std::string* _internal_mutable_devicetoken();
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.CheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicetoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class CheckResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.CheckResponse) */ {
 public:
  inline CheckResponse() : CheckResponse(nullptr) {}
  virtual ~CheckResponse();
  explicit constexpr CheckResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckResponse(const CheckResponse& from);
  CheckResponse(CheckResponse&& from) noexcept
    : CheckResponse() {
    *this = ::std::move(from);
  }

  inline CheckResponse& operator=(const CheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckResponse& operator=(CheckResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckResponse* internal_default_instance() {
    return reinterpret_cast<const CheckResponse*>(
               &_CheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CheckResponse& a, CheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckResponse* New() const final {
    return CreateMaybeMessage<CheckResponse>(nullptr);
  }

  CheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckResponse& from);
  void MergeFrom(const CheckResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.CheckResponse";
  }
  protected:
  explicit CheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckResponseTypeFieldNumber = 1,
  };
  // .tunnelbroker.CheckResponseType checkResponseType = 1;
  void clear_checkresponsetype();
  ::tunnelbroker::CheckResponseType checkresponsetype() const;
  void set_checkresponsetype(::tunnelbroker::CheckResponseType value);
  private:
  ::tunnelbroker::CheckResponseType _internal_checkresponsetype() const;
  void _internal_set_checkresponsetype(::tunnelbroker::CheckResponseType value);
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.CheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int checkresponsetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class NewPrimaryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.NewPrimaryRequest) */ {
 public:
  inline NewPrimaryRequest() : NewPrimaryRequest(nullptr) {}
  virtual ~NewPrimaryRequest();
  explicit constexpr NewPrimaryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewPrimaryRequest(const NewPrimaryRequest& from);
  NewPrimaryRequest(NewPrimaryRequest&& from) noexcept
    : NewPrimaryRequest() {
    *this = ::std::move(from);
  }

  inline NewPrimaryRequest& operator=(const NewPrimaryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewPrimaryRequest& operator=(NewPrimaryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewPrimaryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewPrimaryRequest* internal_default_instance() {
    return reinterpret_cast<const NewPrimaryRequest*>(
               &_NewPrimaryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(NewPrimaryRequest& a, NewPrimaryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NewPrimaryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewPrimaryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewPrimaryRequest* New() const final {
    return CreateMaybeMessage<NewPrimaryRequest>(nullptr);
  }

  NewPrimaryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewPrimaryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewPrimaryRequest& from);
  void MergeFrom(const NewPrimaryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewPrimaryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.NewPrimaryRequest";
  }
  protected:
  explicit NewPrimaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kDeviceTokenFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string deviceToken = 2;
  void clear_devicetoken();
  const std::string& devicetoken() const;
  void set_devicetoken(const std::string& value);
  void set_devicetoken(std::string&& value);
  void set_devicetoken(const char* value);
  void set_devicetoken(const char* value, size_t size);
  std::string* mutable_devicetoken();
  std::string* release_devicetoken();
  void set_allocated_devicetoken(std::string* devicetoken);
  private:
  const std::string& _internal_devicetoken() const;
  void _internal_set_devicetoken(const std::string& value);
  std::string* _internal_mutable_devicetoken();
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.NewPrimaryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicetoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class NewPrimaryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.NewPrimaryResponse) */ {
 public:
  inline NewPrimaryResponse() : NewPrimaryResponse(nullptr) {}
  virtual ~NewPrimaryResponse();
  explicit constexpr NewPrimaryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewPrimaryResponse(const NewPrimaryResponse& from);
  NewPrimaryResponse(NewPrimaryResponse&& from) noexcept
    : NewPrimaryResponse() {
    *this = ::std::move(from);
  }

  inline NewPrimaryResponse& operator=(const NewPrimaryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewPrimaryResponse& operator=(NewPrimaryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewPrimaryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewPrimaryResponse* internal_default_instance() {
    return reinterpret_cast<const NewPrimaryResponse*>(
               &_NewPrimaryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(NewPrimaryResponse& a, NewPrimaryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NewPrimaryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewPrimaryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewPrimaryResponse* New() const final {
    return CreateMaybeMessage<NewPrimaryResponse>(nullptr);
  }

  NewPrimaryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewPrimaryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewPrimaryResponse& from);
  void MergeFrom(const NewPrimaryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewPrimaryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.NewPrimaryResponse";
  }
  protected:
  explicit NewPrimaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.NewPrimaryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class PongRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.PongRequest) */ {
 public:
  inline PongRequest() : PongRequest(nullptr) {}
  virtual ~PongRequest();
  explicit constexpr PongRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PongRequest(const PongRequest& from);
  PongRequest(PongRequest&& from) noexcept
    : PongRequest() {
    *this = ::std::move(from);
  }

  inline PongRequest& operator=(const PongRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PongRequest& operator=(PongRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PongRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PongRequest* internal_default_instance() {
    return reinterpret_cast<const PongRequest*>(
               &_PongRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PongRequest& a, PongRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PongRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PongRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PongRequest* New() const final {
    return CreateMaybeMessage<PongRequest>(nullptr);
  }

  PongRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PongRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PongRequest& from);
  void MergeFrom(const PongRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PongRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.PongRequest";
  }
  protected:
  explicit PongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kDeviceTokenFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string deviceToken = 2;
  void clear_devicetoken();
  const std::string& devicetoken() const;
  void set_devicetoken(const std::string& value);
  void set_devicetoken(std::string&& value);
  void set_devicetoken(const char* value);
  void set_devicetoken(const char* value, size_t size);
  std::string* mutable_devicetoken();
  std::string* release_devicetoken();
  void set_allocated_devicetoken(std::string* devicetoken);
  private:
  const std::string& _internal_devicetoken() const;
  void _internal_set_devicetoken(const std::string& value);
  std::string* _internal_mutable_devicetoken();
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.PongRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicetoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionSignatureRequest

// string deviceID = 1;
inline void SessionSignatureRequest::clear_deviceid() {
  deviceid_.ClearToEmpty();
}
inline const std::string& SessionSignatureRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.SessionSignatureRequest.deviceID)
  return _internal_deviceid();
}
inline void SessionSignatureRequest::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.SessionSignatureRequest.deviceID)
}
inline std::string* SessionSignatureRequest::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.SessionSignatureRequest.deviceID)
  return _internal_mutable_deviceid();
}
inline const std::string& SessionSignatureRequest::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void SessionSignatureRequest::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionSignatureRequest::set_deviceid(std::string&& value) {
  
  deviceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.SessionSignatureRequest.deviceID)
}
inline void SessionSignatureRequest::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.SessionSignatureRequest.deviceID)
}
inline void SessionSignatureRequest::set_deviceid(const char* value,
    size_t size) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.SessionSignatureRequest.deviceID)
}
inline std::string* SessionSignatureRequest::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionSignatureRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.SessionSignatureRequest.deviceID)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionSignatureRequest::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.SessionSignatureRequest.deviceID)
}

// -------------------------------------------------------------------

// SessionSignatureResponse

// string toSign = 1;
inline void SessionSignatureResponse::clear_tosign() {
  tosign_.ClearToEmpty();
}
inline const std::string& SessionSignatureResponse::tosign() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.SessionSignatureResponse.toSign)
  return _internal_tosign();
}
inline void SessionSignatureResponse::set_tosign(const std::string& value) {
  _internal_set_tosign(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.SessionSignatureResponse.toSign)
}
inline std::string* SessionSignatureResponse::mutable_tosign() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.SessionSignatureResponse.toSign)
  return _internal_mutable_tosign();
}
inline const std::string& SessionSignatureResponse::_internal_tosign() const {
  return tosign_.Get();
}
inline void SessionSignatureResponse::_internal_set_tosign(const std::string& value) {
  
  tosign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionSignatureResponse::set_tosign(std::string&& value) {
  
  tosign_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.SessionSignatureResponse.toSign)
}
inline void SessionSignatureResponse::set_tosign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tosign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.SessionSignatureResponse.toSign)
}
inline void SessionSignatureResponse::set_tosign(const char* value,
    size_t size) {
  
  tosign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.SessionSignatureResponse.toSign)
}
inline std::string* SessionSignatureResponse::_internal_mutable_tosign() {
  
  return tosign_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionSignatureResponse::release_tosign() {
  // @@protoc_insertion_point(field_release:tunnelbroker.SessionSignatureResponse.toSign)
  return tosign_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionSignatureResponse::set_allocated_tosign(std::string* tosign) {
  if (tosign != nullptr) {
    
  } else {
    
  }
  tosign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tosign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.SessionSignatureResponse.toSign)
}

// -------------------------------------------------------------------

// NewSessionRequest

// string deviceID = 1;
inline void NewSessionRequest::clear_deviceid() {
  deviceid_.ClearToEmpty();
}
inline const std::string& NewSessionRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.NewSessionRequest.deviceID)
  return _internal_deviceid();
}
inline void NewSessionRequest::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.NewSessionRequest.deviceID)
}
inline std::string* NewSessionRequest::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.NewSessionRequest.deviceID)
  return _internal_mutable_deviceid();
}
inline const std::string& NewSessionRequest::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void NewSessionRequest::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewSessionRequest::set_deviceid(std::string&& value) {
  
  deviceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.NewSessionRequest.deviceID)
}
inline void NewSessionRequest::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.NewSessionRequest.deviceID)
}
inline void NewSessionRequest::set_deviceid(const char* value,
    size_t size) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.NewSessionRequest.deviceID)
}
inline std::string* NewSessionRequest::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewSessionRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.NewSessionRequest.deviceID)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewSessionRequest::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.NewSessionRequest.deviceID)
}

// string publicKey = 2;
inline void NewSessionRequest::clear_publickey() {
  publickey_.ClearToEmpty();
}
inline const std::string& NewSessionRequest::publickey() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.NewSessionRequest.publicKey)
  return _internal_publickey();
}
inline void NewSessionRequest::set_publickey(const std::string& value) {
  _internal_set_publickey(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.NewSessionRequest.publicKey)
}
inline std::string* NewSessionRequest::mutable_publickey() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.NewSessionRequest.publicKey)
  return _internal_mutable_publickey();
}
inline const std::string& NewSessionRequest::_internal_publickey() const {
  return publickey_.Get();
}
inline void NewSessionRequest::_internal_set_publickey(const std::string& value) {
  
  publickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewSessionRequest::set_publickey(std::string&& value) {
  
  publickey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.NewSessionRequest.publicKey)
}
inline void NewSessionRequest::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.NewSessionRequest.publicKey)
}
inline void NewSessionRequest::set_publickey(const char* value,
    size_t size) {
  
  publickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.NewSessionRequest.publicKey)
}
inline std::string* NewSessionRequest::_internal_mutable_publickey() {
  
  return publickey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewSessionRequest::release_publickey() {
  // @@protoc_insertion_point(field_release:tunnelbroker.NewSessionRequest.publicKey)
  return publickey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewSessionRequest::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  publickey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publickey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.NewSessionRequest.publicKey)
}

// string signature = 3;
inline void NewSessionRequest::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& NewSessionRequest::signature() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.NewSessionRequest.signature)
  return _internal_signature();
}
inline void NewSessionRequest::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.NewSessionRequest.signature)
}
inline std::string* NewSessionRequest::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.NewSessionRequest.signature)
  return _internal_mutable_signature();
}
inline const std::string& NewSessionRequest::_internal_signature() const {
  return signature_.Get();
}
inline void NewSessionRequest::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewSessionRequest::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.NewSessionRequest.signature)
}
inline void NewSessionRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.NewSessionRequest.signature)
}
inline void NewSessionRequest::set_signature(const char* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.NewSessionRequest.signature)
}
inline std::string* NewSessionRequest::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewSessionRequest::release_signature() {
  // @@protoc_insertion_point(field_release:tunnelbroker.NewSessionRequest.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewSessionRequest::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.NewSessionRequest.signature)
}

// string notifyToken = 4;
inline bool NewSessionRequest::_internal_has_notifytoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NewSessionRequest::has_notifytoken() const {
  return _internal_has_notifytoken();
}
inline void NewSessionRequest::clear_notifytoken() {
  notifytoken_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NewSessionRequest::notifytoken() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.NewSessionRequest.notifyToken)
  return _internal_notifytoken();
}
inline void NewSessionRequest::set_notifytoken(const std::string& value) {
  _internal_set_notifytoken(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.NewSessionRequest.notifyToken)
}
inline std::string* NewSessionRequest::mutable_notifytoken() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.NewSessionRequest.notifyToken)
  return _internal_mutable_notifytoken();
}
inline const std::string& NewSessionRequest::_internal_notifytoken() const {
  return notifytoken_.Get();
}
inline void NewSessionRequest::_internal_set_notifytoken(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  notifytoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewSessionRequest::set_notifytoken(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  notifytoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.NewSessionRequest.notifyToken)
}
inline void NewSessionRequest::set_notifytoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  notifytoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.NewSessionRequest.notifyToken)
}
inline void NewSessionRequest::set_notifytoken(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  notifytoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.NewSessionRequest.notifyToken)
}
inline std::string* NewSessionRequest::_internal_mutable_notifytoken() {
  _has_bits_[0] |= 0x00000001u;
  return notifytoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewSessionRequest::release_notifytoken() {
  // @@protoc_insertion_point(field_release:tunnelbroker.NewSessionRequest.notifyToken)
  if (!_internal_has_notifytoken()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return notifytoken_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewSessionRequest::set_allocated_notifytoken(std::string* notifytoken) {
  if (notifytoken != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  notifytoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notifytoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.NewSessionRequest.notifyToken)
}

// .tunnelbroker.NewSessionRequest.DeviceTypes deviceType = 5;
inline void NewSessionRequest::clear_devicetype() {
  devicetype_ = 0;
}
inline ::tunnelbroker::NewSessionRequest_DeviceTypes NewSessionRequest::_internal_devicetype() const {
  return static_cast< ::tunnelbroker::NewSessionRequest_DeviceTypes >(devicetype_);
}
inline ::tunnelbroker::NewSessionRequest_DeviceTypes NewSessionRequest::devicetype() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.NewSessionRequest.deviceType)
  return _internal_devicetype();
}
inline void NewSessionRequest::_internal_set_devicetype(::tunnelbroker::NewSessionRequest_DeviceTypes value) {
  
  devicetype_ = value;
}
inline void NewSessionRequest::set_devicetype(::tunnelbroker::NewSessionRequest_DeviceTypes value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.NewSessionRequest.deviceType)
}

// string deviceAppVersion = 6;
inline void NewSessionRequest::clear_deviceappversion() {
  deviceappversion_.ClearToEmpty();
}
inline const std::string& NewSessionRequest::deviceappversion() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.NewSessionRequest.deviceAppVersion)
  return _internal_deviceappversion();
}
inline void NewSessionRequest::set_deviceappversion(const std::string& value) {
  _internal_set_deviceappversion(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.NewSessionRequest.deviceAppVersion)
}
inline std::string* NewSessionRequest::mutable_deviceappversion() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.NewSessionRequest.deviceAppVersion)
  return _internal_mutable_deviceappversion();
}
inline const std::string& NewSessionRequest::_internal_deviceappversion() const {
  return deviceappversion_.Get();
}
inline void NewSessionRequest::_internal_set_deviceappversion(const std::string& value) {
  
  deviceappversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewSessionRequest::set_deviceappversion(std::string&& value) {
  
  deviceappversion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.NewSessionRequest.deviceAppVersion)
}
inline void NewSessionRequest::set_deviceappversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceappversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.NewSessionRequest.deviceAppVersion)
}
inline void NewSessionRequest::set_deviceappversion(const char* value,
    size_t size) {
  
  deviceappversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.NewSessionRequest.deviceAppVersion)
}
inline std::string* NewSessionRequest::_internal_mutable_deviceappversion() {
  
  return deviceappversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewSessionRequest::release_deviceappversion() {
  // @@protoc_insertion_point(field_release:tunnelbroker.NewSessionRequest.deviceAppVersion)
  return deviceappversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewSessionRequest::set_allocated_deviceappversion(std::string* deviceappversion) {
  if (deviceappversion != nullptr) {
    
  } else {
    
  }
  deviceappversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceappversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.NewSessionRequest.deviceAppVersion)
}

// string deviceOS = 7;
inline void NewSessionRequest::clear_deviceos() {
  deviceos_.ClearToEmpty();
}
inline const std::string& NewSessionRequest::deviceos() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.NewSessionRequest.deviceOS)
  return _internal_deviceos();
}
inline void NewSessionRequest::set_deviceos(const std::string& value) {
  _internal_set_deviceos(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.NewSessionRequest.deviceOS)
}
inline std::string* NewSessionRequest::mutable_deviceos() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.NewSessionRequest.deviceOS)
  return _internal_mutable_deviceos();
}
inline const std::string& NewSessionRequest::_internal_deviceos() const {
  return deviceos_.Get();
}
inline void NewSessionRequest::_internal_set_deviceos(const std::string& value) {
  
  deviceos_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewSessionRequest::set_deviceos(std::string&& value) {
  
  deviceos_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.NewSessionRequest.deviceOS)
}
inline void NewSessionRequest::set_deviceos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceos_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.NewSessionRequest.deviceOS)
}
inline void NewSessionRequest::set_deviceos(const char* value,
    size_t size) {
  
  deviceos_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.NewSessionRequest.deviceOS)
}
inline std::string* NewSessionRequest::_internal_mutable_deviceos() {
  
  return deviceos_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewSessionRequest::release_deviceos() {
  // @@protoc_insertion_point(field_release:tunnelbroker.NewSessionRequest.deviceOS)
  return deviceos_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewSessionRequest::set_allocated_deviceos(std::string* deviceos) {
  if (deviceos != nullptr) {
    
  } else {
    
  }
  deviceos_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceos,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.NewSessionRequest.deviceOS)
}

// -------------------------------------------------------------------

// NewSessionResponse

// string sessionID = 1;
inline void NewSessionResponse::clear_sessionid() {
  sessionid_.ClearToEmpty();
}
inline const std::string& NewSessionResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.NewSessionResponse.sessionID)
  return _internal_sessionid();
}
inline void NewSessionResponse::set_sessionid(const std::string& value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.NewSessionResponse.sessionID)
}
inline std::string* NewSessionResponse::mutable_sessionid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.NewSessionResponse.sessionID)
  return _internal_mutable_sessionid();
}
inline const std::string& NewSessionResponse::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void NewSessionResponse::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewSessionResponse::set_sessionid(std::string&& value) {
  
  sessionid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.NewSessionResponse.sessionID)
}
inline void NewSessionResponse::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.NewSessionResponse.sessionID)
}
inline void NewSessionResponse::set_sessionid(const char* value,
    size_t size) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.NewSessionResponse.sessionID)
}
inline std::string* NewSessionResponse::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewSessionResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.NewSessionResponse.sessionID)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewSessionResponse::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.NewSessionResponse.sessionID)
}

// -------------------------------------------------------------------

// SendRequest

// string sessionID = 1;
inline void SendRequest::clear_sessionid() {
  sessionid_.ClearToEmpty();
}
inline const std::string& SendRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.SendRequest.sessionID)
  return _internal_sessionid();
}
inline void SendRequest::set_sessionid(const std::string& value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.SendRequest.sessionID)
}
inline std::string* SendRequest::mutable_sessionid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.SendRequest.sessionID)
  return _internal_mutable_sessionid();
}
inline const std::string& SendRequest::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void SendRequest::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendRequest::set_sessionid(std::string&& value) {
  
  sessionid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.SendRequest.sessionID)
}
inline void SendRequest::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.SendRequest.sessionID)
}
inline void SendRequest::set_sessionid(const char* value,
    size_t size) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.SendRequest.sessionID)
}
inline std::string* SendRequest::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendRequest::release_sessionid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.SendRequest.sessionID)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendRequest::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.SendRequest.sessionID)
}

// string toDeviceID = 2;
inline void SendRequest::clear_todeviceid() {
  todeviceid_.ClearToEmpty();
}
inline const std::string& SendRequest::todeviceid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.SendRequest.toDeviceID)
  return _internal_todeviceid();
}
inline void SendRequest::set_todeviceid(const std::string& value) {
  _internal_set_todeviceid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.SendRequest.toDeviceID)
}
inline std::string* SendRequest::mutable_todeviceid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.SendRequest.toDeviceID)
  return _internal_mutable_todeviceid();
}
inline const std::string& SendRequest::_internal_todeviceid() const {
  return todeviceid_.Get();
}
inline void SendRequest::_internal_set_todeviceid(const std::string& value) {
  
  todeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendRequest::set_todeviceid(std::string&& value) {
  
  todeviceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.SendRequest.toDeviceID)
}
inline void SendRequest::set_todeviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  todeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.SendRequest.toDeviceID)
}
inline void SendRequest::set_todeviceid(const char* value,
    size_t size) {
  
  todeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.SendRequest.toDeviceID)
}
inline std::string* SendRequest::_internal_mutable_todeviceid() {
  
  return todeviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendRequest::release_todeviceid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.SendRequest.toDeviceID)
  return todeviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendRequest::set_allocated_todeviceid(std::string* todeviceid) {
  if (todeviceid != nullptr) {
    
  } else {
    
  }
  todeviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), todeviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.SendRequest.toDeviceID)
}

// bytes payload = 3;
inline void SendRequest::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& SendRequest::payload() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.SendRequest.payload)
  return _internal_payload();
}
inline void SendRequest::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.SendRequest.payload)
}
inline std::string* SendRequest::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.SendRequest.payload)
  return _internal_mutable_payload();
}
inline const std::string& SendRequest::_internal_payload() const {
  return payload_.Get();
}
inline void SendRequest::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendRequest::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.SendRequest.payload)
}
inline void SendRequest::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.SendRequest.payload)
}
inline void SendRequest::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.SendRequest.payload)
}
inline std::string* SendRequest::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendRequest::release_payload() {
  // @@protoc_insertion_point(field_release:tunnelbroker.SendRequest.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.SendRequest.payload)
}

// repeated string blobHashes = 4;
inline int SendRequest::_internal_blobhashes_size() const {
  return blobhashes_.size();
}
inline int SendRequest::blobhashes_size() const {
  return _internal_blobhashes_size();
}
inline void SendRequest::clear_blobhashes() {
  blobhashes_.Clear();
}
inline std::string* SendRequest::add_blobhashes() {
  // @@protoc_insertion_point(field_add_mutable:tunnelbroker.SendRequest.blobHashes)
  return _internal_add_blobhashes();
}
inline const std::string& SendRequest::_internal_blobhashes(int index) const {
  return blobhashes_.Get(index);
}
inline const std::string& SendRequest::blobhashes(int index) const {
  // @@protoc_insertion_point(field_get:tunnelbroker.SendRequest.blobHashes)
  return _internal_blobhashes(index);
}
inline std::string* SendRequest::mutable_blobhashes(int index) {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.SendRequest.blobHashes)
  return blobhashes_.Mutable(index);
}
inline void SendRequest::set_blobhashes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tunnelbroker.SendRequest.blobHashes)
  blobhashes_.Mutable(index)->assign(value);
}
inline void SendRequest::set_blobhashes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tunnelbroker.SendRequest.blobHashes)
  blobhashes_.Mutable(index)->assign(std::move(value));
}
inline void SendRequest::set_blobhashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blobhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tunnelbroker.SendRequest.blobHashes)
}
inline void SendRequest::set_blobhashes(int index, const char* value, size_t size) {
  blobhashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.SendRequest.blobHashes)
}
inline std::string* SendRequest::_internal_add_blobhashes() {
  return blobhashes_.Add();
}
inline void SendRequest::add_blobhashes(const std::string& value) {
  blobhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tunnelbroker.SendRequest.blobHashes)
}
inline void SendRequest::add_blobhashes(std::string&& value) {
  blobhashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tunnelbroker.SendRequest.blobHashes)
}
inline void SendRequest::add_blobhashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blobhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tunnelbroker.SendRequest.blobHashes)
}
inline void SendRequest::add_blobhashes(const char* value, size_t size) {
  blobhashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tunnelbroker.SendRequest.blobHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SendRequest::blobhashes() const {
  // @@protoc_insertion_point(field_list:tunnelbroker.SendRequest.blobHashes)
  return blobhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SendRequest::mutable_blobhashes() {
  // @@protoc_insertion_point(field_mutable_list:tunnelbroker.SendRequest.blobHashes)
  return &blobhashes_;
}

// -------------------------------------------------------------------

// GetRequest

// string sessionID = 1;
inline void GetRequest::clear_sessionid() {
  sessionid_.ClearToEmpty();
}
inline const std::string& GetRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.GetRequest.sessionID)
  return _internal_sessionid();
}
inline void GetRequest::set_sessionid(const std::string& value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.GetRequest.sessionID)
}
inline std::string* GetRequest::mutable_sessionid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.GetRequest.sessionID)
  return _internal_mutable_sessionid();
}
inline const std::string& GetRequest::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void GetRequest::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetRequest::set_sessionid(std::string&& value) {
  
  sessionid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.GetRequest.sessionID)
}
inline void GetRequest::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.GetRequest.sessionID)
}
inline void GetRequest::set_sessionid(const char* value,
    size_t size) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.GetRequest.sessionID)
}
inline std::string* GetRequest::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetRequest::release_sessionid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.GetRequest.sessionID)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRequest::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.GetRequest.sessionID)
}

// -------------------------------------------------------------------

// GetResponse

// string fromDeviceID = 1;
inline void GetResponse::clear_fromdeviceid() {
  fromdeviceid_.ClearToEmpty();
}
inline const std::string& GetResponse::fromdeviceid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.GetResponse.fromDeviceID)
  return _internal_fromdeviceid();
}
inline void GetResponse::set_fromdeviceid(const std::string& value) {
  _internal_set_fromdeviceid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.GetResponse.fromDeviceID)
}
inline std::string* GetResponse::mutable_fromdeviceid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.GetResponse.fromDeviceID)
  return _internal_mutable_fromdeviceid();
}
inline const std::string& GetResponse::_internal_fromdeviceid() const {
  return fromdeviceid_.Get();
}
inline void GetResponse::_internal_set_fromdeviceid(const std::string& value) {
  
  fromdeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponse::set_fromdeviceid(std::string&& value) {
  
  fromdeviceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.GetResponse.fromDeviceID)
}
inline void GetResponse::set_fromdeviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fromdeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.GetResponse.fromDeviceID)
}
inline void GetResponse::set_fromdeviceid(const char* value,
    size_t size) {
  
  fromdeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.GetResponse.fromDeviceID)
}
inline std::string* GetResponse::_internal_mutable_fromdeviceid() {
  
  return fromdeviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponse::release_fromdeviceid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.GetResponse.fromDeviceID)
  return fromdeviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResponse::set_allocated_fromdeviceid(std::string* fromdeviceid) {
  if (fromdeviceid != nullptr) {
    
  } else {
    
  }
  fromdeviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromdeviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.GetResponse.fromDeviceID)
}

// bytes payload = 2;
inline void GetResponse::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& GetResponse::payload() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.GetResponse.payload)
  return _internal_payload();
}
inline void GetResponse::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.GetResponse.payload)
}
inline std::string* GetResponse::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.GetResponse.payload)
  return _internal_mutable_payload();
}
inline const std::string& GetResponse::_internal_payload() const {
  return payload_.Get();
}
inline void GetResponse::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponse::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.GetResponse.payload)
}
inline void GetResponse::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.GetResponse.payload)
}
inline void GetResponse::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.GetResponse.payload)
}
inline std::string* GetResponse::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponse::release_payload() {
  // @@protoc_insertion_point(field_release:tunnelbroker.GetResponse.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResponse::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.GetResponse.payload)
}

// repeated string blobHashes = 3;
inline int GetResponse::_internal_blobhashes_size() const {
  return blobhashes_.size();
}
inline int GetResponse::blobhashes_size() const {
  return _internal_blobhashes_size();
}
inline void GetResponse::clear_blobhashes() {
  blobhashes_.Clear();
}
inline std::string* GetResponse::add_blobhashes() {
  // @@protoc_insertion_point(field_add_mutable:tunnelbroker.GetResponse.blobHashes)
  return _internal_add_blobhashes();
}
inline const std::string& GetResponse::_internal_blobhashes(int index) const {
  return blobhashes_.Get(index);
}
inline const std::string& GetResponse::blobhashes(int index) const {
  // @@protoc_insertion_point(field_get:tunnelbroker.GetResponse.blobHashes)
  return _internal_blobhashes(index);
}
inline std::string* GetResponse::mutable_blobhashes(int index) {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.GetResponse.blobHashes)
  return blobhashes_.Mutable(index);
}
inline void GetResponse::set_blobhashes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tunnelbroker.GetResponse.blobHashes)
  blobhashes_.Mutable(index)->assign(value);
}
inline void GetResponse::set_blobhashes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tunnelbroker.GetResponse.blobHashes)
  blobhashes_.Mutable(index)->assign(std::move(value));
}
inline void GetResponse::set_blobhashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blobhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tunnelbroker.GetResponse.blobHashes)
}
inline void GetResponse::set_blobhashes(int index, const char* value, size_t size) {
  blobhashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.GetResponse.blobHashes)
}
inline std::string* GetResponse::_internal_add_blobhashes() {
  return blobhashes_.Add();
}
inline void GetResponse::add_blobhashes(const std::string& value) {
  blobhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tunnelbroker.GetResponse.blobHashes)
}
inline void GetResponse::add_blobhashes(std::string&& value) {
  blobhashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tunnelbroker.GetResponse.blobHashes)
}
inline void GetResponse::add_blobhashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blobhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tunnelbroker.GetResponse.blobHashes)
}
inline void GetResponse::add_blobhashes(const char* value, size_t size) {
  blobhashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tunnelbroker.GetResponse.blobHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetResponse::blobhashes() const {
  // @@protoc_insertion_point(field_list:tunnelbroker.GetResponse.blobHashes)
  return blobhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetResponse::mutable_blobhashes() {
  // @@protoc_insertion_point(field_mutable_list:tunnelbroker.GetResponse.blobHashes)
  return &blobhashes_;
}

// -------------------------------------------------------------------

// OutboundMessage

// string toDeviceID = 1;
inline void OutboundMessage::clear_todeviceid() {
  todeviceid_.ClearToEmpty();
}
inline const std::string& OutboundMessage::todeviceid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.OutboundMessage.toDeviceID)
  return _internal_todeviceid();
}
inline void OutboundMessage::set_todeviceid(const std::string& value) {
  _internal_set_todeviceid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.OutboundMessage.toDeviceID)
}
inline std::string* OutboundMessage::mutable_todeviceid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.OutboundMessage.toDeviceID)
  return _internal_mutable_todeviceid();
}
inline const std::string& OutboundMessage::_internal_todeviceid() const {
  return todeviceid_.Get();
}
inline void OutboundMessage::_internal_set_todeviceid(const std::string& value) {
  
  todeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OutboundMessage::set_todeviceid(std::string&& value) {
  
  todeviceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.OutboundMessage.toDeviceID)
}
inline void OutboundMessage::set_todeviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  todeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.OutboundMessage.toDeviceID)
}
inline void OutboundMessage::set_todeviceid(const char* value,
    size_t size) {
  
  todeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.OutboundMessage.toDeviceID)
}
inline std::string* OutboundMessage::_internal_mutable_todeviceid() {
  
  return todeviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OutboundMessage::release_todeviceid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.OutboundMessage.toDeviceID)
  return todeviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutboundMessage::set_allocated_todeviceid(std::string* todeviceid) {
  if (todeviceid != nullptr) {
    
  } else {
    
  }
  todeviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), todeviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.OutboundMessage.toDeviceID)
}

// string payload = 2;
inline void OutboundMessage::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& OutboundMessage::payload() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.OutboundMessage.payload)
  return _internal_payload();
}
inline void OutboundMessage::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.OutboundMessage.payload)
}
inline std::string* OutboundMessage::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.OutboundMessage.payload)
  return _internal_mutable_payload();
}
inline const std::string& OutboundMessage::_internal_payload() const {
  return payload_.Get();
}
inline void OutboundMessage::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OutboundMessage::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.OutboundMessage.payload)
}
inline void OutboundMessage::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.OutboundMessage.payload)
}
inline void OutboundMessage::set_payload(const char* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.OutboundMessage.payload)
}
inline std::string* OutboundMessage::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OutboundMessage::release_payload() {
  // @@protoc_insertion_point(field_release:tunnelbroker.OutboundMessage.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutboundMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.OutboundMessage.payload)
}

// repeated string blobHashes = 3;
inline int OutboundMessage::_internal_blobhashes_size() const {
  return blobhashes_.size();
}
inline int OutboundMessage::blobhashes_size() const {
  return _internal_blobhashes_size();
}
inline void OutboundMessage::clear_blobhashes() {
  blobhashes_.Clear();
}
inline std::string* OutboundMessage::add_blobhashes() {
  // @@protoc_insertion_point(field_add_mutable:tunnelbroker.OutboundMessage.blobHashes)
  return _internal_add_blobhashes();
}
inline const std::string& OutboundMessage::_internal_blobhashes(int index) const {
  return blobhashes_.Get(index);
}
inline const std::string& OutboundMessage::blobhashes(int index) const {
  // @@protoc_insertion_point(field_get:tunnelbroker.OutboundMessage.blobHashes)
  return _internal_blobhashes(index);
}
inline std::string* OutboundMessage::mutable_blobhashes(int index) {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.OutboundMessage.blobHashes)
  return blobhashes_.Mutable(index);
}
inline void OutboundMessage::set_blobhashes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tunnelbroker.OutboundMessage.blobHashes)
  blobhashes_.Mutable(index)->assign(value);
}
inline void OutboundMessage::set_blobhashes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tunnelbroker.OutboundMessage.blobHashes)
  blobhashes_.Mutable(index)->assign(std::move(value));
}
inline void OutboundMessage::set_blobhashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blobhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tunnelbroker.OutboundMessage.blobHashes)
}
inline void OutboundMessage::set_blobhashes(int index, const char* value, size_t size) {
  blobhashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.OutboundMessage.blobHashes)
}
inline std::string* OutboundMessage::_internal_add_blobhashes() {
  return blobhashes_.Add();
}
inline void OutboundMessage::add_blobhashes(const std::string& value) {
  blobhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tunnelbroker.OutboundMessage.blobHashes)
}
inline void OutboundMessage::add_blobhashes(std::string&& value) {
  blobhashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tunnelbroker.OutboundMessage.blobHashes)
}
inline void OutboundMessage::add_blobhashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blobhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tunnelbroker.OutboundMessage.blobHashes)
}
inline void OutboundMessage::add_blobhashes(const char* value, size_t size) {
  blobhashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tunnelbroker.OutboundMessage.blobHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OutboundMessage::blobhashes() const {
  // @@protoc_insertion_point(field_list:tunnelbroker.OutboundMessage.blobHashes)
  return blobhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OutboundMessage::mutable_blobhashes() {
  // @@protoc_insertion_point(field_mutable_list:tunnelbroker.OutboundMessage.blobHashes)
  return &blobhashes_;
}

// -------------------------------------------------------------------

// InboundMessage

// string fromDeviceID = 1;
inline void InboundMessage::clear_fromdeviceid() {
  fromdeviceid_.ClearToEmpty();
}
inline const std::string& InboundMessage::fromdeviceid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.InboundMessage.fromDeviceID)
  return _internal_fromdeviceid();
}
inline void InboundMessage::set_fromdeviceid(const std::string& value) {
  _internal_set_fromdeviceid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.InboundMessage.fromDeviceID)
}
inline std::string* InboundMessage::mutable_fromdeviceid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.InboundMessage.fromDeviceID)
  return _internal_mutable_fromdeviceid();
}
inline const std::string& InboundMessage::_internal_fromdeviceid() const {
  return fromdeviceid_.Get();
}
inline void InboundMessage::_internal_set_fromdeviceid(const std::string& value) {
  
  fromdeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InboundMessage::set_fromdeviceid(std::string&& value) {
  
  fromdeviceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.InboundMessage.fromDeviceID)
}
inline void InboundMessage::set_fromdeviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fromdeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.InboundMessage.fromDeviceID)
}
inline void InboundMessage::set_fromdeviceid(const char* value,
    size_t size) {
  
  fromdeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.InboundMessage.fromDeviceID)
}
inline std::string* InboundMessage::_internal_mutable_fromdeviceid() {
  
  return fromdeviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InboundMessage::release_fromdeviceid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.InboundMessage.fromDeviceID)
  return fromdeviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InboundMessage::set_allocated_fromdeviceid(std::string* fromdeviceid) {
  if (fromdeviceid != nullptr) {
    
  } else {
    
  }
  fromdeviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromdeviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.InboundMessage.fromDeviceID)
}

// string fromConnectionID = 2;
inline void InboundMessage::clear_fromconnectionid() {
  fromconnectionid_.ClearToEmpty();
}
inline const std::string& InboundMessage::fromconnectionid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.InboundMessage.fromConnectionID)
  return _internal_fromconnectionid();
}
inline void InboundMessage::set_fromconnectionid(const std::string& value) {
  _internal_set_fromconnectionid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.InboundMessage.fromConnectionID)
}
inline std::string* InboundMessage::mutable_fromconnectionid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.InboundMessage.fromConnectionID)
  return _internal_mutable_fromconnectionid();
}
inline const std::string& InboundMessage::_internal_fromconnectionid() const {
  return fromconnectionid_.Get();
}
inline void InboundMessage::_internal_set_fromconnectionid(const std::string& value) {
  
  fromconnectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InboundMessage::set_fromconnectionid(std::string&& value) {
  
  fromconnectionid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.InboundMessage.fromConnectionID)
}
inline void InboundMessage::set_fromconnectionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fromconnectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.InboundMessage.fromConnectionID)
}
inline void InboundMessage::set_fromconnectionid(const char* value,
    size_t size) {
  
  fromconnectionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.InboundMessage.fromConnectionID)
}
inline std::string* InboundMessage::_internal_mutable_fromconnectionid() {
  
  return fromconnectionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InboundMessage::release_fromconnectionid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.InboundMessage.fromConnectionID)
  return fromconnectionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InboundMessage::set_allocated_fromconnectionid(std::string* fromconnectionid) {
  if (fromconnectionid != nullptr) {
    
  } else {
    
  }
  fromconnectionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromconnectionid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.InboundMessage.fromConnectionID)
}

// string payload = 3;
inline void InboundMessage::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& InboundMessage::payload() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.InboundMessage.payload)
  return _internal_payload();
}
inline void InboundMessage::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.InboundMessage.payload)
}
inline std::string* InboundMessage::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.InboundMessage.payload)
  return _internal_mutable_payload();
}
inline const std::string& InboundMessage::_internal_payload() const {
  return payload_.Get();
}
inline void InboundMessage::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InboundMessage::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.InboundMessage.payload)
}
inline void InboundMessage::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.InboundMessage.payload)
}
inline void InboundMessage::set_payload(const char* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.InboundMessage.payload)
}
inline std::string* InboundMessage::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InboundMessage::release_payload() {
  // @@protoc_insertion_point(field_release:tunnelbroker.InboundMessage.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InboundMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.InboundMessage.payload)
}

// repeated string blobHashes = 4;
inline int InboundMessage::_internal_blobhashes_size() const {
  return blobhashes_.size();
}
inline int InboundMessage::blobhashes_size() const {
  return _internal_blobhashes_size();
}
inline void InboundMessage::clear_blobhashes() {
  blobhashes_.Clear();
}
inline std::string* InboundMessage::add_blobhashes() {
  // @@protoc_insertion_point(field_add_mutable:tunnelbroker.InboundMessage.blobHashes)
  return _internal_add_blobhashes();
}
inline const std::string& InboundMessage::_internal_blobhashes(int index) const {
  return blobhashes_.Get(index);
}
inline const std::string& InboundMessage::blobhashes(int index) const {
  // @@protoc_insertion_point(field_get:tunnelbroker.InboundMessage.blobHashes)
  return _internal_blobhashes(index);
}
inline std::string* InboundMessage::mutable_blobhashes(int index) {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.InboundMessage.blobHashes)
  return blobhashes_.Mutable(index);
}
inline void InboundMessage::set_blobhashes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tunnelbroker.InboundMessage.blobHashes)
  blobhashes_.Mutable(index)->assign(value);
}
inline void InboundMessage::set_blobhashes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tunnelbroker.InboundMessage.blobHashes)
  blobhashes_.Mutable(index)->assign(std::move(value));
}
inline void InboundMessage::set_blobhashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blobhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tunnelbroker.InboundMessage.blobHashes)
}
inline void InboundMessage::set_blobhashes(int index, const char* value, size_t size) {
  blobhashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.InboundMessage.blobHashes)
}
inline std::string* InboundMessage::_internal_add_blobhashes() {
  return blobhashes_.Add();
}
inline void InboundMessage::add_blobhashes(const std::string& value) {
  blobhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tunnelbroker.InboundMessage.blobHashes)
}
inline void InboundMessage::add_blobhashes(std::string&& value) {
  blobhashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tunnelbroker.InboundMessage.blobHashes)
}
inline void InboundMessage::add_blobhashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blobhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tunnelbroker.InboundMessage.blobHashes)
}
inline void InboundMessage::add_blobhashes(const char* value, size_t size) {
  blobhashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tunnelbroker.InboundMessage.blobHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InboundMessage::blobhashes() const {
  // @@protoc_insertion_point(field_list:tunnelbroker.InboundMessage.blobHashes)
  return blobhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InboundMessage::mutable_blobhashes() {
  // @@protoc_insertion_point(field_mutable_list:tunnelbroker.InboundMessage.blobHashes)
  return &blobhashes_;
}

// -------------------------------------------------------------------

// CheckRequest

// string userId = 1;
inline void CheckRequest::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& CheckRequest::userid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.CheckRequest.userId)
  return _internal_userid();
}
inline void CheckRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.CheckRequest.userId)
}
inline std::string* CheckRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.CheckRequest.userId)
  return _internal_mutable_userid();
}
inline const std::string& CheckRequest::_internal_userid() const {
  return userid_.Get();
}
inline void CheckRequest::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckRequest::set_userid(std::string&& value) {
  
  userid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.CheckRequest.userId)
}
inline void CheckRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.CheckRequest.userId)
}
inline void CheckRequest::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.CheckRequest.userId)
}
inline std::string* CheckRequest::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckRequest::release_userid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.CheckRequest.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.CheckRequest.userId)
}

// string deviceToken = 2;
inline void CheckRequest::clear_devicetoken() {
  devicetoken_.ClearToEmpty();
}
inline const std::string& CheckRequest::devicetoken() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.CheckRequest.deviceToken)
  return _internal_devicetoken();
}
inline void CheckRequest::set_devicetoken(const std::string& value) {
  _internal_set_devicetoken(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.CheckRequest.deviceToken)
}
inline std::string* CheckRequest::mutable_devicetoken() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.CheckRequest.deviceToken)
  return _internal_mutable_devicetoken();
}
inline const std::string& CheckRequest::_internal_devicetoken() const {
  return devicetoken_.Get();
}
inline void CheckRequest::_internal_set_devicetoken(const std::string& value) {
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckRequest::set_devicetoken(std::string&& value) {
  
  devicetoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.CheckRequest.deviceToken)
}
inline void CheckRequest::set_devicetoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.CheckRequest.deviceToken)
}
inline void CheckRequest::set_devicetoken(const char* value,
    size_t size) {
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.CheckRequest.deviceToken)
}
inline std::string* CheckRequest::_internal_mutable_devicetoken() {
  
  return devicetoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckRequest::release_devicetoken() {
  // @@protoc_insertion_point(field_release:tunnelbroker.CheckRequest.deviceToken)
  return devicetoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckRequest::set_allocated_devicetoken(std::string* devicetoken) {
  if (devicetoken != nullptr) {
    
  } else {
    
  }
  devicetoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicetoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.CheckRequest.deviceToken)
}

// -------------------------------------------------------------------

// CheckResponse

// .tunnelbroker.CheckResponseType checkResponseType = 1;
inline void CheckResponse::clear_checkresponsetype() {
  checkresponsetype_ = 0;
}
inline ::tunnelbroker::CheckResponseType CheckResponse::_internal_checkresponsetype() const {
  return static_cast< ::tunnelbroker::CheckResponseType >(checkresponsetype_);
}
inline ::tunnelbroker::CheckResponseType CheckResponse::checkresponsetype() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.CheckResponse.checkResponseType)
  return _internal_checkresponsetype();
}
inline void CheckResponse::_internal_set_checkresponsetype(::tunnelbroker::CheckResponseType value) {
  
  checkresponsetype_ = value;
}
inline void CheckResponse::set_checkresponsetype(::tunnelbroker::CheckResponseType value) {
  _internal_set_checkresponsetype(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.CheckResponse.checkResponseType)
}

// -------------------------------------------------------------------

// NewPrimaryRequest

// string userId = 1;
inline void NewPrimaryRequest::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& NewPrimaryRequest::userid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.NewPrimaryRequest.userId)
  return _internal_userid();
}
inline void NewPrimaryRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.NewPrimaryRequest.userId)
}
inline std::string* NewPrimaryRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.NewPrimaryRequest.userId)
  return _internal_mutable_userid();
}
inline const std::string& NewPrimaryRequest::_internal_userid() const {
  return userid_.Get();
}
inline void NewPrimaryRequest::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewPrimaryRequest::set_userid(std::string&& value) {
  
  userid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.NewPrimaryRequest.userId)
}
inline void NewPrimaryRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.NewPrimaryRequest.userId)
}
inline void NewPrimaryRequest::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.NewPrimaryRequest.userId)
}
inline std::string* NewPrimaryRequest::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewPrimaryRequest::release_userid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.NewPrimaryRequest.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewPrimaryRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.NewPrimaryRequest.userId)
}

// string deviceToken = 2;
inline void NewPrimaryRequest::clear_devicetoken() {
  devicetoken_.ClearToEmpty();
}
inline const std::string& NewPrimaryRequest::devicetoken() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.NewPrimaryRequest.deviceToken)
  return _internal_devicetoken();
}
inline void NewPrimaryRequest::set_devicetoken(const std::string& value) {
  _internal_set_devicetoken(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.NewPrimaryRequest.deviceToken)
}
inline std::string* NewPrimaryRequest::mutable_devicetoken() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.NewPrimaryRequest.deviceToken)
  return _internal_mutable_devicetoken();
}
inline const std::string& NewPrimaryRequest::_internal_devicetoken() const {
  return devicetoken_.Get();
}
inline void NewPrimaryRequest::_internal_set_devicetoken(const std::string& value) {
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewPrimaryRequest::set_devicetoken(std::string&& value) {
  
  devicetoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.NewPrimaryRequest.deviceToken)
}
inline void NewPrimaryRequest::set_devicetoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.NewPrimaryRequest.deviceToken)
}
inline void NewPrimaryRequest::set_devicetoken(const char* value,
    size_t size) {
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.NewPrimaryRequest.deviceToken)
}
inline std::string* NewPrimaryRequest::_internal_mutable_devicetoken() {
  
  return devicetoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewPrimaryRequest::release_devicetoken() {
  // @@protoc_insertion_point(field_release:tunnelbroker.NewPrimaryRequest.deviceToken)
  return devicetoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewPrimaryRequest::set_allocated_devicetoken(std::string* devicetoken) {
  if (devicetoken != nullptr) {
    
  } else {
    
  }
  devicetoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicetoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.NewPrimaryRequest.deviceToken)
}

// -------------------------------------------------------------------

// NewPrimaryResponse

// bool success = 1;
inline void NewPrimaryResponse::clear_success() {
  success_ = false;
}
inline bool NewPrimaryResponse::_internal_success() const {
  return success_;
}
inline bool NewPrimaryResponse::success() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.NewPrimaryResponse.success)
  return _internal_success();
}
inline void NewPrimaryResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void NewPrimaryResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.NewPrimaryResponse.success)
}

// -------------------------------------------------------------------

// PongRequest

// string userId = 1;
inline void PongRequest::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& PongRequest::userid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.PongRequest.userId)
  return _internal_userid();
}
inline void PongRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.PongRequest.userId)
}
inline std::string* PongRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.PongRequest.userId)
  return _internal_mutable_userid();
}
inline const std::string& PongRequest::_internal_userid() const {
  return userid_.Get();
}
inline void PongRequest::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PongRequest::set_userid(std::string&& value) {
  
  userid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.PongRequest.userId)
}
inline void PongRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.PongRequest.userId)
}
inline void PongRequest::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.PongRequest.userId)
}
inline std::string* PongRequest::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PongRequest::release_userid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.PongRequest.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PongRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.PongRequest.userId)
}

// string deviceToken = 2;
inline void PongRequest::clear_devicetoken() {
  devicetoken_.ClearToEmpty();
}
inline const std::string& PongRequest::devicetoken() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.PongRequest.deviceToken)
  return _internal_devicetoken();
}
inline void PongRequest::set_devicetoken(const std::string& value) {
  _internal_set_devicetoken(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.PongRequest.deviceToken)
}
inline std::string* PongRequest::mutable_devicetoken() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.PongRequest.deviceToken)
  return _internal_mutable_devicetoken();
}
inline const std::string& PongRequest::_internal_devicetoken() const {
  return devicetoken_.Get();
}
inline void PongRequest::_internal_set_devicetoken(const std::string& value) {
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PongRequest::set_devicetoken(std::string&& value) {
  
  devicetoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.PongRequest.deviceToken)
}
inline void PongRequest::set_devicetoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.PongRequest.deviceToken)
}
inline void PongRequest::set_devicetoken(const char* value,
    size_t size) {
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.PongRequest.deviceToken)
}
inline std::string* PongRequest::_internal_mutable_devicetoken() {
  
  return devicetoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PongRequest::release_devicetoken() {
  // @@protoc_insertion_point(field_release:tunnelbroker.PongRequest.deviceToken)
  return devicetoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PongRequest::set_allocated_devicetoken(std::string* devicetoken) {
  if (devicetoken != nullptr) {
    
  } else {
    
  }
  devicetoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicetoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.PongRequest.deviceToken)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tunnelbroker

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tunnelbroker::NewSessionRequest_DeviceTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tunnelbroker::NewSessionRequest_DeviceTypes>() {
  return ::tunnelbroker::NewSessionRequest_DeviceTypes_descriptor();
}
template <> struct is_proto_enum< ::tunnelbroker::CheckResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tunnelbroker::CheckResponseType>() {
  return ::tunnelbroker::CheckResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tunnelbroker_2eproto
