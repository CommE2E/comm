// @generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backup.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_backup_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_backup_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_backup_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_backup_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backup_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_backup_2eproto_metadata_getter(int index);
namespace backup {
class CreateNewBackupRequest;
struct CreateNewBackupRequestDefaultTypeInternal;
extern CreateNewBackupRequestDefaultTypeInternal _CreateNewBackupRequest_default_instance_;
class CreateNewBackupResponse;
struct CreateNewBackupResponseDefaultTypeInternal;
extern CreateNewBackupResponseDefaultTypeInternal _CreateNewBackupResponse_default_instance_;
class PullBackupRequest;
struct PullBackupRequestDefaultTypeInternal;
extern PullBackupRequestDefaultTypeInternal _PullBackupRequest_default_instance_;
class PullBackupResponse;
struct PullBackupResponseDefaultTypeInternal;
extern PullBackupResponseDefaultTypeInternal _PullBackupResponse_default_instance_;
class RecoverBackupKeyRequest;
struct RecoverBackupKeyRequestDefaultTypeInternal;
extern RecoverBackupKeyRequestDefaultTypeInternal _RecoverBackupKeyRequest_default_instance_;
class RecoverBackupKeyResponse;
struct RecoverBackupKeyResponseDefaultTypeInternal;
extern RecoverBackupKeyResponseDefaultTypeInternal _RecoverBackupKeyResponse_default_instance_;
class SendLogRequest;
struct SendLogRequestDefaultTypeInternal;
extern SendLogRequestDefaultTypeInternal _SendLogRequest_default_instance_;
}  // namespace backup
PROTOBUF_NAMESPACE_OPEN
template<> ::backup::CreateNewBackupRequest* Arena::CreateMaybeMessage<::backup::CreateNewBackupRequest>(Arena*);
template<> ::backup::CreateNewBackupResponse* Arena::CreateMaybeMessage<::backup::CreateNewBackupResponse>(Arena*);
template<> ::backup::PullBackupRequest* Arena::CreateMaybeMessage<::backup::PullBackupRequest>(Arena*);
template<> ::backup::PullBackupResponse* Arena::CreateMaybeMessage<::backup::PullBackupResponse>(Arena*);
template<> ::backup::RecoverBackupKeyRequest* Arena::CreateMaybeMessage<::backup::RecoverBackupKeyRequest>(Arena*);
template<> ::backup::RecoverBackupKeyResponse* Arena::CreateMaybeMessage<::backup::RecoverBackupKeyResponse>(Arena*);
template<> ::backup::SendLogRequest* Arena::CreateMaybeMessage<::backup::SendLogRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace backup {

// ===================================================================

class CreateNewBackupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.CreateNewBackupRequest) */ {
 public:
  inline CreateNewBackupRequest() : CreateNewBackupRequest(nullptr) {}
  virtual ~CreateNewBackupRequest();
  explicit constexpr CreateNewBackupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNewBackupRequest(const CreateNewBackupRequest& from);
  CreateNewBackupRequest(CreateNewBackupRequest&& from) noexcept
    : CreateNewBackupRequest() {
    *this = ::std::move(from);
  }

  inline CreateNewBackupRequest& operator=(const CreateNewBackupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNewBackupRequest& operator=(CreateNewBackupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateNewBackupRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kUserID = 1,
    kKeyEntropy = 2,
    kNewCompactionHash = 3,
    kNewCompactionChunk = 4,
    DATA_NOT_SET = 0,
  };

  static inline const CreateNewBackupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNewBackupRequest*>(
               &_CreateNewBackupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateNewBackupRequest& a, CreateNewBackupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNewBackupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNewBackupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateNewBackupRequest* New() const final {
    return CreateMaybeMessage<CreateNewBackupRequest>(nullptr);
  }

  CreateNewBackupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateNewBackupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateNewBackupRequest& from);
  void MergeFrom(const CreateNewBackupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNewBackupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.CreateNewBackupRequest";
  }
  protected:
  explicit CreateNewBackupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backup_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
    kKeyEntropyFieldNumber = 2,
    kNewCompactionHashFieldNumber = 3,
    kNewCompactionChunkFieldNumber = 4,
  };
  // string userID = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // bytes keyEntropy = 2;
  bool has_keyentropy() const;
  private:
  bool _internal_has_keyentropy() const;
  public:
  void clear_keyentropy();
  const std::string& keyentropy() const;
  void set_keyentropy(const std::string& value);
  void set_keyentropy(std::string&& value);
  void set_keyentropy(const char* value);
  void set_keyentropy(const void* value, size_t size);
  std::string* mutable_keyentropy();
  std::string* release_keyentropy();
  void set_allocated_keyentropy(std::string* keyentropy);
  private:
  const std::string& _internal_keyentropy() const;
  void _internal_set_keyentropy(const std::string& value);
  std::string* _internal_mutable_keyentropy();
  public:

  // bytes newCompactionHash = 3;
  bool has_newcompactionhash() const;
  private:
  bool _internal_has_newcompactionhash() const;
  public:
  void clear_newcompactionhash();
  const std::string& newcompactionhash() const;
  void set_newcompactionhash(const std::string& value);
  void set_newcompactionhash(std::string&& value);
  void set_newcompactionhash(const char* value);
  void set_newcompactionhash(const void* value, size_t size);
  std::string* mutable_newcompactionhash();
  std::string* release_newcompactionhash();
  void set_allocated_newcompactionhash(std::string* newcompactionhash);
  private:
  const std::string& _internal_newcompactionhash() const;
  void _internal_set_newcompactionhash(const std::string& value);
  std::string* _internal_mutable_newcompactionhash();
  public:

  // bytes newCompactionChunk = 4;
  bool has_newcompactionchunk() const;
  private:
  bool _internal_has_newcompactionchunk() const;
  public:
  void clear_newcompactionchunk();
  const std::string& newcompactionchunk() const;
  void set_newcompactionchunk(const std::string& value);
  void set_newcompactionchunk(std::string&& value);
  void set_newcompactionchunk(const char* value);
  void set_newcompactionchunk(const void* value, size_t size);
  std::string* mutable_newcompactionchunk();
  std::string* release_newcompactionchunk();
  void set_allocated_newcompactionchunk(std::string* newcompactionchunk);
  private:
  const std::string& _internal_newcompactionchunk() const;
  void _internal_set_newcompactionchunk(const std::string& value);
  std::string* _internal_mutable_newcompactionchunk();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:backup.CreateNewBackupRequest)
 private:
  class _Internal;
  void set_has_userid();
  void set_has_keyentropy();
  void set_has_newcompactionhash();
  void set_has_newcompactionchunk();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyentropy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newcompactionhash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newcompactionchunk_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class CreateNewBackupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.CreateNewBackupResponse) */ {
 public:
  inline CreateNewBackupResponse() : CreateNewBackupResponse(nullptr) {}
  virtual ~CreateNewBackupResponse();
  explicit constexpr CreateNewBackupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNewBackupResponse(const CreateNewBackupResponse& from);
  CreateNewBackupResponse(CreateNewBackupResponse&& from) noexcept
    : CreateNewBackupResponse() {
    *this = ::std::move(from);
  }

  inline CreateNewBackupResponse& operator=(const CreateNewBackupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNewBackupResponse& operator=(CreateNewBackupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateNewBackupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNewBackupResponse* internal_default_instance() {
    return reinterpret_cast<const CreateNewBackupResponse*>(
               &_CreateNewBackupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateNewBackupResponse& a, CreateNewBackupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNewBackupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNewBackupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateNewBackupResponse* New() const final {
    return CreateMaybeMessage<CreateNewBackupResponse>(nullptr);
  }

  CreateNewBackupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateNewBackupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateNewBackupResponse& from);
  void MergeFrom(const CreateNewBackupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNewBackupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.CreateNewBackupResponse";
  }
  protected:
  explicit CreateNewBackupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backup_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackupIDFieldNumber = 1,
  };
  // string backupID = 1;
  void clear_backupid();
  const std::string& backupid() const;
  void set_backupid(const std::string& value);
  void set_backupid(std::string&& value);
  void set_backupid(const char* value);
  void set_backupid(const char* value, size_t size);
  std::string* mutable_backupid();
  std::string* release_backupid();
  void set_allocated_backupid(std::string* backupid);
  private:
  const std::string& _internal_backupid() const;
  void _internal_set_backupid(const std::string& value);
  std::string* _internal_mutable_backupid();
  public:

  // @@protoc_insertion_point(class_scope:backup.CreateNewBackupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class SendLogRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.SendLogRequest) */ {
 public:
  inline SendLogRequest() : SendLogRequest(nullptr) {}
  virtual ~SendLogRequest();
  explicit constexpr SendLogRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendLogRequest(const SendLogRequest& from);
  SendLogRequest(SendLogRequest&& from) noexcept
    : SendLogRequest() {
    *this = ::std::move(from);
  }

  inline SendLogRequest& operator=(const SendLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendLogRequest& operator=(SendLogRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendLogRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kUserID = 1,
    kBackupID = 2,
    kLogHash = 3,
    kLogData = 4,
    DATA_NOT_SET = 0,
  };

  static inline const SendLogRequest* internal_default_instance() {
    return reinterpret_cast<const SendLogRequest*>(
               &_SendLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SendLogRequest& a, SendLogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendLogRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendLogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendLogRequest* New() const final {
    return CreateMaybeMessage<SendLogRequest>(nullptr);
  }

  SendLogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendLogRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendLogRequest& from);
  void MergeFrom(const SendLogRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendLogRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.SendLogRequest";
  }
  protected:
  explicit SendLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backup_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
    kBackupIDFieldNumber = 2,
    kLogHashFieldNumber = 3,
    kLogDataFieldNumber = 4,
  };
  // string userID = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string backupID = 2;
  bool has_backupid() const;
  private:
  bool _internal_has_backupid() const;
  public:
  void clear_backupid();
  const std::string& backupid() const;
  void set_backupid(const std::string& value);
  void set_backupid(std::string&& value);
  void set_backupid(const char* value);
  void set_backupid(const char* value, size_t size);
  std::string* mutable_backupid();
  std::string* release_backupid();
  void set_allocated_backupid(std::string* backupid);
  private:
  const std::string& _internal_backupid() const;
  void _internal_set_backupid(const std::string& value);
  std::string* _internal_mutable_backupid();
  public:

  // bytes logHash = 3;
  bool has_loghash() const;
  private:
  bool _internal_has_loghash() const;
  public:
  void clear_loghash();
  const std::string& loghash() const;
  void set_loghash(const std::string& value);
  void set_loghash(std::string&& value);
  void set_loghash(const char* value);
  void set_loghash(const void* value, size_t size);
  std::string* mutable_loghash();
  std::string* release_loghash();
  void set_allocated_loghash(std::string* loghash);
  private:
  const std::string& _internal_loghash() const;
  void _internal_set_loghash(const std::string& value);
  std::string* _internal_mutable_loghash();
  public:

  // bytes logData = 4;
  bool has_logdata() const;
  private:
  bool _internal_has_logdata() const;
  public:
  void clear_logdata();
  const std::string& logdata() const;
  void set_logdata(const std::string& value);
  void set_logdata(std::string&& value);
  void set_logdata(const char* value);
  void set_logdata(const void* value, size_t size);
  std::string* mutable_logdata();
  std::string* release_logdata();
  void set_allocated_logdata(std::string* logdata);
  private:
  const std::string& _internal_logdata() const;
  void _internal_set_logdata(const std::string& value);
  std::string* _internal_mutable_logdata();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:backup.SendLogRequest)
 private:
  class _Internal;
  void set_has_userid();
  void set_has_backupid();
  void set_has_loghash();
  void set_has_logdata();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backupid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loghash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logdata_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class RecoverBackupKeyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.RecoverBackupKeyRequest) */ {
 public:
  inline RecoverBackupKeyRequest() : RecoverBackupKeyRequest(nullptr) {}
  virtual ~RecoverBackupKeyRequest();
  explicit constexpr RecoverBackupKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecoverBackupKeyRequest(const RecoverBackupKeyRequest& from);
  RecoverBackupKeyRequest(RecoverBackupKeyRequest&& from) noexcept
    : RecoverBackupKeyRequest() {
    *this = ::std::move(from);
  }

  inline RecoverBackupKeyRequest& operator=(const RecoverBackupKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecoverBackupKeyRequest& operator=(RecoverBackupKeyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecoverBackupKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecoverBackupKeyRequest* internal_default_instance() {
    return reinterpret_cast<const RecoverBackupKeyRequest*>(
               &_RecoverBackupKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RecoverBackupKeyRequest& a, RecoverBackupKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RecoverBackupKeyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecoverBackupKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecoverBackupKeyRequest* New() const final {
    return CreateMaybeMessage<RecoverBackupKeyRequest>(nullptr);
  }

  RecoverBackupKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecoverBackupKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecoverBackupKeyRequest& from);
  void MergeFrom(const RecoverBackupKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecoverBackupKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.RecoverBackupKeyRequest";
  }
  protected:
  explicit RecoverBackupKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backup_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
  };
  // string userID = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // @@protoc_insertion_point(class_scope:backup.RecoverBackupKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class RecoverBackupKeyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.RecoverBackupKeyResponse) */ {
 public:
  inline RecoverBackupKeyResponse() : RecoverBackupKeyResponse(nullptr) {}
  virtual ~RecoverBackupKeyResponse();
  explicit constexpr RecoverBackupKeyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecoverBackupKeyResponse(const RecoverBackupKeyResponse& from);
  RecoverBackupKeyResponse(RecoverBackupKeyResponse&& from) noexcept
    : RecoverBackupKeyResponse() {
    *this = ::std::move(from);
  }

  inline RecoverBackupKeyResponse& operator=(const RecoverBackupKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecoverBackupKeyResponse& operator=(RecoverBackupKeyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecoverBackupKeyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecoverBackupKeyResponse* internal_default_instance() {
    return reinterpret_cast<const RecoverBackupKeyResponse*>(
               &_RecoverBackupKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RecoverBackupKeyResponse& a, RecoverBackupKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RecoverBackupKeyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecoverBackupKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecoverBackupKeyResponse* New() const final {
    return CreateMaybeMessage<RecoverBackupKeyResponse>(nullptr);
  }

  RecoverBackupKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecoverBackupKeyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecoverBackupKeyResponse& from);
  void MergeFrom(const RecoverBackupKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecoverBackupKeyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.RecoverBackupKeyResponse";
  }
  protected:
  explicit RecoverBackupKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backup_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackupIDFieldNumber = 4,
  };
  // string backupID = 4;
  void clear_backupid();
  const std::string& backupid() const;
  void set_backupid(const std::string& value);
  void set_backupid(std::string&& value);
  void set_backupid(const char* value);
  void set_backupid(const char* value, size_t size);
  std::string* mutable_backupid();
  std::string* release_backupid();
  void set_allocated_backupid(std::string* backupid);
  private:
  const std::string& _internal_backupid() const;
  void _internal_set_backupid(const std::string& value);
  std::string* _internal_mutable_backupid();
  public:

  // @@protoc_insertion_point(class_scope:backup.RecoverBackupKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class PullBackupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.PullBackupRequest) */ {
 public:
  inline PullBackupRequest() : PullBackupRequest(nullptr) {}
  virtual ~PullBackupRequest();
  explicit constexpr PullBackupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullBackupRequest(const PullBackupRequest& from);
  PullBackupRequest(PullBackupRequest&& from) noexcept
    : PullBackupRequest() {
    *this = ::std::move(from);
  }

  inline PullBackupRequest& operator=(const PullBackupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullBackupRequest& operator=(PullBackupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullBackupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullBackupRequest* internal_default_instance() {
    return reinterpret_cast<const PullBackupRequest*>(
               &_PullBackupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PullBackupRequest& a, PullBackupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullBackupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullBackupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullBackupRequest* New() const final {
    return CreateMaybeMessage<PullBackupRequest>(nullptr);
  }

  PullBackupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullBackupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullBackupRequest& from);
  void MergeFrom(const PullBackupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullBackupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.PullBackupRequest";
  }
  protected:
  explicit PullBackupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backup_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
    kBackupIDFieldNumber = 2,
  };
  // string userID = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string backupID = 2;
  void clear_backupid();
  const std::string& backupid() const;
  void set_backupid(const std::string& value);
  void set_backupid(std::string&& value);
  void set_backupid(const char* value);
  void set_backupid(const char* value, size_t size);
  std::string* mutable_backupid();
  std::string* release_backupid();
  void set_allocated_backupid(std::string* backupid);
  private:
  const std::string& _internal_backupid() const;
  void _internal_set_backupid(const std::string& value);
  std::string* _internal_mutable_backupid();
  public:

  // @@protoc_insertion_point(class_scope:backup.PullBackupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class PullBackupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.PullBackupResponse) */ {
 public:
  inline PullBackupResponse() : PullBackupResponse(nullptr) {}
  virtual ~PullBackupResponse();
  explicit constexpr PullBackupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullBackupResponse(const PullBackupResponse& from);
  PullBackupResponse(PullBackupResponse&& from) noexcept
    : PullBackupResponse() {
    *this = ::std::move(from);
  }

  inline PullBackupResponse& operator=(const PullBackupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullBackupResponse& operator=(PullBackupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullBackupResponse& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kCompactionChunk = 1,
    kLogChunk = 2,
    DATA_NOT_SET = 0,
  };

  static inline const PullBackupResponse* internal_default_instance() {
    return reinterpret_cast<const PullBackupResponse*>(
               &_PullBackupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PullBackupResponse& a, PullBackupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PullBackupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullBackupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullBackupResponse* New() const final {
    return CreateMaybeMessage<PullBackupResponse>(nullptr);
  }

  PullBackupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullBackupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullBackupResponse& from);
  void MergeFrom(const PullBackupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullBackupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.PullBackupResponse";
  }
  protected:
  explicit PullBackupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backup_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompactionChunkFieldNumber = 1,
    kLogChunkFieldNumber = 2,
  };
  // bytes compactionChunk = 1;
  bool has_compactionchunk() const;
  private:
  bool _internal_has_compactionchunk() const;
  public:
  void clear_compactionchunk();
  const std::string& compactionchunk() const;
  void set_compactionchunk(const std::string& value);
  void set_compactionchunk(std::string&& value);
  void set_compactionchunk(const char* value);
  void set_compactionchunk(const void* value, size_t size);
  std::string* mutable_compactionchunk();
  std::string* release_compactionchunk();
  void set_allocated_compactionchunk(std::string* compactionchunk);
  private:
  const std::string& _internal_compactionchunk() const;
  void _internal_set_compactionchunk(const std::string& value);
  std::string* _internal_mutable_compactionchunk();
  public:

  // bytes logChunk = 2;
  bool has_logchunk() const;
  private:
  bool _internal_has_logchunk() const;
  public:
  void clear_logchunk();
  const std::string& logchunk() const;
  void set_logchunk(const std::string& value);
  void set_logchunk(std::string&& value);
  void set_logchunk(const char* value);
  void set_logchunk(const void* value, size_t size);
  std::string* mutable_logchunk();
  std::string* release_logchunk();
  void set_allocated_logchunk(std::string* logchunk);
  private:
  const std::string& _internal_logchunk() const;
  void _internal_set_logchunk(const std::string& value);
  std::string* _internal_mutable_logchunk();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:backup.PullBackupResponse)
 private:
  class _Internal;
  void set_has_compactionchunk();
  void set_has_logchunk();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compactionchunk_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logchunk_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_backup_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateNewBackupRequest

// string userID = 1;
inline bool CreateNewBackupRequest::_internal_has_userid() const {
  return data_case() == kUserID;
}
inline bool CreateNewBackupRequest::has_userid() const {
  return _internal_has_userid();
}
inline void CreateNewBackupRequest::set_has_userid() {
  _oneof_case_[0] = kUserID;
}
inline void CreateNewBackupRequest::clear_userid() {
  if (_internal_has_userid()) {
    data_.userid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& CreateNewBackupRequest::userid() const {
  // @@protoc_insertion_point(field_get:backup.CreateNewBackupRequest.userID)
  return _internal_userid();
}
inline void CreateNewBackupRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:backup.CreateNewBackupRequest.userID)
}
inline std::string* CreateNewBackupRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:backup.CreateNewBackupRequest.userID)
  return _internal_mutable_userid();
}
inline const std::string& CreateNewBackupRequest::_internal_userid() const {
  if (_internal_has_userid()) {
    return data_.userid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CreateNewBackupRequest::_internal_set_userid(const std::string& value) {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateNewBackupRequest::set_userid(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.CreateNewBackupRequest.userID)
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.CreateNewBackupRequest.userID)
}
inline void CreateNewBackupRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.CreateNewBackupRequest.userID)
}
inline void CreateNewBackupRequest::set_userid(const char* value,
                             size_t size) {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.CreateNewBackupRequest.userID)
}
inline std::string* CreateNewBackupRequest::_internal_mutable_userid() {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.userid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateNewBackupRequest::release_userid() {
  // @@protoc_insertion_point(field_release:backup.CreateNewBackupRequest.userID)
  if (_internal_has_userid()) {
    clear_has_data();
    return data_.userid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void CreateNewBackupRequest::set_allocated_userid(std::string* userid) {
  if (has_data()) {
    clear_data();
  }
  if (userid != nullptr) {
    set_has_userid();
    data_.userid_.UnsafeSetDefault(userid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(userid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.CreateNewBackupRequest.userID)
}

// bytes keyEntropy = 2;
inline bool CreateNewBackupRequest::_internal_has_keyentropy() const {
  return data_case() == kKeyEntropy;
}
inline bool CreateNewBackupRequest::has_keyentropy() const {
  return _internal_has_keyentropy();
}
inline void CreateNewBackupRequest::set_has_keyentropy() {
  _oneof_case_[0] = kKeyEntropy;
}
inline void CreateNewBackupRequest::clear_keyentropy() {
  if (_internal_has_keyentropy()) {
    data_.keyentropy_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& CreateNewBackupRequest::keyentropy() const {
  // @@protoc_insertion_point(field_get:backup.CreateNewBackupRequest.keyEntropy)
  return _internal_keyentropy();
}
inline void CreateNewBackupRequest::set_keyentropy(const std::string& value) {
  _internal_set_keyentropy(value);
  // @@protoc_insertion_point(field_set:backup.CreateNewBackupRequest.keyEntropy)
}
inline std::string* CreateNewBackupRequest::mutable_keyentropy() {
  // @@protoc_insertion_point(field_mutable:backup.CreateNewBackupRequest.keyEntropy)
  return _internal_mutable_keyentropy();
}
inline const std::string& CreateNewBackupRequest::_internal_keyentropy() const {
  if (_internal_has_keyentropy()) {
    return data_.keyentropy_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CreateNewBackupRequest::_internal_set_keyentropy(const std::string& value) {
  if (!_internal_has_keyentropy()) {
    clear_data();
    set_has_keyentropy();
    data_.keyentropy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.keyentropy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateNewBackupRequest::set_keyentropy(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.CreateNewBackupRequest.keyEntropy)
  if (!_internal_has_keyentropy()) {
    clear_data();
    set_has_keyentropy();
    data_.keyentropy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.keyentropy_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.CreateNewBackupRequest.keyEntropy)
}
inline void CreateNewBackupRequest::set_keyentropy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_keyentropy()) {
    clear_data();
    set_has_keyentropy();
    data_.keyentropy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.keyentropy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.CreateNewBackupRequest.keyEntropy)
}
inline void CreateNewBackupRequest::set_keyentropy(const void* value,
                             size_t size) {
  if (!_internal_has_keyentropy()) {
    clear_data();
    set_has_keyentropy();
    data_.keyentropy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.keyentropy_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.CreateNewBackupRequest.keyEntropy)
}
inline std::string* CreateNewBackupRequest::_internal_mutable_keyentropy() {
  if (!_internal_has_keyentropy()) {
    clear_data();
    set_has_keyentropy();
    data_.keyentropy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.keyentropy_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateNewBackupRequest::release_keyentropy() {
  // @@protoc_insertion_point(field_release:backup.CreateNewBackupRequest.keyEntropy)
  if (_internal_has_keyentropy()) {
    clear_has_data();
    return data_.keyentropy_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void CreateNewBackupRequest::set_allocated_keyentropy(std::string* keyentropy) {
  if (has_data()) {
    clear_data();
  }
  if (keyentropy != nullptr) {
    set_has_keyentropy();
    data_.keyentropy_.UnsafeSetDefault(keyentropy);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(keyentropy);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.CreateNewBackupRequest.keyEntropy)
}

// bytes newCompactionHash = 3;
inline bool CreateNewBackupRequest::_internal_has_newcompactionhash() const {
  return data_case() == kNewCompactionHash;
}
inline bool CreateNewBackupRequest::has_newcompactionhash() const {
  return _internal_has_newcompactionhash();
}
inline void CreateNewBackupRequest::set_has_newcompactionhash() {
  _oneof_case_[0] = kNewCompactionHash;
}
inline void CreateNewBackupRequest::clear_newcompactionhash() {
  if (_internal_has_newcompactionhash()) {
    data_.newcompactionhash_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& CreateNewBackupRequest::newcompactionhash() const {
  // @@protoc_insertion_point(field_get:backup.CreateNewBackupRequest.newCompactionHash)
  return _internal_newcompactionhash();
}
inline void CreateNewBackupRequest::set_newcompactionhash(const std::string& value) {
  _internal_set_newcompactionhash(value);
  // @@protoc_insertion_point(field_set:backup.CreateNewBackupRequest.newCompactionHash)
}
inline std::string* CreateNewBackupRequest::mutable_newcompactionhash() {
  // @@protoc_insertion_point(field_mutable:backup.CreateNewBackupRequest.newCompactionHash)
  return _internal_mutable_newcompactionhash();
}
inline const std::string& CreateNewBackupRequest::_internal_newcompactionhash() const {
  if (_internal_has_newcompactionhash()) {
    return data_.newcompactionhash_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CreateNewBackupRequest::_internal_set_newcompactionhash(const std::string& value) {
  if (!_internal_has_newcompactionhash()) {
    clear_data();
    set_has_newcompactionhash();
    data_.newcompactionhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.newcompactionhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateNewBackupRequest::set_newcompactionhash(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.CreateNewBackupRequest.newCompactionHash)
  if (!_internal_has_newcompactionhash()) {
    clear_data();
    set_has_newcompactionhash();
    data_.newcompactionhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.newcompactionhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.CreateNewBackupRequest.newCompactionHash)
}
inline void CreateNewBackupRequest::set_newcompactionhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_newcompactionhash()) {
    clear_data();
    set_has_newcompactionhash();
    data_.newcompactionhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.newcompactionhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.CreateNewBackupRequest.newCompactionHash)
}
inline void CreateNewBackupRequest::set_newcompactionhash(const void* value,
                             size_t size) {
  if (!_internal_has_newcompactionhash()) {
    clear_data();
    set_has_newcompactionhash();
    data_.newcompactionhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.newcompactionhash_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.CreateNewBackupRequest.newCompactionHash)
}
inline std::string* CreateNewBackupRequest::_internal_mutable_newcompactionhash() {
  if (!_internal_has_newcompactionhash()) {
    clear_data();
    set_has_newcompactionhash();
    data_.newcompactionhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.newcompactionhash_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateNewBackupRequest::release_newcompactionhash() {
  // @@protoc_insertion_point(field_release:backup.CreateNewBackupRequest.newCompactionHash)
  if (_internal_has_newcompactionhash()) {
    clear_has_data();
    return data_.newcompactionhash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void CreateNewBackupRequest::set_allocated_newcompactionhash(std::string* newcompactionhash) {
  if (has_data()) {
    clear_data();
  }
  if (newcompactionhash != nullptr) {
    set_has_newcompactionhash();
    data_.newcompactionhash_.UnsafeSetDefault(newcompactionhash);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(newcompactionhash);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.CreateNewBackupRequest.newCompactionHash)
}

// bytes newCompactionChunk = 4;
inline bool CreateNewBackupRequest::_internal_has_newcompactionchunk() const {
  return data_case() == kNewCompactionChunk;
}
inline bool CreateNewBackupRequest::has_newcompactionchunk() const {
  return _internal_has_newcompactionchunk();
}
inline void CreateNewBackupRequest::set_has_newcompactionchunk() {
  _oneof_case_[0] = kNewCompactionChunk;
}
inline void CreateNewBackupRequest::clear_newcompactionchunk() {
  if (_internal_has_newcompactionchunk()) {
    data_.newcompactionchunk_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& CreateNewBackupRequest::newcompactionchunk() const {
  // @@protoc_insertion_point(field_get:backup.CreateNewBackupRequest.newCompactionChunk)
  return _internal_newcompactionchunk();
}
inline void CreateNewBackupRequest::set_newcompactionchunk(const std::string& value) {
  _internal_set_newcompactionchunk(value);
  // @@protoc_insertion_point(field_set:backup.CreateNewBackupRequest.newCompactionChunk)
}
inline std::string* CreateNewBackupRequest::mutable_newcompactionchunk() {
  // @@protoc_insertion_point(field_mutable:backup.CreateNewBackupRequest.newCompactionChunk)
  return _internal_mutable_newcompactionchunk();
}
inline const std::string& CreateNewBackupRequest::_internal_newcompactionchunk() const {
  if (_internal_has_newcompactionchunk()) {
    return data_.newcompactionchunk_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CreateNewBackupRequest::_internal_set_newcompactionchunk(const std::string& value) {
  if (!_internal_has_newcompactionchunk()) {
    clear_data();
    set_has_newcompactionchunk();
    data_.newcompactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.newcompactionchunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateNewBackupRequest::set_newcompactionchunk(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.CreateNewBackupRequest.newCompactionChunk)
  if (!_internal_has_newcompactionchunk()) {
    clear_data();
    set_has_newcompactionchunk();
    data_.newcompactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.newcompactionchunk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.CreateNewBackupRequest.newCompactionChunk)
}
inline void CreateNewBackupRequest::set_newcompactionchunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_newcompactionchunk()) {
    clear_data();
    set_has_newcompactionchunk();
    data_.newcompactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.newcompactionchunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.CreateNewBackupRequest.newCompactionChunk)
}
inline void CreateNewBackupRequest::set_newcompactionchunk(const void* value,
                             size_t size) {
  if (!_internal_has_newcompactionchunk()) {
    clear_data();
    set_has_newcompactionchunk();
    data_.newcompactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.newcompactionchunk_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.CreateNewBackupRequest.newCompactionChunk)
}
inline std::string* CreateNewBackupRequest::_internal_mutable_newcompactionchunk() {
  if (!_internal_has_newcompactionchunk()) {
    clear_data();
    set_has_newcompactionchunk();
    data_.newcompactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.newcompactionchunk_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateNewBackupRequest::release_newcompactionchunk() {
  // @@protoc_insertion_point(field_release:backup.CreateNewBackupRequest.newCompactionChunk)
  if (_internal_has_newcompactionchunk()) {
    clear_has_data();
    return data_.newcompactionchunk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void CreateNewBackupRequest::set_allocated_newcompactionchunk(std::string* newcompactionchunk) {
  if (has_data()) {
    clear_data();
  }
  if (newcompactionchunk != nullptr) {
    set_has_newcompactionchunk();
    data_.newcompactionchunk_.UnsafeSetDefault(newcompactionchunk);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(newcompactionchunk);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.CreateNewBackupRequest.newCompactionChunk)
}

inline bool CreateNewBackupRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void CreateNewBackupRequest::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline CreateNewBackupRequest::DataCase CreateNewBackupRequest::data_case() const {
  return CreateNewBackupRequest::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateNewBackupResponse

// string backupID = 1;
inline void CreateNewBackupResponse::clear_backupid() {
  backupid_.ClearToEmpty();
}
inline const std::string& CreateNewBackupResponse::backupid() const {
  // @@protoc_insertion_point(field_get:backup.CreateNewBackupResponse.backupID)
  return _internal_backupid();
}
inline void CreateNewBackupResponse::set_backupid(const std::string& value) {
  _internal_set_backupid(value);
  // @@protoc_insertion_point(field_set:backup.CreateNewBackupResponse.backupID)
}
inline std::string* CreateNewBackupResponse::mutable_backupid() {
  // @@protoc_insertion_point(field_mutable:backup.CreateNewBackupResponse.backupID)
  return _internal_mutable_backupid();
}
inline const std::string& CreateNewBackupResponse::_internal_backupid() const {
  return backupid_.Get();
}
inline void CreateNewBackupResponse::_internal_set_backupid(const std::string& value) {
  
  backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateNewBackupResponse::set_backupid(std::string&& value) {
  
  backupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.CreateNewBackupResponse.backupID)
}
inline void CreateNewBackupResponse::set_backupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.CreateNewBackupResponse.backupID)
}
inline void CreateNewBackupResponse::set_backupid(const char* value,
    size_t size) {
  
  backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.CreateNewBackupResponse.backupID)
}
inline std::string* CreateNewBackupResponse::_internal_mutable_backupid() {
  
  return backupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateNewBackupResponse::release_backupid() {
  // @@protoc_insertion_point(field_release:backup.CreateNewBackupResponse.backupID)
  return backupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateNewBackupResponse::set_allocated_backupid(std::string* backupid) {
  if (backupid != nullptr) {
    
  } else {
    
  }
  backupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:backup.CreateNewBackupResponse.backupID)
}

// -------------------------------------------------------------------

// SendLogRequest

// string userID = 1;
inline bool SendLogRequest::_internal_has_userid() const {
  return data_case() == kUserID;
}
inline bool SendLogRequest::has_userid() const {
  return _internal_has_userid();
}
inline void SendLogRequest::set_has_userid() {
  _oneof_case_[0] = kUserID;
}
inline void SendLogRequest::clear_userid() {
  if (_internal_has_userid()) {
    data_.userid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& SendLogRequest::userid() const {
  // @@protoc_insertion_point(field_get:backup.SendLogRequest.userID)
  return _internal_userid();
}
inline void SendLogRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.userID)
}
inline std::string* SendLogRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:backup.SendLogRequest.userID)
  return _internal_mutable_userid();
}
inline const std::string& SendLogRequest::_internal_userid() const {
  if (_internal_has_userid()) {
    return data_.userid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SendLogRequest::_internal_set_userid(const std::string& value) {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendLogRequest::set_userid(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.userID)
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.SendLogRequest.userID)
}
inline void SendLogRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.SendLogRequest.userID)
}
inline void SendLogRequest::set_userid(const char* value,
                             size_t size) {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.SendLogRequest.userID)
}
inline std::string* SendLogRequest::_internal_mutable_userid() {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.userid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendLogRequest::release_userid() {
  // @@protoc_insertion_point(field_release:backup.SendLogRequest.userID)
  if (_internal_has_userid()) {
    clear_has_data();
    return data_.userid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SendLogRequest::set_allocated_userid(std::string* userid) {
  if (has_data()) {
    clear_data();
  }
  if (userid != nullptr) {
    set_has_userid();
    data_.userid_.UnsafeSetDefault(userid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(userid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.SendLogRequest.userID)
}

// string backupID = 2;
inline bool SendLogRequest::_internal_has_backupid() const {
  return data_case() == kBackupID;
}
inline bool SendLogRequest::has_backupid() const {
  return _internal_has_backupid();
}
inline void SendLogRequest::set_has_backupid() {
  _oneof_case_[0] = kBackupID;
}
inline void SendLogRequest::clear_backupid() {
  if (_internal_has_backupid()) {
    data_.backupid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& SendLogRequest::backupid() const {
  // @@protoc_insertion_point(field_get:backup.SendLogRequest.backupID)
  return _internal_backupid();
}
inline void SendLogRequest::set_backupid(const std::string& value) {
  _internal_set_backupid(value);
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.backupID)
}
inline std::string* SendLogRequest::mutable_backupid() {
  // @@protoc_insertion_point(field_mutable:backup.SendLogRequest.backupID)
  return _internal_mutable_backupid();
}
inline const std::string& SendLogRequest::_internal_backupid() const {
  if (_internal_has_backupid()) {
    return data_.backupid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SendLogRequest::_internal_set_backupid(const std::string& value) {
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendLogRequest::set_backupid(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.backupID)
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.SendLogRequest.backupID)
}
inline void SendLogRequest::set_backupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.SendLogRequest.backupID)
}
inline void SendLogRequest::set_backupid(const char* value,
                             size_t size) {
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.SendLogRequest.backupID)
}
inline std::string* SendLogRequest::_internal_mutable_backupid() {
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.backupid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendLogRequest::release_backupid() {
  // @@protoc_insertion_point(field_release:backup.SendLogRequest.backupID)
  if (_internal_has_backupid()) {
    clear_has_data();
    return data_.backupid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SendLogRequest::set_allocated_backupid(std::string* backupid) {
  if (has_data()) {
    clear_data();
  }
  if (backupid != nullptr) {
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(backupid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(backupid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.SendLogRequest.backupID)
}

// bytes logHash = 3;
inline bool SendLogRequest::_internal_has_loghash() const {
  return data_case() == kLogHash;
}
inline bool SendLogRequest::has_loghash() const {
  return _internal_has_loghash();
}
inline void SendLogRequest::set_has_loghash() {
  _oneof_case_[0] = kLogHash;
}
inline void SendLogRequest::clear_loghash() {
  if (_internal_has_loghash()) {
    data_.loghash_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& SendLogRequest::loghash() const {
  // @@protoc_insertion_point(field_get:backup.SendLogRequest.logHash)
  return _internal_loghash();
}
inline void SendLogRequest::set_loghash(const std::string& value) {
  _internal_set_loghash(value);
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.logHash)
}
inline std::string* SendLogRequest::mutable_loghash() {
  // @@protoc_insertion_point(field_mutable:backup.SendLogRequest.logHash)
  return _internal_mutable_loghash();
}
inline const std::string& SendLogRequest::_internal_loghash() const {
  if (_internal_has_loghash()) {
    return data_.loghash_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SendLogRequest::_internal_set_loghash(const std::string& value) {
  if (!_internal_has_loghash()) {
    clear_data();
    set_has_loghash();
    data_.loghash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.loghash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendLogRequest::set_loghash(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.logHash)
  if (!_internal_has_loghash()) {
    clear_data();
    set_has_loghash();
    data_.loghash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.loghash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.SendLogRequest.logHash)
}
inline void SendLogRequest::set_loghash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_loghash()) {
    clear_data();
    set_has_loghash();
    data_.loghash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.loghash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.SendLogRequest.logHash)
}
inline void SendLogRequest::set_loghash(const void* value,
                             size_t size) {
  if (!_internal_has_loghash()) {
    clear_data();
    set_has_loghash();
    data_.loghash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.loghash_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.SendLogRequest.logHash)
}
inline std::string* SendLogRequest::_internal_mutable_loghash() {
  if (!_internal_has_loghash()) {
    clear_data();
    set_has_loghash();
    data_.loghash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.loghash_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendLogRequest::release_loghash() {
  // @@protoc_insertion_point(field_release:backup.SendLogRequest.logHash)
  if (_internal_has_loghash()) {
    clear_has_data();
    return data_.loghash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SendLogRequest::set_allocated_loghash(std::string* loghash) {
  if (has_data()) {
    clear_data();
  }
  if (loghash != nullptr) {
    set_has_loghash();
    data_.loghash_.UnsafeSetDefault(loghash);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(loghash);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.SendLogRequest.logHash)
}

// bytes logData = 4;
inline bool SendLogRequest::_internal_has_logdata() const {
  return data_case() == kLogData;
}
inline bool SendLogRequest::has_logdata() const {
  return _internal_has_logdata();
}
inline void SendLogRequest::set_has_logdata() {
  _oneof_case_[0] = kLogData;
}
inline void SendLogRequest::clear_logdata() {
  if (_internal_has_logdata()) {
    data_.logdata_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& SendLogRequest::logdata() const {
  // @@protoc_insertion_point(field_get:backup.SendLogRequest.logData)
  return _internal_logdata();
}
inline void SendLogRequest::set_logdata(const std::string& value) {
  _internal_set_logdata(value);
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.logData)
}
inline std::string* SendLogRequest::mutable_logdata() {
  // @@protoc_insertion_point(field_mutable:backup.SendLogRequest.logData)
  return _internal_mutable_logdata();
}
inline const std::string& SendLogRequest::_internal_logdata() const {
  if (_internal_has_logdata()) {
    return data_.logdata_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SendLogRequest::_internal_set_logdata(const std::string& value) {
  if (!_internal_has_logdata()) {
    clear_data();
    set_has_logdata();
    data_.logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendLogRequest::set_logdata(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.logData)
  if (!_internal_has_logdata()) {
    clear_data();
    set_has_logdata();
    data_.logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.SendLogRequest.logData)
}
inline void SendLogRequest::set_logdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_logdata()) {
    clear_data();
    set_has_logdata();
    data_.logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.SendLogRequest.logData)
}
inline void SendLogRequest::set_logdata(const void* value,
                             size_t size) {
  if (!_internal_has_logdata()) {
    clear_data();
    set_has_logdata();
    data_.logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logdata_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.SendLogRequest.logData)
}
inline std::string* SendLogRequest::_internal_mutable_logdata() {
  if (!_internal_has_logdata()) {
    clear_data();
    set_has_logdata();
    data_.logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.logdata_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendLogRequest::release_logdata() {
  // @@protoc_insertion_point(field_release:backup.SendLogRequest.logData)
  if (_internal_has_logdata()) {
    clear_has_data();
    return data_.logdata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SendLogRequest::set_allocated_logdata(std::string* logdata) {
  if (has_data()) {
    clear_data();
  }
  if (logdata != nullptr) {
    set_has_logdata();
    data_.logdata_.UnsafeSetDefault(logdata);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(logdata);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.SendLogRequest.logData)
}

inline bool SendLogRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void SendLogRequest::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline SendLogRequest::DataCase SendLogRequest::data_case() const {
  return SendLogRequest::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RecoverBackupKeyRequest

// string userID = 1;
inline void RecoverBackupKeyRequest::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& RecoverBackupKeyRequest::userid() const {
  // @@protoc_insertion_point(field_get:backup.RecoverBackupKeyRequest.userID)
  return _internal_userid();
}
inline void RecoverBackupKeyRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:backup.RecoverBackupKeyRequest.userID)
}
inline std::string* RecoverBackupKeyRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:backup.RecoverBackupKeyRequest.userID)
  return _internal_mutable_userid();
}
inline const std::string& RecoverBackupKeyRequest::_internal_userid() const {
  return userid_.Get();
}
inline void RecoverBackupKeyRequest::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecoverBackupKeyRequest::set_userid(std::string&& value) {
  
  userid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.RecoverBackupKeyRequest.userID)
}
inline void RecoverBackupKeyRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.RecoverBackupKeyRequest.userID)
}
inline void RecoverBackupKeyRequest::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.RecoverBackupKeyRequest.userID)
}
inline std::string* RecoverBackupKeyRequest::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecoverBackupKeyRequest::release_userid() {
  // @@protoc_insertion_point(field_release:backup.RecoverBackupKeyRequest.userID)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecoverBackupKeyRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:backup.RecoverBackupKeyRequest.userID)
}

// -------------------------------------------------------------------

// RecoverBackupKeyResponse

// string backupID = 4;
inline void RecoverBackupKeyResponse::clear_backupid() {
  backupid_.ClearToEmpty();
}
inline const std::string& RecoverBackupKeyResponse::backupid() const {
  // @@protoc_insertion_point(field_get:backup.RecoverBackupKeyResponse.backupID)
  return _internal_backupid();
}
inline void RecoverBackupKeyResponse::set_backupid(const std::string& value) {
  _internal_set_backupid(value);
  // @@protoc_insertion_point(field_set:backup.RecoverBackupKeyResponse.backupID)
}
inline std::string* RecoverBackupKeyResponse::mutable_backupid() {
  // @@protoc_insertion_point(field_mutable:backup.RecoverBackupKeyResponse.backupID)
  return _internal_mutable_backupid();
}
inline const std::string& RecoverBackupKeyResponse::_internal_backupid() const {
  return backupid_.Get();
}
inline void RecoverBackupKeyResponse::_internal_set_backupid(const std::string& value) {
  
  backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecoverBackupKeyResponse::set_backupid(std::string&& value) {
  
  backupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.RecoverBackupKeyResponse.backupID)
}
inline void RecoverBackupKeyResponse::set_backupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.RecoverBackupKeyResponse.backupID)
}
inline void RecoverBackupKeyResponse::set_backupid(const char* value,
    size_t size) {
  
  backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.RecoverBackupKeyResponse.backupID)
}
inline std::string* RecoverBackupKeyResponse::_internal_mutable_backupid() {
  
  return backupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecoverBackupKeyResponse::release_backupid() {
  // @@protoc_insertion_point(field_release:backup.RecoverBackupKeyResponse.backupID)
  return backupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecoverBackupKeyResponse::set_allocated_backupid(std::string* backupid) {
  if (backupid != nullptr) {
    
  } else {
    
  }
  backupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:backup.RecoverBackupKeyResponse.backupID)
}

// -------------------------------------------------------------------

// PullBackupRequest

// string userID = 1;
inline void PullBackupRequest::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& PullBackupRequest::userid() const {
  // @@protoc_insertion_point(field_get:backup.PullBackupRequest.userID)
  return _internal_userid();
}
inline void PullBackupRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:backup.PullBackupRequest.userID)
}
inline std::string* PullBackupRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:backup.PullBackupRequest.userID)
  return _internal_mutable_userid();
}
inline const std::string& PullBackupRequest::_internal_userid() const {
  return userid_.Get();
}
inline void PullBackupRequest::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullBackupRequest::set_userid(std::string&& value) {
  
  userid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.PullBackupRequest.userID)
}
inline void PullBackupRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.PullBackupRequest.userID)
}
inline void PullBackupRequest::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.PullBackupRequest.userID)
}
inline std::string* PullBackupRequest::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullBackupRequest::release_userid() {
  // @@protoc_insertion_point(field_release:backup.PullBackupRequest.userID)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PullBackupRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:backup.PullBackupRequest.userID)
}

// string backupID = 2;
inline void PullBackupRequest::clear_backupid() {
  backupid_.ClearToEmpty();
}
inline const std::string& PullBackupRequest::backupid() const {
  // @@protoc_insertion_point(field_get:backup.PullBackupRequest.backupID)
  return _internal_backupid();
}
inline void PullBackupRequest::set_backupid(const std::string& value) {
  _internal_set_backupid(value);
  // @@protoc_insertion_point(field_set:backup.PullBackupRequest.backupID)
}
inline std::string* PullBackupRequest::mutable_backupid() {
  // @@protoc_insertion_point(field_mutable:backup.PullBackupRequest.backupID)
  return _internal_mutable_backupid();
}
inline const std::string& PullBackupRequest::_internal_backupid() const {
  return backupid_.Get();
}
inline void PullBackupRequest::_internal_set_backupid(const std::string& value) {
  
  backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullBackupRequest::set_backupid(std::string&& value) {
  
  backupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.PullBackupRequest.backupID)
}
inline void PullBackupRequest::set_backupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.PullBackupRequest.backupID)
}
inline void PullBackupRequest::set_backupid(const char* value,
    size_t size) {
  
  backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.PullBackupRequest.backupID)
}
inline std::string* PullBackupRequest::_internal_mutable_backupid() {
  
  return backupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullBackupRequest::release_backupid() {
  // @@protoc_insertion_point(field_release:backup.PullBackupRequest.backupID)
  return backupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PullBackupRequest::set_allocated_backupid(std::string* backupid) {
  if (backupid != nullptr) {
    
  } else {
    
  }
  backupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:backup.PullBackupRequest.backupID)
}

// -------------------------------------------------------------------

// PullBackupResponse

// bytes compactionChunk = 1;
inline bool PullBackupResponse::_internal_has_compactionchunk() const {
  return data_case() == kCompactionChunk;
}
inline bool PullBackupResponse::has_compactionchunk() const {
  return _internal_has_compactionchunk();
}
inline void PullBackupResponse::set_has_compactionchunk() {
  _oneof_case_[0] = kCompactionChunk;
}
inline void PullBackupResponse::clear_compactionchunk() {
  if (_internal_has_compactionchunk()) {
    data_.compactionchunk_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PullBackupResponse::compactionchunk() const {
  // @@protoc_insertion_point(field_get:backup.PullBackupResponse.compactionChunk)
  return _internal_compactionchunk();
}
inline void PullBackupResponse::set_compactionchunk(const std::string& value) {
  _internal_set_compactionchunk(value);
  // @@protoc_insertion_point(field_set:backup.PullBackupResponse.compactionChunk)
}
inline std::string* PullBackupResponse::mutable_compactionchunk() {
  // @@protoc_insertion_point(field_mutable:backup.PullBackupResponse.compactionChunk)
  return _internal_mutable_compactionchunk();
}
inline const std::string& PullBackupResponse::_internal_compactionchunk() const {
  if (_internal_has_compactionchunk()) {
    return data_.compactionchunk_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PullBackupResponse::_internal_set_compactionchunk(const std::string& value) {
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullBackupResponse::set_compactionchunk(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.PullBackupResponse.compactionChunk)
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.PullBackupResponse.compactionChunk)
}
inline void PullBackupResponse::set_compactionchunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.PullBackupResponse.compactionChunk)
}
inline void PullBackupResponse::set_compactionchunk(const void* value,
                             size_t size) {
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.PullBackupResponse.compactionChunk)
}
inline std::string* PullBackupResponse::_internal_mutable_compactionchunk() {
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.compactionchunk_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullBackupResponse::release_compactionchunk() {
  // @@protoc_insertion_point(field_release:backup.PullBackupResponse.compactionChunk)
  if (_internal_has_compactionchunk()) {
    clear_has_data();
    return data_.compactionchunk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PullBackupResponse::set_allocated_compactionchunk(std::string* compactionchunk) {
  if (has_data()) {
    clear_data();
  }
  if (compactionchunk != nullptr) {
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(compactionchunk);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(compactionchunk);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.PullBackupResponse.compactionChunk)
}

// bytes logChunk = 2;
inline bool PullBackupResponse::_internal_has_logchunk() const {
  return data_case() == kLogChunk;
}
inline bool PullBackupResponse::has_logchunk() const {
  return _internal_has_logchunk();
}
inline void PullBackupResponse::set_has_logchunk() {
  _oneof_case_[0] = kLogChunk;
}
inline void PullBackupResponse::clear_logchunk() {
  if (_internal_has_logchunk()) {
    data_.logchunk_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PullBackupResponse::logchunk() const {
  // @@protoc_insertion_point(field_get:backup.PullBackupResponse.logChunk)
  return _internal_logchunk();
}
inline void PullBackupResponse::set_logchunk(const std::string& value) {
  _internal_set_logchunk(value);
  // @@protoc_insertion_point(field_set:backup.PullBackupResponse.logChunk)
}
inline std::string* PullBackupResponse::mutable_logchunk() {
  // @@protoc_insertion_point(field_mutable:backup.PullBackupResponse.logChunk)
  return _internal_mutable_logchunk();
}
inline const std::string& PullBackupResponse::_internal_logchunk() const {
  if (_internal_has_logchunk()) {
    return data_.logchunk_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PullBackupResponse::_internal_set_logchunk(const std::string& value) {
  if (!_internal_has_logchunk()) {
    clear_data();
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logchunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullBackupResponse::set_logchunk(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.PullBackupResponse.logChunk)
  if (!_internal_has_logchunk()) {
    clear_data();
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logchunk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.PullBackupResponse.logChunk)
}
inline void PullBackupResponse::set_logchunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_logchunk()) {
    clear_data();
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logchunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.PullBackupResponse.logChunk)
}
inline void PullBackupResponse::set_logchunk(const void* value,
                             size_t size) {
  if (!_internal_has_logchunk()) {
    clear_data();
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logchunk_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.PullBackupResponse.logChunk)
}
inline std::string* PullBackupResponse::_internal_mutable_logchunk() {
  if (!_internal_has_logchunk()) {
    clear_data();
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.logchunk_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullBackupResponse::release_logchunk() {
  // @@protoc_insertion_point(field_release:backup.PullBackupResponse.logChunk)
  if (_internal_has_logchunk()) {
    clear_has_data();
    return data_.logchunk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PullBackupResponse::set_allocated_logchunk(std::string* logchunk) {
  if (has_data()) {
    clear_data();
  }
  if (logchunk != nullptr) {
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(logchunk);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(logchunk);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.PullBackupResponse.logChunk)
}

inline bool PullBackupResponse::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void PullBackupResponse::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline PullBackupResponse::DataCase PullBackupResponse::data_case() const {
  return PullBackupResponse::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace backup

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_backup_2eproto
