// @generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backup.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_backup_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_backup_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_backup_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_backup_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backup_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_backup_2eproto_metadata_getter(int index);
namespace backup {
class CreateNewBackupRequest;
struct CreateNewBackupRequestDefaultTypeInternal;
extern CreateNewBackupRequestDefaultTypeInternal _CreateNewBackupRequest_default_instance_;
class PullBackupKeyRequest;
struct PullBackupKeyRequestDefaultTypeInternal;
extern PullBackupKeyRequestDefaultTypeInternal _PullBackupKeyRequest_default_instance_;
class PullBackupKeyResponse;
struct PullBackupKeyResponseDefaultTypeInternal;
extern PullBackupKeyResponseDefaultTypeInternal _PullBackupKeyResponse_default_instance_;
class PullCompactionRequest;
struct PullCompactionRequestDefaultTypeInternal;
extern PullCompactionRequestDefaultTypeInternal _PullCompactionRequest_default_instance_;
class PullCompactionResponse;
struct PullCompactionResponseDefaultTypeInternal;
extern PullCompactionResponseDefaultTypeInternal _PullCompactionResponse_default_instance_;
class SendLogRequest;
struct SendLogRequestDefaultTypeInternal;
extern SendLogRequestDefaultTypeInternal _SendLogRequest_default_instance_;
}  // namespace backup
PROTOBUF_NAMESPACE_OPEN
template<> ::backup::CreateNewBackupRequest* Arena::CreateMaybeMessage<::backup::CreateNewBackupRequest>(Arena*);
template<> ::backup::PullBackupKeyRequest* Arena::CreateMaybeMessage<::backup::PullBackupKeyRequest>(Arena*);
template<> ::backup::PullBackupKeyResponse* Arena::CreateMaybeMessage<::backup::PullBackupKeyResponse>(Arena*);
template<> ::backup::PullCompactionRequest* Arena::CreateMaybeMessage<::backup::PullCompactionRequest>(Arena*);
template<> ::backup::PullCompactionResponse* Arena::CreateMaybeMessage<::backup::PullCompactionResponse>(Arena*);
template<> ::backup::SendLogRequest* Arena::CreateMaybeMessage<::backup::SendLogRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace backup {

// ===================================================================

class CreateNewBackupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.CreateNewBackupRequest) */ {
 public:
  inline CreateNewBackupRequest() : CreateNewBackupRequest(nullptr) {}
  virtual ~CreateNewBackupRequest();
  explicit constexpr CreateNewBackupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNewBackupRequest(const CreateNewBackupRequest& from);
  CreateNewBackupRequest(CreateNewBackupRequest&& from) noexcept
    : CreateNewBackupRequest() {
    *this = ::std::move(from);
  }

  inline CreateNewBackupRequest& operator=(const CreateNewBackupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNewBackupRequest& operator=(CreateNewBackupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateNewBackupRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kUserID = 1,
    kNewKey = 2,
    kCompactionChunk = 3,
    DATA_NOT_SET = 0,
  };

  static inline const CreateNewBackupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNewBackupRequest*>(
               &_CreateNewBackupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateNewBackupRequest& a, CreateNewBackupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNewBackupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNewBackupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateNewBackupRequest* New() const final {
    return CreateMaybeMessage<CreateNewBackupRequest>(nullptr);
  }

  CreateNewBackupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateNewBackupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateNewBackupRequest& from);
  void MergeFrom(const CreateNewBackupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNewBackupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.CreateNewBackupRequest";
  }
  protected:
  explicit CreateNewBackupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backup_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
    kNewKeyFieldNumber = 2,
    kCompactionChunkFieldNumber = 3,
  };
  // string userID = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // bytes newKey = 2;
  bool has_newkey() const;
  private:
  bool _internal_has_newkey() const;
  public:
  void clear_newkey();
  const std::string& newkey() const;
  void set_newkey(const std::string& value);
  void set_newkey(std::string&& value);
  void set_newkey(const char* value);
  void set_newkey(const void* value, size_t size);
  std::string* mutable_newkey();
  std::string* release_newkey();
  void set_allocated_newkey(std::string* newkey);
  private:
  const std::string& _internal_newkey() const;
  void _internal_set_newkey(const std::string& value);
  std::string* _internal_mutable_newkey();
  public:

  // bytes compactionChunk = 3;
  bool has_compactionchunk() const;
  private:
  bool _internal_has_compactionchunk() const;
  public:
  void clear_compactionchunk();
  const std::string& compactionchunk() const;
  void set_compactionchunk(const std::string& value);
  void set_compactionchunk(std::string&& value);
  void set_compactionchunk(const char* value);
  void set_compactionchunk(const void* value, size_t size);
  std::string* mutable_compactionchunk();
  std::string* release_compactionchunk();
  void set_allocated_compactionchunk(std::string* compactionchunk);
  private:
  const std::string& _internal_compactionchunk() const;
  void _internal_set_compactionchunk(const std::string& value);
  std::string* _internal_mutable_compactionchunk();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:backup.CreateNewBackupRequest)
 private:
  class _Internal;
  void set_has_userid();
  void set_has_newkey();
  void set_has_compactionchunk();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compactionchunk_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class SendLogRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.SendLogRequest) */ {
 public:
  inline SendLogRequest() : SendLogRequest(nullptr) {}
  virtual ~SendLogRequest();
  explicit constexpr SendLogRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendLogRequest(const SendLogRequest& from);
  SendLogRequest(SendLogRequest&& from) noexcept
    : SendLogRequest() {
    *this = ::std::move(from);
  }

  inline SendLogRequest& operator=(const SendLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendLogRequest& operator=(SendLogRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendLogRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kUserID = 1,
    kBackupID = 2,
    kLogData = 3,
    DATA_NOT_SET = 0,
  };

  static inline const SendLogRequest* internal_default_instance() {
    return reinterpret_cast<const SendLogRequest*>(
               &_SendLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendLogRequest& a, SendLogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendLogRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendLogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendLogRequest* New() const final {
    return CreateMaybeMessage<SendLogRequest>(nullptr);
  }

  SendLogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendLogRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendLogRequest& from);
  void MergeFrom(const SendLogRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendLogRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.SendLogRequest";
  }
  protected:
  explicit SendLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backup_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
    kBackupIDFieldNumber = 2,
    kLogDataFieldNumber = 3,
  };
  // string userID = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string backupID = 2;
  bool has_backupid() const;
  private:
  bool _internal_has_backupid() const;
  public:
  void clear_backupid();
  const std::string& backupid() const;
  void set_backupid(const std::string& value);
  void set_backupid(std::string&& value);
  void set_backupid(const char* value);
  void set_backupid(const char* value, size_t size);
  std::string* mutable_backupid();
  std::string* release_backupid();
  void set_allocated_backupid(std::string* backupid);
  private:
  const std::string& _internal_backupid() const;
  void _internal_set_backupid(const std::string& value);
  std::string* _internal_mutable_backupid();
  public:

  // bytes logData = 3;
  bool has_logdata() const;
  private:
  bool _internal_has_logdata() const;
  public:
  void clear_logdata();
  const std::string& logdata() const;
  void set_logdata(const std::string& value);
  void set_logdata(std::string&& value);
  void set_logdata(const char* value);
  void set_logdata(const void* value, size_t size);
  std::string* mutable_logdata();
  std::string* release_logdata();
  void set_allocated_logdata(std::string* logdata);
  private:
  const std::string& _internal_logdata() const;
  void _internal_set_logdata(const std::string& value);
  std::string* _internal_mutable_logdata();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:backup.SendLogRequest)
 private:
  class _Internal;
  void set_has_userid();
  void set_has_backupid();
  void set_has_logdata();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backupid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logdata_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class PullBackupKeyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.PullBackupKeyRequest) */ {
 public:
  inline PullBackupKeyRequest() : PullBackupKeyRequest(nullptr) {}
  virtual ~PullBackupKeyRequest();
  explicit constexpr PullBackupKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullBackupKeyRequest(const PullBackupKeyRequest& from);
  PullBackupKeyRequest(PullBackupKeyRequest&& from) noexcept
    : PullBackupKeyRequest() {
    *this = ::std::move(from);
  }

  inline PullBackupKeyRequest& operator=(const PullBackupKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullBackupKeyRequest& operator=(PullBackupKeyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullBackupKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kUserID = 1,
    kBackupID = 2,
    kRequestBytes = 3,
    DATA_NOT_SET = 0,
  };

  static inline const PullBackupKeyRequest* internal_default_instance() {
    return reinterpret_cast<const PullBackupKeyRequest*>(
               &_PullBackupKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PullBackupKeyRequest& a, PullBackupKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullBackupKeyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullBackupKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullBackupKeyRequest* New() const final {
    return CreateMaybeMessage<PullBackupKeyRequest>(nullptr);
  }

  PullBackupKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullBackupKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullBackupKeyRequest& from);
  void MergeFrom(const PullBackupKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullBackupKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.PullBackupKeyRequest";
  }
  protected:
  explicit PullBackupKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backup_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
    kBackupIDFieldNumber = 2,
    kRequestBytesFieldNumber = 3,
  };
  // string userID = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string backupID = 2;
  bool has_backupid() const;
  private:
  bool _internal_has_backupid() const;
  public:
  void clear_backupid();
  const std::string& backupid() const;
  void set_backupid(const std::string& value);
  void set_backupid(std::string&& value);
  void set_backupid(const char* value);
  void set_backupid(const char* value, size_t size);
  std::string* mutable_backupid();
  std::string* release_backupid();
  void set_allocated_backupid(std::string* backupid);
  private:
  const std::string& _internal_backupid() const;
  void _internal_set_backupid(const std::string& value);
  std::string* _internal_mutable_backupid();
  public:

  // bytes requestBytes = 3;
  bool has_requestbytes() const;
  private:
  bool _internal_has_requestbytes() const;
  public:
  void clear_requestbytes();
  const std::string& requestbytes() const;
  void set_requestbytes(const std::string& value);
  void set_requestbytes(std::string&& value);
  void set_requestbytes(const char* value);
  void set_requestbytes(const void* value, size_t size);
  std::string* mutable_requestbytes();
  std::string* release_requestbytes();
  void set_allocated_requestbytes(std::string* requestbytes);
  private:
  const std::string& _internal_requestbytes() const;
  void _internal_set_requestbytes(const std::string& value);
  std::string* _internal_mutable_requestbytes();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:backup.PullBackupKeyRequest)
 private:
  class _Internal;
  void set_has_userid();
  void set_has_backupid();
  void set_has_requestbytes();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backupid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestbytes_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class PullBackupKeyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.PullBackupKeyResponse) */ {
 public:
  inline PullBackupKeyResponse() : PullBackupKeyResponse(nullptr) {}
  virtual ~PullBackupKeyResponse();
  explicit constexpr PullBackupKeyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullBackupKeyResponse(const PullBackupKeyResponse& from);
  PullBackupKeyResponse(PullBackupKeyResponse&& from) noexcept
    : PullBackupKeyResponse() {
    *this = ::std::move(from);
  }

  inline PullBackupKeyResponse& operator=(const PullBackupKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullBackupKeyResponse& operator=(PullBackupKeyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullBackupKeyResponse& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kResponseBytes = 1,
    kEncryptedBackupKey = 2,
    DATA_NOT_SET = 0,
  };

  static inline const PullBackupKeyResponse* internal_default_instance() {
    return reinterpret_cast<const PullBackupKeyResponse*>(
               &_PullBackupKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PullBackupKeyResponse& a, PullBackupKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PullBackupKeyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullBackupKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullBackupKeyResponse* New() const final {
    return CreateMaybeMessage<PullBackupKeyResponse>(nullptr);
  }

  PullBackupKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullBackupKeyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullBackupKeyResponse& from);
  void MergeFrom(const PullBackupKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullBackupKeyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.PullBackupKeyResponse";
  }
  protected:
  explicit PullBackupKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backup_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseBytesFieldNumber = 1,
    kEncryptedBackupKeyFieldNumber = 2,
  };
  // bytes responseBytes = 1;
  bool has_responsebytes() const;
  private:
  bool _internal_has_responsebytes() const;
  public:
  void clear_responsebytes();
  const std::string& responsebytes() const;
  void set_responsebytes(const std::string& value);
  void set_responsebytes(std::string&& value);
  void set_responsebytes(const char* value);
  void set_responsebytes(const void* value, size_t size);
  std::string* mutable_responsebytes();
  std::string* release_responsebytes();
  void set_allocated_responsebytes(std::string* responsebytes);
  private:
  const std::string& _internal_responsebytes() const;
  void _internal_set_responsebytes(const std::string& value);
  std::string* _internal_mutable_responsebytes();
  public:

  // bytes encryptedBackupKey = 2;
  bool has_encryptedbackupkey() const;
  private:
  bool _internal_has_encryptedbackupkey() const;
  public:
  void clear_encryptedbackupkey();
  const std::string& encryptedbackupkey() const;
  void set_encryptedbackupkey(const std::string& value);
  void set_encryptedbackupkey(std::string&& value);
  void set_encryptedbackupkey(const char* value);
  void set_encryptedbackupkey(const void* value, size_t size);
  std::string* mutable_encryptedbackupkey();
  std::string* release_encryptedbackupkey();
  void set_allocated_encryptedbackupkey(std::string* encryptedbackupkey);
  private:
  const std::string& _internal_encryptedbackupkey() const;
  void _internal_set_encryptedbackupkey(const std::string& value);
  std::string* _internal_mutable_encryptedbackupkey();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:backup.PullBackupKeyResponse)
 private:
  class _Internal;
  void set_has_responsebytes();
  void set_has_encryptedbackupkey();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responsebytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryptedbackupkey_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class PullCompactionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.PullCompactionRequest) */ {
 public:
  inline PullCompactionRequest() : PullCompactionRequest(nullptr) {}
  virtual ~PullCompactionRequest();
  explicit constexpr PullCompactionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullCompactionRequest(const PullCompactionRequest& from);
  PullCompactionRequest(PullCompactionRequest&& from) noexcept
    : PullCompactionRequest() {
    *this = ::std::move(from);
  }

  inline PullCompactionRequest& operator=(const PullCompactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullCompactionRequest& operator=(PullCompactionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullCompactionRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kUserID = 1,
    kBackupID = 2,
    kRequestBytes = 3,
    DATA_NOT_SET = 0,
  };

  static inline const PullCompactionRequest* internal_default_instance() {
    return reinterpret_cast<const PullCompactionRequest*>(
               &_PullCompactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PullCompactionRequest& a, PullCompactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullCompactionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullCompactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullCompactionRequest* New() const final {
    return CreateMaybeMessage<PullCompactionRequest>(nullptr);
  }

  PullCompactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullCompactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullCompactionRequest& from);
  void MergeFrom(const PullCompactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullCompactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.PullCompactionRequest";
  }
  protected:
  explicit PullCompactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backup_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
    kBackupIDFieldNumber = 2,
    kRequestBytesFieldNumber = 3,
  };
  // string userID = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string backupID = 2;
  bool has_backupid() const;
  private:
  bool _internal_has_backupid() const;
  public:
  void clear_backupid();
  const std::string& backupid() const;
  void set_backupid(const std::string& value);
  void set_backupid(std::string&& value);
  void set_backupid(const char* value);
  void set_backupid(const char* value, size_t size);
  std::string* mutable_backupid();
  std::string* release_backupid();
  void set_allocated_backupid(std::string* backupid);
  private:
  const std::string& _internal_backupid() const;
  void _internal_set_backupid(const std::string& value);
  std::string* _internal_mutable_backupid();
  public:

  // bytes requestBytes = 3;
  bool has_requestbytes() const;
  private:
  bool _internal_has_requestbytes() const;
  public:
  void clear_requestbytes();
  const std::string& requestbytes() const;
  void set_requestbytes(const std::string& value);
  void set_requestbytes(std::string&& value);
  void set_requestbytes(const char* value);
  void set_requestbytes(const void* value, size_t size);
  std::string* mutable_requestbytes();
  std::string* release_requestbytes();
  void set_allocated_requestbytes(std::string* requestbytes);
  private:
  const std::string& _internal_requestbytes() const;
  void _internal_set_requestbytes(const std::string& value);
  std::string* _internal_mutable_requestbytes();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:backup.PullCompactionRequest)
 private:
  class _Internal;
  void set_has_userid();
  void set_has_backupid();
  void set_has_requestbytes();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backupid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestbytes_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class PullCompactionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.PullCompactionResponse) */ {
 public:
  inline PullCompactionResponse() : PullCompactionResponse(nullptr) {}
  virtual ~PullCompactionResponse();
  explicit constexpr PullCompactionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullCompactionResponse(const PullCompactionResponse& from);
  PullCompactionResponse(PullCompactionResponse&& from) noexcept
    : PullCompactionResponse() {
    *this = ::std::move(from);
  }

  inline PullCompactionResponse& operator=(const PullCompactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullCompactionResponse& operator=(PullCompactionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullCompactionResponse& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kResponseBytes = 1,
    kCompactionChunk = 2,
    kLogChunk = 3,
    DATA_NOT_SET = 0,
  };

  static inline const PullCompactionResponse* internal_default_instance() {
    return reinterpret_cast<const PullCompactionResponse*>(
               &_PullCompactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PullCompactionResponse& a, PullCompactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PullCompactionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullCompactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullCompactionResponse* New() const final {
    return CreateMaybeMessage<PullCompactionResponse>(nullptr);
  }

  PullCompactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullCompactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullCompactionResponse& from);
  void MergeFrom(const PullCompactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullCompactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.PullCompactionResponse";
  }
  protected:
  explicit PullCompactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_backup_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseBytesFieldNumber = 1,
    kCompactionChunkFieldNumber = 2,
    kLogChunkFieldNumber = 3,
  };
  // bytes responseBytes = 1;
  bool has_responsebytes() const;
  private:
  bool _internal_has_responsebytes() const;
  public:
  void clear_responsebytes();
  const std::string& responsebytes() const;
  void set_responsebytes(const std::string& value);
  void set_responsebytes(std::string&& value);
  void set_responsebytes(const char* value);
  void set_responsebytes(const void* value, size_t size);
  std::string* mutable_responsebytes();
  std::string* release_responsebytes();
  void set_allocated_responsebytes(std::string* responsebytes);
  private:
  const std::string& _internal_responsebytes() const;
  void _internal_set_responsebytes(const std::string& value);
  std::string* _internal_mutable_responsebytes();
  public:

  // bytes compactionChunk = 2;
  bool has_compactionchunk() const;
  private:
  bool _internal_has_compactionchunk() const;
  public:
  void clear_compactionchunk();
  const std::string& compactionchunk() const;
  void set_compactionchunk(const std::string& value);
  void set_compactionchunk(std::string&& value);
  void set_compactionchunk(const char* value);
  void set_compactionchunk(const void* value, size_t size);
  std::string* mutable_compactionchunk();
  std::string* release_compactionchunk();
  void set_allocated_compactionchunk(std::string* compactionchunk);
  private:
  const std::string& _internal_compactionchunk() const;
  void _internal_set_compactionchunk(const std::string& value);
  std::string* _internal_mutable_compactionchunk();
  public:

  // bytes logChunk = 3;
  bool has_logchunk() const;
  private:
  bool _internal_has_logchunk() const;
  public:
  void clear_logchunk();
  const std::string& logchunk() const;
  void set_logchunk(const std::string& value);
  void set_logchunk(std::string&& value);
  void set_logchunk(const char* value);
  void set_logchunk(const void* value, size_t size);
  std::string* mutable_logchunk();
  std::string* release_logchunk();
  void set_allocated_logchunk(std::string* logchunk);
  private:
  const std::string& _internal_logchunk() const;
  void _internal_set_logchunk(const std::string& value);
  std::string* _internal_mutable_logchunk();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:backup.PullCompactionResponse)
 private:
  class _Internal;
  void set_has_responsebytes();
  void set_has_compactionchunk();
  void set_has_logchunk();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responsebytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compactionchunk_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logchunk_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_backup_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateNewBackupRequest

// string userID = 1;
inline bool CreateNewBackupRequest::_internal_has_userid() const {
  return data_case() == kUserID;
}
inline bool CreateNewBackupRequest::has_userid() const {
  return _internal_has_userid();
}
inline void CreateNewBackupRequest::set_has_userid() {
  _oneof_case_[0] = kUserID;
}
inline void CreateNewBackupRequest::clear_userid() {
  if (_internal_has_userid()) {
    data_.userid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& CreateNewBackupRequest::userid() const {
  // @@protoc_insertion_point(field_get:backup.CreateNewBackupRequest.userID)
  return _internal_userid();
}
inline void CreateNewBackupRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:backup.CreateNewBackupRequest.userID)
}
inline std::string* CreateNewBackupRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:backup.CreateNewBackupRequest.userID)
  return _internal_mutable_userid();
}
inline const std::string& CreateNewBackupRequest::_internal_userid() const {
  if (_internal_has_userid()) {
    return data_.userid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CreateNewBackupRequest::_internal_set_userid(const std::string& value) {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateNewBackupRequest::set_userid(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.CreateNewBackupRequest.userID)
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.CreateNewBackupRequest.userID)
}
inline void CreateNewBackupRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.CreateNewBackupRequest.userID)
}
inline void CreateNewBackupRequest::set_userid(const char* value,
                             size_t size) {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.CreateNewBackupRequest.userID)
}
inline std::string* CreateNewBackupRequest::_internal_mutable_userid() {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.userid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateNewBackupRequest::release_userid() {
  // @@protoc_insertion_point(field_release:backup.CreateNewBackupRequest.userID)
  if (_internal_has_userid()) {
    clear_has_data();
    return data_.userid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void CreateNewBackupRequest::set_allocated_userid(std::string* userid) {
  if (has_data()) {
    clear_data();
  }
  if (userid != nullptr) {
    set_has_userid();
    data_.userid_.UnsafeSetDefault(userid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(userid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.CreateNewBackupRequest.userID)
}

// bytes newKey = 2;
inline bool CreateNewBackupRequest::_internal_has_newkey() const {
  return data_case() == kNewKey;
}
inline bool CreateNewBackupRequest::has_newkey() const {
  return _internal_has_newkey();
}
inline void CreateNewBackupRequest::set_has_newkey() {
  _oneof_case_[0] = kNewKey;
}
inline void CreateNewBackupRequest::clear_newkey() {
  if (_internal_has_newkey()) {
    data_.newkey_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& CreateNewBackupRequest::newkey() const {
  // @@protoc_insertion_point(field_get:backup.CreateNewBackupRequest.newKey)
  return _internal_newkey();
}
inline void CreateNewBackupRequest::set_newkey(const std::string& value) {
  _internal_set_newkey(value);
  // @@protoc_insertion_point(field_set:backup.CreateNewBackupRequest.newKey)
}
inline std::string* CreateNewBackupRequest::mutable_newkey() {
  // @@protoc_insertion_point(field_mutable:backup.CreateNewBackupRequest.newKey)
  return _internal_mutable_newkey();
}
inline const std::string& CreateNewBackupRequest::_internal_newkey() const {
  if (_internal_has_newkey()) {
    return data_.newkey_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CreateNewBackupRequest::_internal_set_newkey(const std::string& value) {
  if (!_internal_has_newkey()) {
    clear_data();
    set_has_newkey();
    data_.newkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.newkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateNewBackupRequest::set_newkey(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.CreateNewBackupRequest.newKey)
  if (!_internal_has_newkey()) {
    clear_data();
    set_has_newkey();
    data_.newkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.newkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.CreateNewBackupRequest.newKey)
}
inline void CreateNewBackupRequest::set_newkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_newkey()) {
    clear_data();
    set_has_newkey();
    data_.newkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.newkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.CreateNewBackupRequest.newKey)
}
inline void CreateNewBackupRequest::set_newkey(const void* value,
                             size_t size) {
  if (!_internal_has_newkey()) {
    clear_data();
    set_has_newkey();
    data_.newkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.newkey_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.CreateNewBackupRequest.newKey)
}
inline std::string* CreateNewBackupRequest::_internal_mutable_newkey() {
  if (!_internal_has_newkey()) {
    clear_data();
    set_has_newkey();
    data_.newkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.newkey_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateNewBackupRequest::release_newkey() {
  // @@protoc_insertion_point(field_release:backup.CreateNewBackupRequest.newKey)
  if (_internal_has_newkey()) {
    clear_has_data();
    return data_.newkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void CreateNewBackupRequest::set_allocated_newkey(std::string* newkey) {
  if (has_data()) {
    clear_data();
  }
  if (newkey != nullptr) {
    set_has_newkey();
    data_.newkey_.UnsafeSetDefault(newkey);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(newkey);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.CreateNewBackupRequest.newKey)
}

// bytes compactionChunk = 3;
inline bool CreateNewBackupRequest::_internal_has_compactionchunk() const {
  return data_case() == kCompactionChunk;
}
inline bool CreateNewBackupRequest::has_compactionchunk() const {
  return _internal_has_compactionchunk();
}
inline void CreateNewBackupRequest::set_has_compactionchunk() {
  _oneof_case_[0] = kCompactionChunk;
}
inline void CreateNewBackupRequest::clear_compactionchunk() {
  if (_internal_has_compactionchunk()) {
    data_.compactionchunk_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& CreateNewBackupRequest::compactionchunk() const {
  // @@protoc_insertion_point(field_get:backup.CreateNewBackupRequest.compactionChunk)
  return _internal_compactionchunk();
}
inline void CreateNewBackupRequest::set_compactionchunk(const std::string& value) {
  _internal_set_compactionchunk(value);
  // @@protoc_insertion_point(field_set:backup.CreateNewBackupRequest.compactionChunk)
}
inline std::string* CreateNewBackupRequest::mutable_compactionchunk() {
  // @@protoc_insertion_point(field_mutable:backup.CreateNewBackupRequest.compactionChunk)
  return _internal_mutable_compactionchunk();
}
inline const std::string& CreateNewBackupRequest::_internal_compactionchunk() const {
  if (_internal_has_compactionchunk()) {
    return data_.compactionchunk_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CreateNewBackupRequest::_internal_set_compactionchunk(const std::string& value) {
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateNewBackupRequest::set_compactionchunk(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.CreateNewBackupRequest.compactionChunk)
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.CreateNewBackupRequest.compactionChunk)
}
inline void CreateNewBackupRequest::set_compactionchunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.CreateNewBackupRequest.compactionChunk)
}
inline void CreateNewBackupRequest::set_compactionchunk(const void* value,
                             size_t size) {
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.CreateNewBackupRequest.compactionChunk)
}
inline std::string* CreateNewBackupRequest::_internal_mutable_compactionchunk() {
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.compactionchunk_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateNewBackupRequest::release_compactionchunk() {
  // @@protoc_insertion_point(field_release:backup.CreateNewBackupRequest.compactionChunk)
  if (_internal_has_compactionchunk()) {
    clear_has_data();
    return data_.compactionchunk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void CreateNewBackupRequest::set_allocated_compactionchunk(std::string* compactionchunk) {
  if (has_data()) {
    clear_data();
  }
  if (compactionchunk != nullptr) {
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(compactionchunk);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(compactionchunk);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.CreateNewBackupRequest.compactionChunk)
}

inline bool CreateNewBackupRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void CreateNewBackupRequest::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline CreateNewBackupRequest::DataCase CreateNewBackupRequest::data_case() const {
  return CreateNewBackupRequest::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SendLogRequest

// string userID = 1;
inline bool SendLogRequest::_internal_has_userid() const {
  return data_case() == kUserID;
}
inline bool SendLogRequest::has_userid() const {
  return _internal_has_userid();
}
inline void SendLogRequest::set_has_userid() {
  _oneof_case_[0] = kUserID;
}
inline void SendLogRequest::clear_userid() {
  if (_internal_has_userid()) {
    data_.userid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& SendLogRequest::userid() const {
  // @@protoc_insertion_point(field_get:backup.SendLogRequest.userID)
  return _internal_userid();
}
inline void SendLogRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.userID)
}
inline std::string* SendLogRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:backup.SendLogRequest.userID)
  return _internal_mutable_userid();
}
inline const std::string& SendLogRequest::_internal_userid() const {
  if (_internal_has_userid()) {
    return data_.userid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SendLogRequest::_internal_set_userid(const std::string& value) {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendLogRequest::set_userid(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.userID)
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.SendLogRequest.userID)
}
inline void SendLogRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.SendLogRequest.userID)
}
inline void SendLogRequest::set_userid(const char* value,
                             size_t size) {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.SendLogRequest.userID)
}
inline std::string* SendLogRequest::_internal_mutable_userid() {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.userid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendLogRequest::release_userid() {
  // @@protoc_insertion_point(field_release:backup.SendLogRequest.userID)
  if (_internal_has_userid()) {
    clear_has_data();
    return data_.userid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SendLogRequest::set_allocated_userid(std::string* userid) {
  if (has_data()) {
    clear_data();
  }
  if (userid != nullptr) {
    set_has_userid();
    data_.userid_.UnsafeSetDefault(userid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(userid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.SendLogRequest.userID)
}

// string backupID = 2;
inline bool SendLogRequest::_internal_has_backupid() const {
  return data_case() == kBackupID;
}
inline bool SendLogRequest::has_backupid() const {
  return _internal_has_backupid();
}
inline void SendLogRequest::set_has_backupid() {
  _oneof_case_[0] = kBackupID;
}
inline void SendLogRequest::clear_backupid() {
  if (_internal_has_backupid()) {
    data_.backupid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& SendLogRequest::backupid() const {
  // @@protoc_insertion_point(field_get:backup.SendLogRequest.backupID)
  return _internal_backupid();
}
inline void SendLogRequest::set_backupid(const std::string& value) {
  _internal_set_backupid(value);
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.backupID)
}
inline std::string* SendLogRequest::mutable_backupid() {
  // @@protoc_insertion_point(field_mutable:backup.SendLogRequest.backupID)
  return _internal_mutable_backupid();
}
inline const std::string& SendLogRequest::_internal_backupid() const {
  if (_internal_has_backupid()) {
    return data_.backupid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SendLogRequest::_internal_set_backupid(const std::string& value) {
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendLogRequest::set_backupid(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.backupID)
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.SendLogRequest.backupID)
}
inline void SendLogRequest::set_backupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.SendLogRequest.backupID)
}
inline void SendLogRequest::set_backupid(const char* value,
                             size_t size) {
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.SendLogRequest.backupID)
}
inline std::string* SendLogRequest::_internal_mutable_backupid() {
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.backupid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendLogRequest::release_backupid() {
  // @@protoc_insertion_point(field_release:backup.SendLogRequest.backupID)
  if (_internal_has_backupid()) {
    clear_has_data();
    return data_.backupid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SendLogRequest::set_allocated_backupid(std::string* backupid) {
  if (has_data()) {
    clear_data();
  }
  if (backupid != nullptr) {
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(backupid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(backupid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.SendLogRequest.backupID)
}

// bytes logData = 3;
inline bool SendLogRequest::_internal_has_logdata() const {
  return data_case() == kLogData;
}
inline bool SendLogRequest::has_logdata() const {
  return _internal_has_logdata();
}
inline void SendLogRequest::set_has_logdata() {
  _oneof_case_[0] = kLogData;
}
inline void SendLogRequest::clear_logdata() {
  if (_internal_has_logdata()) {
    data_.logdata_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& SendLogRequest::logdata() const {
  // @@protoc_insertion_point(field_get:backup.SendLogRequest.logData)
  return _internal_logdata();
}
inline void SendLogRequest::set_logdata(const std::string& value) {
  _internal_set_logdata(value);
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.logData)
}
inline std::string* SendLogRequest::mutable_logdata() {
  // @@protoc_insertion_point(field_mutable:backup.SendLogRequest.logData)
  return _internal_mutable_logdata();
}
inline const std::string& SendLogRequest::_internal_logdata() const {
  if (_internal_has_logdata()) {
    return data_.logdata_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SendLogRequest::_internal_set_logdata(const std::string& value) {
  if (!_internal_has_logdata()) {
    clear_data();
    set_has_logdata();
    data_.logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendLogRequest::set_logdata(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.logData)
  if (!_internal_has_logdata()) {
    clear_data();
    set_has_logdata();
    data_.logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.SendLogRequest.logData)
}
inline void SendLogRequest::set_logdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_logdata()) {
    clear_data();
    set_has_logdata();
    data_.logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.SendLogRequest.logData)
}
inline void SendLogRequest::set_logdata(const void* value,
                             size_t size) {
  if (!_internal_has_logdata()) {
    clear_data();
    set_has_logdata();
    data_.logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logdata_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.SendLogRequest.logData)
}
inline std::string* SendLogRequest::_internal_mutable_logdata() {
  if (!_internal_has_logdata()) {
    clear_data();
    set_has_logdata();
    data_.logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.logdata_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendLogRequest::release_logdata() {
  // @@protoc_insertion_point(field_release:backup.SendLogRequest.logData)
  if (_internal_has_logdata()) {
    clear_has_data();
    return data_.logdata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SendLogRequest::set_allocated_logdata(std::string* logdata) {
  if (has_data()) {
    clear_data();
  }
  if (logdata != nullptr) {
    set_has_logdata();
    data_.logdata_.UnsafeSetDefault(logdata);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(logdata);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.SendLogRequest.logData)
}

inline bool SendLogRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void SendLogRequest::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline SendLogRequest::DataCase SendLogRequest::data_case() const {
  return SendLogRequest::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PullBackupKeyRequest

// string userID = 1;
inline bool PullBackupKeyRequest::_internal_has_userid() const {
  return data_case() == kUserID;
}
inline bool PullBackupKeyRequest::has_userid() const {
  return _internal_has_userid();
}
inline void PullBackupKeyRequest::set_has_userid() {
  _oneof_case_[0] = kUserID;
}
inline void PullBackupKeyRequest::clear_userid() {
  if (_internal_has_userid()) {
    data_.userid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PullBackupKeyRequest::userid() const {
  // @@protoc_insertion_point(field_get:backup.PullBackupKeyRequest.userID)
  return _internal_userid();
}
inline void PullBackupKeyRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:backup.PullBackupKeyRequest.userID)
}
inline std::string* PullBackupKeyRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:backup.PullBackupKeyRequest.userID)
  return _internal_mutable_userid();
}
inline const std::string& PullBackupKeyRequest::_internal_userid() const {
  if (_internal_has_userid()) {
    return data_.userid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PullBackupKeyRequest::_internal_set_userid(const std::string& value) {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullBackupKeyRequest::set_userid(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.PullBackupKeyRequest.userID)
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.PullBackupKeyRequest.userID)
}
inline void PullBackupKeyRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.PullBackupKeyRequest.userID)
}
inline void PullBackupKeyRequest::set_userid(const char* value,
                             size_t size) {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.PullBackupKeyRequest.userID)
}
inline std::string* PullBackupKeyRequest::_internal_mutable_userid() {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.userid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullBackupKeyRequest::release_userid() {
  // @@protoc_insertion_point(field_release:backup.PullBackupKeyRequest.userID)
  if (_internal_has_userid()) {
    clear_has_data();
    return data_.userid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PullBackupKeyRequest::set_allocated_userid(std::string* userid) {
  if (has_data()) {
    clear_data();
  }
  if (userid != nullptr) {
    set_has_userid();
    data_.userid_.UnsafeSetDefault(userid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(userid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.PullBackupKeyRequest.userID)
}

// string backupID = 2;
inline bool PullBackupKeyRequest::_internal_has_backupid() const {
  return data_case() == kBackupID;
}
inline bool PullBackupKeyRequest::has_backupid() const {
  return _internal_has_backupid();
}
inline void PullBackupKeyRequest::set_has_backupid() {
  _oneof_case_[0] = kBackupID;
}
inline void PullBackupKeyRequest::clear_backupid() {
  if (_internal_has_backupid()) {
    data_.backupid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PullBackupKeyRequest::backupid() const {
  // @@protoc_insertion_point(field_get:backup.PullBackupKeyRequest.backupID)
  return _internal_backupid();
}
inline void PullBackupKeyRequest::set_backupid(const std::string& value) {
  _internal_set_backupid(value);
  // @@protoc_insertion_point(field_set:backup.PullBackupKeyRequest.backupID)
}
inline std::string* PullBackupKeyRequest::mutable_backupid() {
  // @@protoc_insertion_point(field_mutable:backup.PullBackupKeyRequest.backupID)
  return _internal_mutable_backupid();
}
inline const std::string& PullBackupKeyRequest::_internal_backupid() const {
  if (_internal_has_backupid()) {
    return data_.backupid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PullBackupKeyRequest::_internal_set_backupid(const std::string& value) {
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullBackupKeyRequest::set_backupid(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.PullBackupKeyRequest.backupID)
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.PullBackupKeyRequest.backupID)
}
inline void PullBackupKeyRequest::set_backupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.PullBackupKeyRequest.backupID)
}
inline void PullBackupKeyRequest::set_backupid(const char* value,
                             size_t size) {
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.PullBackupKeyRequest.backupID)
}
inline std::string* PullBackupKeyRequest::_internal_mutable_backupid() {
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.backupid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullBackupKeyRequest::release_backupid() {
  // @@protoc_insertion_point(field_release:backup.PullBackupKeyRequest.backupID)
  if (_internal_has_backupid()) {
    clear_has_data();
    return data_.backupid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PullBackupKeyRequest::set_allocated_backupid(std::string* backupid) {
  if (has_data()) {
    clear_data();
  }
  if (backupid != nullptr) {
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(backupid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(backupid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.PullBackupKeyRequest.backupID)
}

// bytes requestBytes = 3;
inline bool PullBackupKeyRequest::_internal_has_requestbytes() const {
  return data_case() == kRequestBytes;
}
inline bool PullBackupKeyRequest::has_requestbytes() const {
  return _internal_has_requestbytes();
}
inline void PullBackupKeyRequest::set_has_requestbytes() {
  _oneof_case_[0] = kRequestBytes;
}
inline void PullBackupKeyRequest::clear_requestbytes() {
  if (_internal_has_requestbytes()) {
    data_.requestbytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PullBackupKeyRequest::requestbytes() const {
  // @@protoc_insertion_point(field_get:backup.PullBackupKeyRequest.requestBytes)
  return _internal_requestbytes();
}
inline void PullBackupKeyRequest::set_requestbytes(const std::string& value) {
  _internal_set_requestbytes(value);
  // @@protoc_insertion_point(field_set:backup.PullBackupKeyRequest.requestBytes)
}
inline std::string* PullBackupKeyRequest::mutable_requestbytes() {
  // @@protoc_insertion_point(field_mutable:backup.PullBackupKeyRequest.requestBytes)
  return _internal_mutable_requestbytes();
}
inline const std::string& PullBackupKeyRequest::_internal_requestbytes() const {
  if (_internal_has_requestbytes()) {
    return data_.requestbytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PullBackupKeyRequest::_internal_set_requestbytes(const std::string& value) {
  if (!_internal_has_requestbytes()) {
    clear_data();
    set_has_requestbytes();
    data_.requestbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.requestbytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullBackupKeyRequest::set_requestbytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.PullBackupKeyRequest.requestBytes)
  if (!_internal_has_requestbytes()) {
    clear_data();
    set_has_requestbytes();
    data_.requestbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.requestbytes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.PullBackupKeyRequest.requestBytes)
}
inline void PullBackupKeyRequest::set_requestbytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_requestbytes()) {
    clear_data();
    set_has_requestbytes();
    data_.requestbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.requestbytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.PullBackupKeyRequest.requestBytes)
}
inline void PullBackupKeyRequest::set_requestbytes(const void* value,
                             size_t size) {
  if (!_internal_has_requestbytes()) {
    clear_data();
    set_has_requestbytes();
    data_.requestbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.requestbytes_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.PullBackupKeyRequest.requestBytes)
}
inline std::string* PullBackupKeyRequest::_internal_mutable_requestbytes() {
  if (!_internal_has_requestbytes()) {
    clear_data();
    set_has_requestbytes();
    data_.requestbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.requestbytes_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullBackupKeyRequest::release_requestbytes() {
  // @@protoc_insertion_point(field_release:backup.PullBackupKeyRequest.requestBytes)
  if (_internal_has_requestbytes()) {
    clear_has_data();
    return data_.requestbytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PullBackupKeyRequest::set_allocated_requestbytes(std::string* requestbytes) {
  if (has_data()) {
    clear_data();
  }
  if (requestbytes != nullptr) {
    set_has_requestbytes();
    data_.requestbytes_.UnsafeSetDefault(requestbytes);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(requestbytes);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.PullBackupKeyRequest.requestBytes)
}

inline bool PullBackupKeyRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void PullBackupKeyRequest::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline PullBackupKeyRequest::DataCase PullBackupKeyRequest::data_case() const {
  return PullBackupKeyRequest::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PullBackupKeyResponse

// bytes responseBytes = 1;
inline bool PullBackupKeyResponse::_internal_has_responsebytes() const {
  return data_case() == kResponseBytes;
}
inline bool PullBackupKeyResponse::has_responsebytes() const {
  return _internal_has_responsebytes();
}
inline void PullBackupKeyResponse::set_has_responsebytes() {
  _oneof_case_[0] = kResponseBytes;
}
inline void PullBackupKeyResponse::clear_responsebytes() {
  if (_internal_has_responsebytes()) {
    data_.responsebytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PullBackupKeyResponse::responsebytes() const {
  // @@protoc_insertion_point(field_get:backup.PullBackupKeyResponse.responseBytes)
  return _internal_responsebytes();
}
inline void PullBackupKeyResponse::set_responsebytes(const std::string& value) {
  _internal_set_responsebytes(value);
  // @@protoc_insertion_point(field_set:backup.PullBackupKeyResponse.responseBytes)
}
inline std::string* PullBackupKeyResponse::mutable_responsebytes() {
  // @@protoc_insertion_point(field_mutable:backup.PullBackupKeyResponse.responseBytes)
  return _internal_mutable_responsebytes();
}
inline const std::string& PullBackupKeyResponse::_internal_responsebytes() const {
  if (_internal_has_responsebytes()) {
    return data_.responsebytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PullBackupKeyResponse::_internal_set_responsebytes(const std::string& value) {
  if (!_internal_has_responsebytes()) {
    clear_data();
    set_has_responsebytes();
    data_.responsebytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.responsebytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullBackupKeyResponse::set_responsebytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.PullBackupKeyResponse.responseBytes)
  if (!_internal_has_responsebytes()) {
    clear_data();
    set_has_responsebytes();
    data_.responsebytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.responsebytes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.PullBackupKeyResponse.responseBytes)
}
inline void PullBackupKeyResponse::set_responsebytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_responsebytes()) {
    clear_data();
    set_has_responsebytes();
    data_.responsebytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.responsebytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.PullBackupKeyResponse.responseBytes)
}
inline void PullBackupKeyResponse::set_responsebytes(const void* value,
                             size_t size) {
  if (!_internal_has_responsebytes()) {
    clear_data();
    set_has_responsebytes();
    data_.responsebytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.responsebytes_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.PullBackupKeyResponse.responseBytes)
}
inline std::string* PullBackupKeyResponse::_internal_mutable_responsebytes() {
  if (!_internal_has_responsebytes()) {
    clear_data();
    set_has_responsebytes();
    data_.responsebytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.responsebytes_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullBackupKeyResponse::release_responsebytes() {
  // @@protoc_insertion_point(field_release:backup.PullBackupKeyResponse.responseBytes)
  if (_internal_has_responsebytes()) {
    clear_has_data();
    return data_.responsebytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PullBackupKeyResponse::set_allocated_responsebytes(std::string* responsebytes) {
  if (has_data()) {
    clear_data();
  }
  if (responsebytes != nullptr) {
    set_has_responsebytes();
    data_.responsebytes_.UnsafeSetDefault(responsebytes);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(responsebytes);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.PullBackupKeyResponse.responseBytes)
}

// bytes encryptedBackupKey = 2;
inline bool PullBackupKeyResponse::_internal_has_encryptedbackupkey() const {
  return data_case() == kEncryptedBackupKey;
}
inline bool PullBackupKeyResponse::has_encryptedbackupkey() const {
  return _internal_has_encryptedbackupkey();
}
inline void PullBackupKeyResponse::set_has_encryptedbackupkey() {
  _oneof_case_[0] = kEncryptedBackupKey;
}
inline void PullBackupKeyResponse::clear_encryptedbackupkey() {
  if (_internal_has_encryptedbackupkey()) {
    data_.encryptedbackupkey_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PullBackupKeyResponse::encryptedbackupkey() const {
  // @@protoc_insertion_point(field_get:backup.PullBackupKeyResponse.encryptedBackupKey)
  return _internal_encryptedbackupkey();
}
inline void PullBackupKeyResponse::set_encryptedbackupkey(const std::string& value) {
  _internal_set_encryptedbackupkey(value);
  // @@protoc_insertion_point(field_set:backup.PullBackupKeyResponse.encryptedBackupKey)
}
inline std::string* PullBackupKeyResponse::mutable_encryptedbackupkey() {
  // @@protoc_insertion_point(field_mutable:backup.PullBackupKeyResponse.encryptedBackupKey)
  return _internal_mutable_encryptedbackupkey();
}
inline const std::string& PullBackupKeyResponse::_internal_encryptedbackupkey() const {
  if (_internal_has_encryptedbackupkey()) {
    return data_.encryptedbackupkey_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PullBackupKeyResponse::_internal_set_encryptedbackupkey(const std::string& value) {
  if (!_internal_has_encryptedbackupkey()) {
    clear_data();
    set_has_encryptedbackupkey();
    data_.encryptedbackupkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encryptedbackupkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullBackupKeyResponse::set_encryptedbackupkey(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.PullBackupKeyResponse.encryptedBackupKey)
  if (!_internal_has_encryptedbackupkey()) {
    clear_data();
    set_has_encryptedbackupkey();
    data_.encryptedbackupkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encryptedbackupkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.PullBackupKeyResponse.encryptedBackupKey)
}
inline void PullBackupKeyResponse::set_encryptedbackupkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_encryptedbackupkey()) {
    clear_data();
    set_has_encryptedbackupkey();
    data_.encryptedbackupkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encryptedbackupkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.PullBackupKeyResponse.encryptedBackupKey)
}
inline void PullBackupKeyResponse::set_encryptedbackupkey(const void* value,
                             size_t size) {
  if (!_internal_has_encryptedbackupkey()) {
    clear_data();
    set_has_encryptedbackupkey();
    data_.encryptedbackupkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.encryptedbackupkey_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.PullBackupKeyResponse.encryptedBackupKey)
}
inline std::string* PullBackupKeyResponse::_internal_mutable_encryptedbackupkey() {
  if (!_internal_has_encryptedbackupkey()) {
    clear_data();
    set_has_encryptedbackupkey();
    data_.encryptedbackupkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.encryptedbackupkey_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullBackupKeyResponse::release_encryptedbackupkey() {
  // @@protoc_insertion_point(field_release:backup.PullBackupKeyResponse.encryptedBackupKey)
  if (_internal_has_encryptedbackupkey()) {
    clear_has_data();
    return data_.encryptedbackupkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PullBackupKeyResponse::set_allocated_encryptedbackupkey(std::string* encryptedbackupkey) {
  if (has_data()) {
    clear_data();
  }
  if (encryptedbackupkey != nullptr) {
    set_has_encryptedbackupkey();
    data_.encryptedbackupkey_.UnsafeSetDefault(encryptedbackupkey);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(encryptedbackupkey);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.PullBackupKeyResponse.encryptedBackupKey)
}

inline bool PullBackupKeyResponse::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void PullBackupKeyResponse::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline PullBackupKeyResponse::DataCase PullBackupKeyResponse::data_case() const {
  return PullBackupKeyResponse::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PullCompactionRequest

// string userID = 1;
inline bool PullCompactionRequest::_internal_has_userid() const {
  return data_case() == kUserID;
}
inline bool PullCompactionRequest::has_userid() const {
  return _internal_has_userid();
}
inline void PullCompactionRequest::set_has_userid() {
  _oneof_case_[0] = kUserID;
}
inline void PullCompactionRequest::clear_userid() {
  if (_internal_has_userid()) {
    data_.userid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PullCompactionRequest::userid() const {
  // @@protoc_insertion_point(field_get:backup.PullCompactionRequest.userID)
  return _internal_userid();
}
inline void PullCompactionRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:backup.PullCompactionRequest.userID)
}
inline std::string* PullCompactionRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:backup.PullCompactionRequest.userID)
  return _internal_mutable_userid();
}
inline const std::string& PullCompactionRequest::_internal_userid() const {
  if (_internal_has_userid()) {
    return data_.userid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PullCompactionRequest::_internal_set_userid(const std::string& value) {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullCompactionRequest::set_userid(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.PullCompactionRequest.userID)
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.PullCompactionRequest.userID)
}
inline void PullCompactionRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.PullCompactionRequest.userID)
}
inline void PullCompactionRequest::set_userid(const char* value,
                             size_t size) {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.userid_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.PullCompactionRequest.userID)
}
inline std::string* PullCompactionRequest::_internal_mutable_userid() {
  if (!_internal_has_userid()) {
    clear_data();
    set_has_userid();
    data_.userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.userid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullCompactionRequest::release_userid() {
  // @@protoc_insertion_point(field_release:backup.PullCompactionRequest.userID)
  if (_internal_has_userid()) {
    clear_has_data();
    return data_.userid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PullCompactionRequest::set_allocated_userid(std::string* userid) {
  if (has_data()) {
    clear_data();
  }
  if (userid != nullptr) {
    set_has_userid();
    data_.userid_.UnsafeSetDefault(userid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(userid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.PullCompactionRequest.userID)
}

// string backupID = 2;
inline bool PullCompactionRequest::_internal_has_backupid() const {
  return data_case() == kBackupID;
}
inline bool PullCompactionRequest::has_backupid() const {
  return _internal_has_backupid();
}
inline void PullCompactionRequest::set_has_backupid() {
  _oneof_case_[0] = kBackupID;
}
inline void PullCompactionRequest::clear_backupid() {
  if (_internal_has_backupid()) {
    data_.backupid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PullCompactionRequest::backupid() const {
  // @@protoc_insertion_point(field_get:backup.PullCompactionRequest.backupID)
  return _internal_backupid();
}
inline void PullCompactionRequest::set_backupid(const std::string& value) {
  _internal_set_backupid(value);
  // @@protoc_insertion_point(field_set:backup.PullCompactionRequest.backupID)
}
inline std::string* PullCompactionRequest::mutable_backupid() {
  // @@protoc_insertion_point(field_mutable:backup.PullCompactionRequest.backupID)
  return _internal_mutable_backupid();
}
inline const std::string& PullCompactionRequest::_internal_backupid() const {
  if (_internal_has_backupid()) {
    return data_.backupid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PullCompactionRequest::_internal_set_backupid(const std::string& value) {
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullCompactionRequest::set_backupid(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.PullCompactionRequest.backupID)
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.PullCompactionRequest.backupID)
}
inline void PullCompactionRequest::set_backupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.PullCompactionRequest.backupID)
}
inline void PullCompactionRequest::set_backupid(const char* value,
                             size_t size) {
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.backupid_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.PullCompactionRequest.backupID)
}
inline std::string* PullCompactionRequest::_internal_mutable_backupid() {
  if (!_internal_has_backupid()) {
    clear_data();
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.backupid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullCompactionRequest::release_backupid() {
  // @@protoc_insertion_point(field_release:backup.PullCompactionRequest.backupID)
  if (_internal_has_backupid()) {
    clear_has_data();
    return data_.backupid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PullCompactionRequest::set_allocated_backupid(std::string* backupid) {
  if (has_data()) {
    clear_data();
  }
  if (backupid != nullptr) {
    set_has_backupid();
    data_.backupid_.UnsafeSetDefault(backupid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(backupid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.PullCompactionRequest.backupID)
}

// bytes requestBytes = 3;
inline bool PullCompactionRequest::_internal_has_requestbytes() const {
  return data_case() == kRequestBytes;
}
inline bool PullCompactionRequest::has_requestbytes() const {
  return _internal_has_requestbytes();
}
inline void PullCompactionRequest::set_has_requestbytes() {
  _oneof_case_[0] = kRequestBytes;
}
inline void PullCompactionRequest::clear_requestbytes() {
  if (_internal_has_requestbytes()) {
    data_.requestbytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PullCompactionRequest::requestbytes() const {
  // @@protoc_insertion_point(field_get:backup.PullCompactionRequest.requestBytes)
  return _internal_requestbytes();
}
inline void PullCompactionRequest::set_requestbytes(const std::string& value) {
  _internal_set_requestbytes(value);
  // @@protoc_insertion_point(field_set:backup.PullCompactionRequest.requestBytes)
}
inline std::string* PullCompactionRequest::mutable_requestbytes() {
  // @@protoc_insertion_point(field_mutable:backup.PullCompactionRequest.requestBytes)
  return _internal_mutable_requestbytes();
}
inline const std::string& PullCompactionRequest::_internal_requestbytes() const {
  if (_internal_has_requestbytes()) {
    return data_.requestbytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PullCompactionRequest::_internal_set_requestbytes(const std::string& value) {
  if (!_internal_has_requestbytes()) {
    clear_data();
    set_has_requestbytes();
    data_.requestbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.requestbytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullCompactionRequest::set_requestbytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.PullCompactionRequest.requestBytes)
  if (!_internal_has_requestbytes()) {
    clear_data();
    set_has_requestbytes();
    data_.requestbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.requestbytes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.PullCompactionRequest.requestBytes)
}
inline void PullCompactionRequest::set_requestbytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_requestbytes()) {
    clear_data();
    set_has_requestbytes();
    data_.requestbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.requestbytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.PullCompactionRequest.requestBytes)
}
inline void PullCompactionRequest::set_requestbytes(const void* value,
                             size_t size) {
  if (!_internal_has_requestbytes()) {
    clear_data();
    set_has_requestbytes();
    data_.requestbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.requestbytes_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.PullCompactionRequest.requestBytes)
}
inline std::string* PullCompactionRequest::_internal_mutable_requestbytes() {
  if (!_internal_has_requestbytes()) {
    clear_data();
    set_has_requestbytes();
    data_.requestbytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.requestbytes_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullCompactionRequest::release_requestbytes() {
  // @@protoc_insertion_point(field_release:backup.PullCompactionRequest.requestBytes)
  if (_internal_has_requestbytes()) {
    clear_has_data();
    return data_.requestbytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PullCompactionRequest::set_allocated_requestbytes(std::string* requestbytes) {
  if (has_data()) {
    clear_data();
  }
  if (requestbytes != nullptr) {
    set_has_requestbytes();
    data_.requestbytes_.UnsafeSetDefault(requestbytes);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(requestbytes);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.PullCompactionRequest.requestBytes)
}

inline bool PullCompactionRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void PullCompactionRequest::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline PullCompactionRequest::DataCase PullCompactionRequest::data_case() const {
  return PullCompactionRequest::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PullCompactionResponse

// bytes responseBytes = 1;
inline bool PullCompactionResponse::_internal_has_responsebytes() const {
  return data_case() == kResponseBytes;
}
inline bool PullCompactionResponse::has_responsebytes() const {
  return _internal_has_responsebytes();
}
inline void PullCompactionResponse::set_has_responsebytes() {
  _oneof_case_[0] = kResponseBytes;
}
inline void PullCompactionResponse::clear_responsebytes() {
  if (_internal_has_responsebytes()) {
    data_.responsebytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PullCompactionResponse::responsebytes() const {
  // @@protoc_insertion_point(field_get:backup.PullCompactionResponse.responseBytes)
  return _internal_responsebytes();
}
inline void PullCompactionResponse::set_responsebytes(const std::string& value) {
  _internal_set_responsebytes(value);
  // @@protoc_insertion_point(field_set:backup.PullCompactionResponse.responseBytes)
}
inline std::string* PullCompactionResponse::mutable_responsebytes() {
  // @@protoc_insertion_point(field_mutable:backup.PullCompactionResponse.responseBytes)
  return _internal_mutable_responsebytes();
}
inline const std::string& PullCompactionResponse::_internal_responsebytes() const {
  if (_internal_has_responsebytes()) {
    return data_.responsebytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PullCompactionResponse::_internal_set_responsebytes(const std::string& value) {
  if (!_internal_has_responsebytes()) {
    clear_data();
    set_has_responsebytes();
    data_.responsebytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.responsebytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullCompactionResponse::set_responsebytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.PullCompactionResponse.responseBytes)
  if (!_internal_has_responsebytes()) {
    clear_data();
    set_has_responsebytes();
    data_.responsebytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.responsebytes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.PullCompactionResponse.responseBytes)
}
inline void PullCompactionResponse::set_responsebytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_responsebytes()) {
    clear_data();
    set_has_responsebytes();
    data_.responsebytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.responsebytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.PullCompactionResponse.responseBytes)
}
inline void PullCompactionResponse::set_responsebytes(const void* value,
                             size_t size) {
  if (!_internal_has_responsebytes()) {
    clear_data();
    set_has_responsebytes();
    data_.responsebytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.responsebytes_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.PullCompactionResponse.responseBytes)
}
inline std::string* PullCompactionResponse::_internal_mutable_responsebytes() {
  if (!_internal_has_responsebytes()) {
    clear_data();
    set_has_responsebytes();
    data_.responsebytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.responsebytes_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullCompactionResponse::release_responsebytes() {
  // @@protoc_insertion_point(field_release:backup.PullCompactionResponse.responseBytes)
  if (_internal_has_responsebytes()) {
    clear_has_data();
    return data_.responsebytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PullCompactionResponse::set_allocated_responsebytes(std::string* responsebytes) {
  if (has_data()) {
    clear_data();
  }
  if (responsebytes != nullptr) {
    set_has_responsebytes();
    data_.responsebytes_.UnsafeSetDefault(responsebytes);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(responsebytes);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.PullCompactionResponse.responseBytes)
}

// bytes compactionChunk = 2;
inline bool PullCompactionResponse::_internal_has_compactionchunk() const {
  return data_case() == kCompactionChunk;
}
inline bool PullCompactionResponse::has_compactionchunk() const {
  return _internal_has_compactionchunk();
}
inline void PullCompactionResponse::set_has_compactionchunk() {
  _oneof_case_[0] = kCompactionChunk;
}
inline void PullCompactionResponse::clear_compactionchunk() {
  if (_internal_has_compactionchunk()) {
    data_.compactionchunk_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PullCompactionResponse::compactionchunk() const {
  // @@protoc_insertion_point(field_get:backup.PullCompactionResponse.compactionChunk)
  return _internal_compactionchunk();
}
inline void PullCompactionResponse::set_compactionchunk(const std::string& value) {
  _internal_set_compactionchunk(value);
  // @@protoc_insertion_point(field_set:backup.PullCompactionResponse.compactionChunk)
}
inline std::string* PullCompactionResponse::mutable_compactionchunk() {
  // @@protoc_insertion_point(field_mutable:backup.PullCompactionResponse.compactionChunk)
  return _internal_mutable_compactionchunk();
}
inline const std::string& PullCompactionResponse::_internal_compactionchunk() const {
  if (_internal_has_compactionchunk()) {
    return data_.compactionchunk_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PullCompactionResponse::_internal_set_compactionchunk(const std::string& value) {
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullCompactionResponse::set_compactionchunk(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.PullCompactionResponse.compactionChunk)
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.PullCompactionResponse.compactionChunk)
}
inline void PullCompactionResponse::set_compactionchunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.PullCompactionResponse.compactionChunk)
}
inline void PullCompactionResponse::set_compactionchunk(const void* value,
                             size_t size) {
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.PullCompactionResponse.compactionChunk)
}
inline std::string* PullCompactionResponse::_internal_mutable_compactionchunk() {
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.compactionchunk_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullCompactionResponse::release_compactionchunk() {
  // @@protoc_insertion_point(field_release:backup.PullCompactionResponse.compactionChunk)
  if (_internal_has_compactionchunk()) {
    clear_has_data();
    return data_.compactionchunk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PullCompactionResponse::set_allocated_compactionchunk(std::string* compactionchunk) {
  if (has_data()) {
    clear_data();
  }
  if (compactionchunk != nullptr) {
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(compactionchunk);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(compactionchunk);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.PullCompactionResponse.compactionChunk)
}

// bytes logChunk = 3;
inline bool PullCompactionResponse::_internal_has_logchunk() const {
  return data_case() == kLogChunk;
}
inline bool PullCompactionResponse::has_logchunk() const {
  return _internal_has_logchunk();
}
inline void PullCompactionResponse::set_has_logchunk() {
  _oneof_case_[0] = kLogChunk;
}
inline void PullCompactionResponse::clear_logchunk() {
  if (_internal_has_logchunk()) {
    data_.logchunk_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PullCompactionResponse::logchunk() const {
  // @@protoc_insertion_point(field_get:backup.PullCompactionResponse.logChunk)
  return _internal_logchunk();
}
inline void PullCompactionResponse::set_logchunk(const std::string& value) {
  _internal_set_logchunk(value);
  // @@protoc_insertion_point(field_set:backup.PullCompactionResponse.logChunk)
}
inline std::string* PullCompactionResponse::mutable_logchunk() {
  // @@protoc_insertion_point(field_mutable:backup.PullCompactionResponse.logChunk)
  return _internal_mutable_logchunk();
}
inline const std::string& PullCompactionResponse::_internal_logchunk() const {
  if (_internal_has_logchunk()) {
    return data_.logchunk_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PullCompactionResponse::_internal_set_logchunk(const std::string& value) {
  if (!_internal_has_logchunk()) {
    clear_data();
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logchunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PullCompactionResponse::set_logchunk(std::string&& value) {
  // @@protoc_insertion_point(field_set:backup.PullCompactionResponse.logChunk)
  if (!_internal_has_logchunk()) {
    clear_data();
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logchunk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:backup.PullCompactionResponse.logChunk)
}
inline void PullCompactionResponse::set_logchunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_logchunk()) {
    clear_data();
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logchunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:backup.PullCompactionResponse.logChunk)
}
inline void PullCompactionResponse::set_logchunk(const void* value,
                             size_t size) {
  if (!_internal_has_logchunk()) {
    clear_data();
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logchunk_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:backup.PullCompactionResponse.logChunk)
}
inline std::string* PullCompactionResponse::_internal_mutable_logchunk() {
  if (!_internal_has_logchunk()) {
    clear_data();
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.logchunk_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PullCompactionResponse::release_logchunk() {
  // @@protoc_insertion_point(field_release:backup.PullCompactionResponse.logChunk)
  if (_internal_has_logchunk()) {
    clear_has_data();
    return data_.logchunk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PullCompactionResponse::set_allocated_logchunk(std::string* logchunk) {
  if (has_data()) {
    clear_data();
  }
  if (logchunk != nullptr) {
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(logchunk);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(logchunk);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.PullCompactionResponse.logChunk)
}

inline bool PullCompactionResponse::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void PullCompactionResponse::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline PullCompactionResponse::DataCase PullCompactionResponse::data_case() const {
  return PullCompactionResponse::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace backup

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_backup_2eproto
