// @generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backup.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_backup_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_backup_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_backup_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_backup_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backup_2eproto;
namespace backup {
class PullBackupKeyRequest;
struct PullBackupKeyRequestDefaultTypeInternal;
extern PullBackupKeyRequestDefaultTypeInternal _PullBackupKeyRequest_default_instance_;
class PullBackupKeyResponse;
struct PullBackupKeyResponseDefaultTypeInternal;
extern PullBackupKeyResponseDefaultTypeInternal _PullBackupKeyResponse_default_instance_;
class PullCompactionRequest;
struct PullCompactionRequestDefaultTypeInternal;
extern PullCompactionRequestDefaultTypeInternal _PullCompactionRequest_default_instance_;
class PullCompactionResponse;
struct PullCompactionResponseDefaultTypeInternal;
extern PullCompactionResponseDefaultTypeInternal _PullCompactionResponse_default_instance_;
class ResetKeyRequest;
struct ResetKeyRequestDefaultTypeInternal;
extern ResetKeyRequestDefaultTypeInternal _ResetKeyRequest_default_instance_;
class SendLogRequest;
struct SendLogRequestDefaultTypeInternal;
extern SendLogRequestDefaultTypeInternal _SendLogRequest_default_instance_;
}  // namespace backup
PROTOBUF_NAMESPACE_OPEN
template<> ::backup::PullBackupKeyRequest* Arena::CreateMaybeMessage<::backup::PullBackupKeyRequest>(Arena*);
template<> ::backup::PullBackupKeyResponse* Arena::CreateMaybeMessage<::backup::PullBackupKeyResponse>(Arena*);
template<> ::backup::PullCompactionRequest* Arena::CreateMaybeMessage<::backup::PullCompactionRequest>(Arena*);
template<> ::backup::PullCompactionResponse* Arena::CreateMaybeMessage<::backup::PullCompactionResponse>(Arena*);
template<> ::backup::ResetKeyRequest* Arena::CreateMaybeMessage<::backup::ResetKeyRequest>(Arena*);
template<> ::backup::SendLogRequest* Arena::CreateMaybeMessage<::backup::SendLogRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace backup {

// ===================================================================

class ResetKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.ResetKeyRequest) */ {
 public:
  inline ResetKeyRequest() : ResetKeyRequest(nullptr) {}
  ~ResetKeyRequest() override;
  explicit constexpr ResetKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetKeyRequest(const ResetKeyRequest& from);
  ResetKeyRequest(ResetKeyRequest&& from) noexcept
    : ResetKeyRequest() {
    *this = ::std::move(from);
  }

  inline ResetKeyRequest& operator=(const ResetKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetKeyRequest& operator=(ResetKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kNewKey = 2,
    kCompactionChunk = 3,
    DATA_NOT_SET = 0,
  };

  static inline const ResetKeyRequest* internal_default_instance() {
    return reinterpret_cast<const ResetKeyRequest*>(
               &_ResetKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResetKeyRequest& a, ResetKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResetKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResetKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResetKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResetKeyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.ResetKeyRequest";
  }
  protected:
  explicit ResetKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kNewKeyFieldNumber = 2,
    kCompactionChunkFieldNumber = 3,
  };
  // string userId = 1;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // bytes newKey = 2;
  bool has_newkey() const;
  private:
  bool _internal_has_newkey() const;
  public:
  void clear_newkey();
  const std::string& newkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newkey();
  PROTOBUF_NODISCARD std::string* release_newkey();
  void set_allocated_newkey(std::string* newkey);
  private:
  const std::string& _internal_newkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newkey(const std::string& value);
  std::string* _internal_mutable_newkey();
  public:

  // bytes compactionChunk = 3;
  bool has_compactionchunk() const;
  private:
  bool _internal_has_compactionchunk() const;
  public:
  void clear_compactionchunk();
  const std::string& compactionchunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compactionchunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compactionchunk();
  PROTOBUF_NODISCARD std::string* release_compactionchunk();
  void set_allocated_compactionchunk(std::string* compactionchunk);
  private:
  const std::string& _internal_compactionchunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compactionchunk(const std::string& value);
  std::string* _internal_mutable_compactionchunk();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:backup.ResetKeyRequest)
 private:
  class _Internal;
  void set_has_newkey();
  void set_has_compactionchunk();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compactionchunk_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class SendLogRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.SendLogRequest) */ {
 public:
  inline SendLogRequest() : SendLogRequest(nullptr) {}
  ~SendLogRequest() override;
  explicit constexpr SendLogRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendLogRequest(const SendLogRequest& from);
  SendLogRequest(SendLogRequest&& from) noexcept
    : SendLogRequest() {
    *this = ::std::move(from);
  }

  inline SendLogRequest& operator=(const SendLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendLogRequest& operator=(SendLogRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendLogRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendLogRequest* internal_default_instance() {
    return reinterpret_cast<const SendLogRequest*>(
               &_SendLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendLogRequest& a, SendLogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendLogRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendLogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendLogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendLogRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendLogRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendLogRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendLogRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.SendLogRequest";
  }
  protected:
  explicit SendLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:backup.SendLogRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class PullBackupKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.PullBackupKeyRequest) */ {
 public:
  inline PullBackupKeyRequest() : PullBackupKeyRequest(nullptr) {}
  ~PullBackupKeyRequest() override;
  explicit constexpr PullBackupKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullBackupKeyRequest(const PullBackupKeyRequest& from);
  PullBackupKeyRequest(PullBackupKeyRequest&& from) noexcept
    : PullBackupKeyRequest() {
    *this = ::std::move(from);
  }

  inline PullBackupKeyRequest& operator=(const PullBackupKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullBackupKeyRequest& operator=(PullBackupKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullBackupKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullBackupKeyRequest* internal_default_instance() {
    return reinterpret_cast<const PullBackupKeyRequest*>(
               &_PullBackupKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PullBackupKeyRequest& a, PullBackupKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullBackupKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullBackupKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullBackupKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullBackupKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullBackupKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PullBackupKeyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullBackupKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.PullBackupKeyRequest";
  }
  protected:
  explicit PullBackupKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kPakeKeyFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // bytes pakeKey = 2;
  void clear_pakekey();
  const std::string& pakekey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pakekey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pakekey();
  PROTOBUF_NODISCARD std::string* release_pakekey();
  void set_allocated_pakekey(std::string* pakekey);
  private:
  const std::string& _internal_pakekey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pakekey(const std::string& value);
  std::string* _internal_mutable_pakekey();
  public:

  // @@protoc_insertion_point(class_scope:backup.PullBackupKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pakekey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class PullBackupKeyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.PullBackupKeyResponse) */ {
 public:
  inline PullBackupKeyResponse() : PullBackupKeyResponse(nullptr) {}
  ~PullBackupKeyResponse() override;
  explicit constexpr PullBackupKeyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullBackupKeyResponse(const PullBackupKeyResponse& from);
  PullBackupKeyResponse(PullBackupKeyResponse&& from) noexcept
    : PullBackupKeyResponse() {
    *this = ::std::move(from);
  }

  inline PullBackupKeyResponse& operator=(const PullBackupKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullBackupKeyResponse& operator=(PullBackupKeyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullBackupKeyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullBackupKeyResponse* internal_default_instance() {
    return reinterpret_cast<const PullBackupKeyResponse*>(
               &_PullBackupKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PullBackupKeyResponse& a, PullBackupKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PullBackupKeyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullBackupKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullBackupKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullBackupKeyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullBackupKeyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PullBackupKeyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullBackupKeyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.PullBackupKeyResponse";
  }
  protected:
  explicit PullBackupKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedBackupKeyFieldNumber = 1,
  };
  // bytes encryptedBackupKey = 1;
  void clear_encryptedbackupkey();
  const std::string& encryptedbackupkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encryptedbackupkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encryptedbackupkey();
  PROTOBUF_NODISCARD std::string* release_encryptedbackupkey();
  void set_allocated_encryptedbackupkey(std::string* encryptedbackupkey);
  private:
  const std::string& _internal_encryptedbackupkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encryptedbackupkey(const std::string& value);
  std::string* _internal_mutable_encryptedbackupkey();
  public:

  // @@protoc_insertion_point(class_scope:backup.PullBackupKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryptedbackupkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class PullCompactionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.PullCompactionRequest) */ {
 public:
  inline PullCompactionRequest() : PullCompactionRequest(nullptr) {}
  ~PullCompactionRequest() override;
  explicit constexpr PullCompactionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullCompactionRequest(const PullCompactionRequest& from);
  PullCompactionRequest(PullCompactionRequest&& from) noexcept
    : PullCompactionRequest() {
    *this = ::std::move(from);
  }

  inline PullCompactionRequest& operator=(const PullCompactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullCompactionRequest& operator=(PullCompactionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullCompactionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullCompactionRequest* internal_default_instance() {
    return reinterpret_cast<const PullCompactionRequest*>(
               &_PullCompactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PullCompactionRequest& a, PullCompactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullCompactionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullCompactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullCompactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullCompactionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullCompactionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PullCompactionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullCompactionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.PullCompactionRequest";
  }
  protected:
  explicit PullCompactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // bytes message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:backup.PullCompactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backup_2eproto;
};
// -------------------------------------------------------------------

class PullCompactionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backup.PullCompactionResponse) */ {
 public:
  inline PullCompactionResponse() : PullCompactionResponse(nullptr) {}
  ~PullCompactionResponse() override;
  explicit constexpr PullCompactionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullCompactionResponse(const PullCompactionResponse& from);
  PullCompactionResponse(PullCompactionResponse&& from) noexcept
    : PullCompactionResponse() {
    *this = ::std::move(from);
  }

  inline PullCompactionResponse& operator=(const PullCompactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullCompactionResponse& operator=(PullCompactionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullCompactionResponse& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kCompactionChunk = 1,
    kLogChunk = 2,
    DATA_NOT_SET = 0,
  };

  static inline const PullCompactionResponse* internal_default_instance() {
    return reinterpret_cast<const PullCompactionResponse*>(
               &_PullCompactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PullCompactionResponse& a, PullCompactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PullCompactionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullCompactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullCompactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullCompactionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullCompactionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PullCompactionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullCompactionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backup.PullCompactionResponse";
  }
  protected:
  explicit PullCompactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompactionChunkFieldNumber = 1,
    kLogChunkFieldNumber = 2,
  };
  // bytes compactionChunk = 1;
  bool has_compactionchunk() const;
  private:
  bool _internal_has_compactionchunk() const;
  public:
  void clear_compactionchunk();
  const std::string& compactionchunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compactionchunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compactionchunk();
  PROTOBUF_NODISCARD std::string* release_compactionchunk();
  void set_allocated_compactionchunk(std::string* compactionchunk);
  private:
  const std::string& _internal_compactionchunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compactionchunk(const std::string& value);
  std::string* _internal_mutable_compactionchunk();
  public:

  // bytes logChunk = 2;
  bool has_logchunk() const;
  private:
  bool _internal_has_logchunk() const;
  public:
  void clear_logchunk();
  const std::string& logchunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logchunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logchunk();
  PROTOBUF_NODISCARD std::string* release_logchunk();
  void set_allocated_logchunk(std::string* logchunk);
  private:
  const std::string& _internal_logchunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logchunk(const std::string& value);
  std::string* _internal_mutable_logchunk();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:backup.PullCompactionResponse)
 private:
  class _Internal;
  void set_has_compactionchunk();
  void set_has_logchunk();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compactionchunk_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logchunk_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_backup_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResetKeyRequest

// string userId = 1;
inline void ResetKeyRequest::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& ResetKeyRequest::userid() const {
  // @@protoc_insertion_point(field_get:backup.ResetKeyRequest.userId)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResetKeyRequest::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backup.ResetKeyRequest.userId)
}
inline std::string* ResetKeyRequest::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:backup.ResetKeyRequest.userId)
  return _s;
}
inline const std::string& ResetKeyRequest::_internal_userid() const {
  return userid_.Get();
}
inline void ResetKeyRequest::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResetKeyRequest::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResetKeyRequest::release_userid() {
  // @@protoc_insertion_point(field_release:backup.ResetKeyRequest.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResetKeyRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backup.ResetKeyRequest.userId)
}

// bytes newKey = 2;
inline bool ResetKeyRequest::_internal_has_newkey() const {
  return data_case() == kNewKey;
}
inline bool ResetKeyRequest::has_newkey() const {
  return _internal_has_newkey();
}
inline void ResetKeyRequest::set_has_newkey() {
  _oneof_case_[0] = kNewKey;
}
inline void ResetKeyRequest::clear_newkey() {
  if (_internal_has_newkey()) {
    data_.newkey_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& ResetKeyRequest::newkey() const {
  // @@protoc_insertion_point(field_get:backup.ResetKeyRequest.newKey)
  return _internal_newkey();
}
template <typename ArgT0, typename... ArgT>
inline void ResetKeyRequest::set_newkey(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_newkey()) {
    clear_data();
    set_has_newkey();
    data_.newkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.newkey_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backup.ResetKeyRequest.newKey)
}
inline std::string* ResetKeyRequest::mutable_newkey() {
  std::string* _s = _internal_mutable_newkey();
  // @@protoc_insertion_point(field_mutable:backup.ResetKeyRequest.newKey)
  return _s;
}
inline const std::string& ResetKeyRequest::_internal_newkey() const {
  if (_internal_has_newkey()) {
    return data_.newkey_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ResetKeyRequest::_internal_set_newkey(const std::string& value) {
  if (!_internal_has_newkey()) {
    clear_data();
    set_has_newkey();
    data_.newkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.newkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResetKeyRequest::_internal_mutable_newkey() {
  if (!_internal_has_newkey()) {
    clear_data();
    set_has_newkey();
    data_.newkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.newkey_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResetKeyRequest::release_newkey() {
  // @@protoc_insertion_point(field_release:backup.ResetKeyRequest.newKey)
  if (_internal_has_newkey()) {
    clear_has_data();
    return data_.newkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ResetKeyRequest::set_allocated_newkey(std::string* newkey) {
  if (has_data()) {
    clear_data();
  }
  if (newkey != nullptr) {
    set_has_newkey();
    data_.newkey_.UnsafeSetDefault(newkey);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(newkey);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.ResetKeyRequest.newKey)
}

// bytes compactionChunk = 3;
inline bool ResetKeyRequest::_internal_has_compactionchunk() const {
  return data_case() == kCompactionChunk;
}
inline bool ResetKeyRequest::has_compactionchunk() const {
  return _internal_has_compactionchunk();
}
inline void ResetKeyRequest::set_has_compactionchunk() {
  _oneof_case_[0] = kCompactionChunk;
}
inline void ResetKeyRequest::clear_compactionchunk() {
  if (_internal_has_compactionchunk()) {
    data_.compactionchunk_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& ResetKeyRequest::compactionchunk() const {
  // @@protoc_insertion_point(field_get:backup.ResetKeyRequest.compactionChunk)
  return _internal_compactionchunk();
}
template <typename ArgT0, typename... ArgT>
inline void ResetKeyRequest::set_compactionchunk(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backup.ResetKeyRequest.compactionChunk)
}
inline std::string* ResetKeyRequest::mutable_compactionchunk() {
  std::string* _s = _internal_mutable_compactionchunk();
  // @@protoc_insertion_point(field_mutable:backup.ResetKeyRequest.compactionChunk)
  return _s;
}
inline const std::string& ResetKeyRequest::_internal_compactionchunk() const {
  if (_internal_has_compactionchunk()) {
    return data_.compactionchunk_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ResetKeyRequest::_internal_set_compactionchunk(const std::string& value) {
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResetKeyRequest::_internal_mutable_compactionchunk() {
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.compactionchunk_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResetKeyRequest::release_compactionchunk() {
  // @@protoc_insertion_point(field_release:backup.ResetKeyRequest.compactionChunk)
  if (_internal_has_compactionchunk()) {
    clear_has_data();
    return data_.compactionchunk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ResetKeyRequest::set_allocated_compactionchunk(std::string* compactionchunk) {
  if (has_data()) {
    clear_data();
  }
  if (compactionchunk != nullptr) {
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(compactionchunk);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(compactionchunk);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.ResetKeyRequest.compactionChunk)
}

inline bool ResetKeyRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ResetKeyRequest::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ResetKeyRequest::DataCase ResetKeyRequest::data_case() const {
  return ResetKeyRequest::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SendLogRequest

// string userId = 1;
inline void SendLogRequest::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& SendLogRequest::userid() const {
  // @@protoc_insertion_point(field_get:backup.SendLogRequest.userId)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendLogRequest::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.userId)
}
inline std::string* SendLogRequest::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:backup.SendLogRequest.userId)
  return _s;
}
inline const std::string& SendLogRequest::_internal_userid() const {
  return userid_.Get();
}
inline void SendLogRequest::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendLogRequest::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendLogRequest::release_userid() {
  // @@protoc_insertion_point(field_release:backup.SendLogRequest.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendLogRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backup.SendLogRequest.userId)
}

// bytes data = 2;
inline void SendLogRequest::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& SendLogRequest::data() const {
  // @@protoc_insertion_point(field_get:backup.SendLogRequest.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendLogRequest::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backup.SendLogRequest.data)
}
inline std::string* SendLogRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:backup.SendLogRequest.data)
  return _s;
}
inline const std::string& SendLogRequest::_internal_data() const {
  return data_.Get();
}
inline void SendLogRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendLogRequest::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendLogRequest::release_data() {
  // @@protoc_insertion_point(field_release:backup.SendLogRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendLogRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backup.SendLogRequest.data)
}

// -------------------------------------------------------------------

// PullBackupKeyRequest

// string userId = 1;
inline void PullBackupKeyRequest::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& PullBackupKeyRequest::userid() const {
  // @@protoc_insertion_point(field_get:backup.PullBackupKeyRequest.userId)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PullBackupKeyRequest::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backup.PullBackupKeyRequest.userId)
}
inline std::string* PullBackupKeyRequest::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:backup.PullBackupKeyRequest.userId)
  return _s;
}
inline const std::string& PullBackupKeyRequest::_internal_userid() const {
  return userid_.Get();
}
inline void PullBackupKeyRequest::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PullBackupKeyRequest::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PullBackupKeyRequest::release_userid() {
  // @@protoc_insertion_point(field_release:backup.PullBackupKeyRequest.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PullBackupKeyRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backup.PullBackupKeyRequest.userId)
}

// bytes pakeKey = 2;
inline void PullBackupKeyRequest::clear_pakekey() {
  pakekey_.ClearToEmpty();
}
inline const std::string& PullBackupKeyRequest::pakekey() const {
  // @@protoc_insertion_point(field_get:backup.PullBackupKeyRequest.pakeKey)
  return _internal_pakekey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PullBackupKeyRequest::set_pakekey(ArgT0&& arg0, ArgT... args) {
 
 pakekey_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backup.PullBackupKeyRequest.pakeKey)
}
inline std::string* PullBackupKeyRequest::mutable_pakekey() {
  std::string* _s = _internal_mutable_pakekey();
  // @@protoc_insertion_point(field_mutable:backup.PullBackupKeyRequest.pakeKey)
  return _s;
}
inline const std::string& PullBackupKeyRequest::_internal_pakekey() const {
  return pakekey_.Get();
}
inline void PullBackupKeyRequest::_internal_set_pakekey(const std::string& value) {
  
  pakekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PullBackupKeyRequest::_internal_mutable_pakekey() {
  
  return pakekey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PullBackupKeyRequest::release_pakekey() {
  // @@protoc_insertion_point(field_release:backup.PullBackupKeyRequest.pakeKey)
  return pakekey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PullBackupKeyRequest::set_allocated_pakekey(std::string* pakekey) {
  if (pakekey != nullptr) {
    
  } else {
    
  }
  pakekey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pakekey,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pakekey_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pakekey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backup.PullBackupKeyRequest.pakeKey)
}

// -------------------------------------------------------------------

// PullBackupKeyResponse

// bytes encryptedBackupKey = 1;
inline void PullBackupKeyResponse::clear_encryptedbackupkey() {
  encryptedbackupkey_.ClearToEmpty();
}
inline const std::string& PullBackupKeyResponse::encryptedbackupkey() const {
  // @@protoc_insertion_point(field_get:backup.PullBackupKeyResponse.encryptedBackupKey)
  return _internal_encryptedbackupkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PullBackupKeyResponse::set_encryptedbackupkey(ArgT0&& arg0, ArgT... args) {
 
 encryptedbackupkey_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backup.PullBackupKeyResponse.encryptedBackupKey)
}
inline std::string* PullBackupKeyResponse::mutable_encryptedbackupkey() {
  std::string* _s = _internal_mutable_encryptedbackupkey();
  // @@protoc_insertion_point(field_mutable:backup.PullBackupKeyResponse.encryptedBackupKey)
  return _s;
}
inline const std::string& PullBackupKeyResponse::_internal_encryptedbackupkey() const {
  return encryptedbackupkey_.Get();
}
inline void PullBackupKeyResponse::_internal_set_encryptedbackupkey(const std::string& value) {
  
  encryptedbackupkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PullBackupKeyResponse::_internal_mutable_encryptedbackupkey() {
  
  return encryptedbackupkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PullBackupKeyResponse::release_encryptedbackupkey() {
  // @@protoc_insertion_point(field_release:backup.PullBackupKeyResponse.encryptedBackupKey)
  return encryptedbackupkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PullBackupKeyResponse::set_allocated_encryptedbackupkey(std::string* encryptedbackupkey) {
  if (encryptedbackupkey != nullptr) {
    
  } else {
    
  }
  encryptedbackupkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encryptedbackupkey,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encryptedbackupkey_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encryptedbackupkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backup.PullBackupKeyResponse.encryptedBackupKey)
}

// -------------------------------------------------------------------

// PullCompactionRequest

// string userId = 1;
inline void PullCompactionRequest::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& PullCompactionRequest::userid() const {
  // @@protoc_insertion_point(field_get:backup.PullCompactionRequest.userId)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PullCompactionRequest::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backup.PullCompactionRequest.userId)
}
inline std::string* PullCompactionRequest::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:backup.PullCompactionRequest.userId)
  return _s;
}
inline const std::string& PullCompactionRequest::_internal_userid() const {
  return userid_.Get();
}
inline void PullCompactionRequest::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PullCompactionRequest::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PullCompactionRequest::release_userid() {
  // @@protoc_insertion_point(field_release:backup.PullCompactionRequest.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PullCompactionRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backup.PullCompactionRequest.userId)
}

// bytes message = 2;
inline void PullCompactionRequest::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& PullCompactionRequest::message() const {
  // @@protoc_insertion_point(field_get:backup.PullCompactionRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PullCompactionRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backup.PullCompactionRequest.message)
}
inline std::string* PullCompactionRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:backup.PullCompactionRequest.message)
  return _s;
}
inline const std::string& PullCompactionRequest::_internal_message() const {
  return message_.Get();
}
inline void PullCompactionRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PullCompactionRequest::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PullCompactionRequest::release_message() {
  // @@protoc_insertion_point(field_release:backup.PullCompactionRequest.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PullCompactionRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backup.PullCompactionRequest.message)
}

// -------------------------------------------------------------------

// PullCompactionResponse

// bytes compactionChunk = 1;
inline bool PullCompactionResponse::_internal_has_compactionchunk() const {
  return data_case() == kCompactionChunk;
}
inline bool PullCompactionResponse::has_compactionchunk() const {
  return _internal_has_compactionchunk();
}
inline void PullCompactionResponse::set_has_compactionchunk() {
  _oneof_case_[0] = kCompactionChunk;
}
inline void PullCompactionResponse::clear_compactionchunk() {
  if (_internal_has_compactionchunk()) {
    data_.compactionchunk_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& PullCompactionResponse::compactionchunk() const {
  // @@protoc_insertion_point(field_get:backup.PullCompactionResponse.compactionChunk)
  return _internal_compactionchunk();
}
template <typename ArgT0, typename... ArgT>
inline void PullCompactionResponse::set_compactionchunk(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backup.PullCompactionResponse.compactionChunk)
}
inline std::string* PullCompactionResponse::mutable_compactionchunk() {
  std::string* _s = _internal_mutable_compactionchunk();
  // @@protoc_insertion_point(field_mutable:backup.PullCompactionResponse.compactionChunk)
  return _s;
}
inline const std::string& PullCompactionResponse::_internal_compactionchunk() const {
  if (_internal_has_compactionchunk()) {
    return data_.compactionchunk_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PullCompactionResponse::_internal_set_compactionchunk(const std::string& value) {
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.compactionchunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PullCompactionResponse::_internal_mutable_compactionchunk() {
  if (!_internal_has_compactionchunk()) {
    clear_data();
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.compactionchunk_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PullCompactionResponse::release_compactionchunk() {
  // @@protoc_insertion_point(field_release:backup.PullCompactionResponse.compactionChunk)
  if (_internal_has_compactionchunk()) {
    clear_has_data();
    return data_.compactionchunk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void PullCompactionResponse::set_allocated_compactionchunk(std::string* compactionchunk) {
  if (has_data()) {
    clear_data();
  }
  if (compactionchunk != nullptr) {
    set_has_compactionchunk();
    data_.compactionchunk_.UnsafeSetDefault(compactionchunk);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(compactionchunk);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.PullCompactionResponse.compactionChunk)
}

// bytes logChunk = 2;
inline bool PullCompactionResponse::_internal_has_logchunk() const {
  return data_case() == kLogChunk;
}
inline bool PullCompactionResponse::has_logchunk() const {
  return _internal_has_logchunk();
}
inline void PullCompactionResponse::set_has_logchunk() {
  _oneof_case_[0] = kLogChunk;
}
inline void PullCompactionResponse::clear_logchunk() {
  if (_internal_has_logchunk()) {
    data_.logchunk_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& PullCompactionResponse::logchunk() const {
  // @@protoc_insertion_point(field_get:backup.PullCompactionResponse.logChunk)
  return _internal_logchunk();
}
template <typename ArgT0, typename... ArgT>
inline void PullCompactionResponse::set_logchunk(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_logchunk()) {
    clear_data();
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logchunk_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backup.PullCompactionResponse.logChunk)
}
inline std::string* PullCompactionResponse::mutable_logchunk() {
  std::string* _s = _internal_mutable_logchunk();
  // @@protoc_insertion_point(field_mutable:backup.PullCompactionResponse.logChunk)
  return _s;
}
inline const std::string& PullCompactionResponse::_internal_logchunk() const {
  if (_internal_has_logchunk()) {
    return data_.logchunk_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PullCompactionResponse::_internal_set_logchunk(const std::string& value) {
  if (!_internal_has_logchunk()) {
    clear_data();
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.logchunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PullCompactionResponse::_internal_mutable_logchunk() {
  if (!_internal_has_logchunk()) {
    clear_data();
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.logchunk_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PullCompactionResponse::release_logchunk() {
  // @@protoc_insertion_point(field_release:backup.PullCompactionResponse.logChunk)
  if (_internal_has_logchunk()) {
    clear_has_data();
    return data_.logchunk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void PullCompactionResponse::set_allocated_logchunk(std::string* logchunk) {
  if (has_data()) {
    clear_data();
  }
  if (logchunk != nullptr) {
    set_has_logchunk();
    data_.logchunk_.UnsafeSetDefault(logchunk);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(logchunk);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:backup.PullCompactionResponse.logChunk)
}

inline bool PullCompactionResponse::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void PullCompactionResponse::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline PullCompactionResponse::DataCase PullCompactionResponse::data_case() const {
  return PullCompactionResponse::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace backup

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_backup_2eproto
