// @generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blob.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blob_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blob_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blob_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blob_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blob_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_blob_2eproto_metadata_getter(int index);
namespace blob {
class GetRequest;
struct GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
struct GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class PutRequest;
struct PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class RemoveRequest;
struct RemoveRequestDefaultTypeInternal;
extern RemoveRequestDefaultTypeInternal _RemoveRequest_default_instance_;
}  // namespace blob
PROTOBUF_NAMESPACE_OPEN
template<> ::blob::GetRequest* Arena::CreateMaybeMessage<::blob::GetRequest>(Arena*);
template<> ::blob::GetResponse* Arena::CreateMaybeMessage<::blob::GetResponse>(Arena*);
template<> ::blob::PutRequest* Arena::CreateMaybeMessage<::blob::PutRequest>(Arena*);
template<> ::blob::RemoveRequest* Arena::CreateMaybeMessage<::blob::RemoveRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blob {

// ===================================================================

class PutRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blob.PutRequest) */ {
 public:
  inline PutRequest() : PutRequest(nullptr) {}
  virtual ~PutRequest();
  explicit constexpr PutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutRequest(const PutRequest& from);
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kReverseIndex = 1,
    kFileHash = 2,
    kDataChunk = 3,
    DATA_NOT_SET = 0,
  };

  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const final {
    return CreateMaybeMessage<PutRequest>(nullptr);
  }

  PutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blob.PutRequest";
  }
  protected:
  explicit PutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_blob_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReverseIndexFieldNumber = 1,
    kFileHashFieldNumber = 2,
    kDataChunkFieldNumber = 3,
  };
  // string reverseIndex = 1;
  bool has_reverseindex() const;
  private:
  bool _internal_has_reverseindex() const;
  public:
  void clear_reverseindex();
  const std::string& reverseindex() const;
  void set_reverseindex(const std::string& value);
  void set_reverseindex(std::string&& value);
  void set_reverseindex(const char* value);
  void set_reverseindex(const char* value, size_t size);
  std::string* mutable_reverseindex();
  std::string* release_reverseindex();
  void set_allocated_reverseindex(std::string* reverseindex);
  private:
  const std::string& _internal_reverseindex() const;
  void _internal_set_reverseindex(const std::string& value);
  std::string* _internal_mutable_reverseindex();
  public:

  // string fileHash = 2;
  bool has_filehash() const;
  private:
  bool _internal_has_filehash() const;
  public:
  void clear_filehash();
  const std::string& filehash() const;
  void set_filehash(const std::string& value);
  void set_filehash(std::string&& value);
  void set_filehash(const char* value);
  void set_filehash(const char* value, size_t size);
  std::string* mutable_filehash();
  std::string* release_filehash();
  void set_allocated_filehash(std::string* filehash);
  private:
  const std::string& _internal_filehash() const;
  void _internal_set_filehash(const std::string& value);
  std::string* _internal_mutable_filehash();
  public:

  // bytes dataChunk = 3;
  bool has_datachunk() const;
  private:
  bool _internal_has_datachunk() const;
  public:
  void clear_datachunk();
  const std::string& datachunk() const;
  void set_datachunk(const std::string& value);
  void set_datachunk(std::string&& value);
  void set_datachunk(const char* value);
  void set_datachunk(const void* value, size_t size);
  std::string* mutable_datachunk();
  std::string* release_datachunk();
  void set_allocated_datachunk(std::string* datachunk);
  private:
  const std::string& _internal_datachunk() const;
  void _internal_set_datachunk(const std::string& value);
  std::string* _internal_mutable_datachunk();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:blob.PutRequest)
 private:
  class _Internal;
  void set_has_reverseindex();
  void set_has_filehash();
  void set_has_datachunk();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reverseindex_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filehash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datachunk_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blob_2eproto;
};
// -------------------------------------------------------------------

class GetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blob.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  virtual ~GetRequest();
  explicit constexpr GetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRequest(const GetRequest& from);
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(nullptr);
  }

  GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blob.GetRequest";
  }
  protected:
  explicit GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_blob_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReverseIndexFieldNumber = 1,
  };
  // string reverseIndex = 1;
  void clear_reverseindex();
  const std::string& reverseindex() const;
  void set_reverseindex(const std::string& value);
  void set_reverseindex(std::string&& value);
  void set_reverseindex(const char* value);
  void set_reverseindex(const char* value, size_t size);
  std::string* mutable_reverseindex();
  std::string* release_reverseindex();
  void set_allocated_reverseindex(std::string* reverseindex);
  private:
  const std::string& _internal_reverseindex() const;
  void _internal_set_reverseindex(const std::string& value);
  std::string* _internal_mutable_reverseindex();
  public:

  // @@protoc_insertion_point(class_scope:blob.GetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reverseindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blob_2eproto;
};
// -------------------------------------------------------------------

class GetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blob.GetResponse) */ {
 public:
  inline GetResponse() : GetResponse(nullptr) {}
  virtual ~GetResponse();
  explicit constexpr GetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetResponse(const GetResponse& from);
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const final {
    return CreateMaybeMessage<GetResponse>(nullptr);
  }

  GetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blob.GetResponse";
  }
  protected:
  explicit GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_blob_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataChunkFieldNumber = 1,
  };
  // bytes dataChunk = 1;
  void clear_datachunk();
  const std::string& datachunk() const;
  void set_datachunk(const std::string& value);
  void set_datachunk(std::string&& value);
  void set_datachunk(const char* value);
  void set_datachunk(const void* value, size_t size);
  std::string* mutable_datachunk();
  std::string* release_datachunk();
  void set_allocated_datachunk(std::string* datachunk);
  private:
  const std::string& _internal_datachunk() const;
  void _internal_set_datachunk(const std::string& value);
  std::string* _internal_mutable_datachunk();
  public:

  // @@protoc_insertion_point(class_scope:blob.GetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datachunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blob_2eproto;
};
// -------------------------------------------------------------------

class RemoveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blob.RemoveRequest) */ {
 public:
  inline RemoveRequest() : RemoveRequest(nullptr) {}
  virtual ~RemoveRequest();
  explicit constexpr RemoveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveRequest(const RemoveRequest& from);
  RemoveRequest(RemoveRequest&& from) noexcept
    : RemoveRequest() {
    *this = ::std::move(from);
  }

  inline RemoveRequest& operator=(const RemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRequest& operator=(RemoveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveRequest*>(
               &_RemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RemoveRequest& a, RemoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveRequest* New() const final {
    return CreateMaybeMessage<RemoveRequest>(nullptr);
  }

  RemoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveRequest& from);
  void MergeFrom(const RemoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blob.RemoveRequest";
  }
  protected:
  explicit RemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_blob_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReverseIndexFieldNumber = 1,
  };
  // string reverseIndex = 1;
  void clear_reverseindex();
  const std::string& reverseindex() const;
  void set_reverseindex(const std::string& value);
  void set_reverseindex(std::string&& value);
  void set_reverseindex(const char* value);
  void set_reverseindex(const char* value, size_t size);
  std::string* mutable_reverseindex();
  std::string* release_reverseindex();
  void set_allocated_reverseindex(std::string* reverseindex);
  private:
  const std::string& _internal_reverseindex() const;
  void _internal_set_reverseindex(const std::string& value);
  std::string* _internal_mutable_reverseindex();
  public:

  // @@protoc_insertion_point(class_scope:blob.RemoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reverseindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blob_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PutRequest

// string reverseIndex = 1;
inline bool PutRequest::_internal_has_reverseindex() const {
  return data_case() == kReverseIndex;
}
inline bool PutRequest::has_reverseindex() const {
  return _internal_has_reverseindex();
}
inline void PutRequest::set_has_reverseindex() {
  _oneof_case_[0] = kReverseIndex;
}
inline void PutRequest::clear_reverseindex() {
  if (_internal_has_reverseindex()) {
    data_.reverseindex_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PutRequest::reverseindex() const {
  // @@protoc_insertion_point(field_get:blob.PutRequest.reverseIndex)
  return _internal_reverseindex();
}
inline void PutRequest::set_reverseindex(const std::string& value) {
  _internal_set_reverseindex(value);
  // @@protoc_insertion_point(field_set:blob.PutRequest.reverseIndex)
}
inline std::string* PutRequest::mutable_reverseindex() {
  // @@protoc_insertion_point(field_mutable:blob.PutRequest.reverseIndex)
  return _internal_mutable_reverseindex();
}
inline const std::string& PutRequest::_internal_reverseindex() const {
  if (_internal_has_reverseindex()) {
    return data_.reverseindex_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PutRequest::_internal_set_reverseindex(const std::string& value) {
  if (!_internal_has_reverseindex()) {
    clear_data();
    set_has_reverseindex();
    data_.reverseindex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.reverseindex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutRequest::set_reverseindex(std::string&& value) {
  // @@protoc_insertion_point(field_set:blob.PutRequest.reverseIndex)
  if (!_internal_has_reverseindex()) {
    clear_data();
    set_has_reverseindex();
    data_.reverseindex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.reverseindex_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blob.PutRequest.reverseIndex)
}
inline void PutRequest::set_reverseindex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_reverseindex()) {
    clear_data();
    set_has_reverseindex();
    data_.reverseindex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.reverseindex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:blob.PutRequest.reverseIndex)
}
inline void PutRequest::set_reverseindex(const char* value,
                             size_t size) {
  if (!_internal_has_reverseindex()) {
    clear_data();
    set_has_reverseindex();
    data_.reverseindex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.reverseindex_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:blob.PutRequest.reverseIndex)
}
inline std::string* PutRequest::_internal_mutable_reverseindex() {
  if (!_internal_has_reverseindex()) {
    clear_data();
    set_has_reverseindex();
    data_.reverseindex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.reverseindex_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutRequest::release_reverseindex() {
  // @@protoc_insertion_point(field_release:blob.PutRequest.reverseIndex)
  if (_internal_has_reverseindex()) {
    clear_has_data();
    return data_.reverseindex_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PutRequest::set_allocated_reverseindex(std::string* reverseindex) {
  if (has_data()) {
    clear_data();
  }
  if (reverseindex != nullptr) {
    set_has_reverseindex();
    data_.reverseindex_.UnsafeSetDefault(reverseindex);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(reverseindex);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:blob.PutRequest.reverseIndex)
}

// string fileHash = 2;
inline bool PutRequest::_internal_has_filehash() const {
  return data_case() == kFileHash;
}
inline bool PutRequest::has_filehash() const {
  return _internal_has_filehash();
}
inline void PutRequest::set_has_filehash() {
  _oneof_case_[0] = kFileHash;
}
inline void PutRequest::clear_filehash() {
  if (_internal_has_filehash()) {
    data_.filehash_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PutRequest::filehash() const {
  // @@protoc_insertion_point(field_get:blob.PutRequest.fileHash)
  return _internal_filehash();
}
inline void PutRequest::set_filehash(const std::string& value) {
  _internal_set_filehash(value);
  // @@protoc_insertion_point(field_set:blob.PutRequest.fileHash)
}
inline std::string* PutRequest::mutable_filehash() {
  // @@protoc_insertion_point(field_mutable:blob.PutRequest.fileHash)
  return _internal_mutable_filehash();
}
inline const std::string& PutRequest::_internal_filehash() const {
  if (_internal_has_filehash()) {
    return data_.filehash_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PutRequest::_internal_set_filehash(const std::string& value) {
  if (!_internal_has_filehash()) {
    clear_data();
    set_has_filehash();
    data_.filehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.filehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutRequest::set_filehash(std::string&& value) {
  // @@protoc_insertion_point(field_set:blob.PutRequest.fileHash)
  if (!_internal_has_filehash()) {
    clear_data();
    set_has_filehash();
    data_.filehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.filehash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blob.PutRequest.fileHash)
}
inline void PutRequest::set_filehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_filehash()) {
    clear_data();
    set_has_filehash();
    data_.filehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.filehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:blob.PutRequest.fileHash)
}
inline void PutRequest::set_filehash(const char* value,
                             size_t size) {
  if (!_internal_has_filehash()) {
    clear_data();
    set_has_filehash();
    data_.filehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.filehash_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:blob.PutRequest.fileHash)
}
inline std::string* PutRequest::_internal_mutable_filehash() {
  if (!_internal_has_filehash()) {
    clear_data();
    set_has_filehash();
    data_.filehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.filehash_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutRequest::release_filehash() {
  // @@protoc_insertion_point(field_release:blob.PutRequest.fileHash)
  if (_internal_has_filehash()) {
    clear_has_data();
    return data_.filehash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PutRequest::set_allocated_filehash(std::string* filehash) {
  if (has_data()) {
    clear_data();
  }
  if (filehash != nullptr) {
    set_has_filehash();
    data_.filehash_.UnsafeSetDefault(filehash);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(filehash);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:blob.PutRequest.fileHash)
}

// bytes dataChunk = 3;
inline bool PutRequest::_internal_has_datachunk() const {
  return data_case() == kDataChunk;
}
inline bool PutRequest::has_datachunk() const {
  return _internal_has_datachunk();
}
inline void PutRequest::set_has_datachunk() {
  _oneof_case_[0] = kDataChunk;
}
inline void PutRequest::clear_datachunk() {
  if (_internal_has_datachunk()) {
    data_.datachunk_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& PutRequest::datachunk() const {
  // @@protoc_insertion_point(field_get:blob.PutRequest.dataChunk)
  return _internal_datachunk();
}
inline void PutRequest::set_datachunk(const std::string& value) {
  _internal_set_datachunk(value);
  // @@protoc_insertion_point(field_set:blob.PutRequest.dataChunk)
}
inline std::string* PutRequest::mutable_datachunk() {
  // @@protoc_insertion_point(field_mutable:blob.PutRequest.dataChunk)
  return _internal_mutable_datachunk();
}
inline const std::string& PutRequest::_internal_datachunk() const {
  if (_internal_has_datachunk()) {
    return data_.datachunk_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PutRequest::_internal_set_datachunk(const std::string& value) {
  if (!_internal_has_datachunk()) {
    clear_data();
    set_has_datachunk();
    data_.datachunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.datachunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PutRequest::set_datachunk(std::string&& value) {
  // @@protoc_insertion_point(field_set:blob.PutRequest.dataChunk)
  if (!_internal_has_datachunk()) {
    clear_data();
    set_has_datachunk();
    data_.datachunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.datachunk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blob.PutRequest.dataChunk)
}
inline void PutRequest::set_datachunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_datachunk()) {
    clear_data();
    set_has_datachunk();
    data_.datachunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.datachunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:blob.PutRequest.dataChunk)
}
inline void PutRequest::set_datachunk(const void* value,
                             size_t size) {
  if (!_internal_has_datachunk()) {
    clear_data();
    set_has_datachunk();
    data_.datachunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.datachunk_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:blob.PutRequest.dataChunk)
}
inline std::string* PutRequest::_internal_mutable_datachunk() {
  if (!_internal_has_datachunk()) {
    clear_data();
    set_has_datachunk();
    data_.datachunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.datachunk_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PutRequest::release_datachunk() {
  // @@protoc_insertion_point(field_release:blob.PutRequest.dataChunk)
  if (_internal_has_datachunk()) {
    clear_has_data();
    return data_.datachunk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PutRequest::set_allocated_datachunk(std::string* datachunk) {
  if (has_data()) {
    clear_data();
  }
  if (datachunk != nullptr) {
    set_has_datachunk();
    data_.datachunk_.UnsafeSetDefault(datachunk);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(datachunk);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:blob.PutRequest.dataChunk)
}

inline bool PutRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void PutRequest::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline PutRequest::DataCase PutRequest::data_case() const {
  return PutRequest::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetRequest

// string reverseIndex = 1;
inline void GetRequest::clear_reverseindex() {
  reverseindex_.ClearToEmpty();
}
inline const std::string& GetRequest::reverseindex() const {
  // @@protoc_insertion_point(field_get:blob.GetRequest.reverseIndex)
  return _internal_reverseindex();
}
inline void GetRequest::set_reverseindex(const std::string& value) {
  _internal_set_reverseindex(value);
  // @@protoc_insertion_point(field_set:blob.GetRequest.reverseIndex)
}
inline std::string* GetRequest::mutable_reverseindex() {
  // @@protoc_insertion_point(field_mutable:blob.GetRequest.reverseIndex)
  return _internal_mutable_reverseindex();
}
inline const std::string& GetRequest::_internal_reverseindex() const {
  return reverseindex_.Get();
}
inline void GetRequest::_internal_set_reverseindex(const std::string& value) {
  
  reverseindex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetRequest::set_reverseindex(std::string&& value) {
  
  reverseindex_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blob.GetRequest.reverseIndex)
}
inline void GetRequest::set_reverseindex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reverseindex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:blob.GetRequest.reverseIndex)
}
inline void GetRequest::set_reverseindex(const char* value,
    size_t size) {
  
  reverseindex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blob.GetRequest.reverseIndex)
}
inline std::string* GetRequest::_internal_mutable_reverseindex() {
  
  return reverseindex_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetRequest::release_reverseindex() {
  // @@protoc_insertion_point(field_release:blob.GetRequest.reverseIndex)
  return reverseindex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRequest::set_allocated_reverseindex(std::string* reverseindex) {
  if (reverseindex != nullptr) {
    
  } else {
    
  }
  reverseindex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reverseindex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blob.GetRequest.reverseIndex)
}

// -------------------------------------------------------------------

// GetResponse

// bytes dataChunk = 1;
inline void GetResponse::clear_datachunk() {
  datachunk_.ClearToEmpty();
}
inline const std::string& GetResponse::datachunk() const {
  // @@protoc_insertion_point(field_get:blob.GetResponse.dataChunk)
  return _internal_datachunk();
}
inline void GetResponse::set_datachunk(const std::string& value) {
  _internal_set_datachunk(value);
  // @@protoc_insertion_point(field_set:blob.GetResponse.dataChunk)
}
inline std::string* GetResponse::mutable_datachunk() {
  // @@protoc_insertion_point(field_mutable:blob.GetResponse.dataChunk)
  return _internal_mutable_datachunk();
}
inline const std::string& GetResponse::_internal_datachunk() const {
  return datachunk_.Get();
}
inline void GetResponse::_internal_set_datachunk(const std::string& value) {
  
  datachunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponse::set_datachunk(std::string&& value) {
  
  datachunk_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blob.GetResponse.dataChunk)
}
inline void GetResponse::set_datachunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datachunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:blob.GetResponse.dataChunk)
}
inline void GetResponse::set_datachunk(const void* value,
    size_t size) {
  
  datachunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blob.GetResponse.dataChunk)
}
inline std::string* GetResponse::_internal_mutable_datachunk() {
  
  return datachunk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponse::release_datachunk() {
  // @@protoc_insertion_point(field_release:blob.GetResponse.dataChunk)
  return datachunk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResponse::set_allocated_datachunk(std::string* datachunk) {
  if (datachunk != nullptr) {
    
  } else {
    
  }
  datachunk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datachunk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blob.GetResponse.dataChunk)
}

// -------------------------------------------------------------------

// RemoveRequest

// string reverseIndex = 1;
inline void RemoveRequest::clear_reverseindex() {
  reverseindex_.ClearToEmpty();
}
inline const std::string& RemoveRequest::reverseindex() const {
  // @@protoc_insertion_point(field_get:blob.RemoveRequest.reverseIndex)
  return _internal_reverseindex();
}
inline void RemoveRequest::set_reverseindex(const std::string& value) {
  _internal_set_reverseindex(value);
  // @@protoc_insertion_point(field_set:blob.RemoveRequest.reverseIndex)
}
inline std::string* RemoveRequest::mutable_reverseindex() {
  // @@protoc_insertion_point(field_mutable:blob.RemoveRequest.reverseIndex)
  return _internal_mutable_reverseindex();
}
inline const std::string& RemoveRequest::_internal_reverseindex() const {
  return reverseindex_.Get();
}
inline void RemoveRequest::_internal_set_reverseindex(const std::string& value) {
  
  reverseindex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RemoveRequest::set_reverseindex(std::string&& value) {
  
  reverseindex_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:blob.RemoveRequest.reverseIndex)
}
inline void RemoveRequest::set_reverseindex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reverseindex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:blob.RemoveRequest.reverseIndex)
}
inline void RemoveRequest::set_reverseindex(const char* value,
    size_t size) {
  
  reverseindex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:blob.RemoveRequest.reverseIndex)
}
inline std::string* RemoveRequest::_internal_mutable_reverseindex() {
  
  return reverseindex_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RemoveRequest::release_reverseindex() {
  // @@protoc_insertion_point(field_release:blob.RemoveRequest.reverseIndex)
  return reverseindex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveRequest::set_allocated_reverseindex(std::string* reverseindex) {
  if (reverseindex != nullptr) {
    
  } else {
    
  }
  reverseindex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reverseindex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blob.RemoveRequest.reverseIndex)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blob

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blob_2eproto
