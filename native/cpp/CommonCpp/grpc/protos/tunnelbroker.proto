syntax = "proto3";

package tunnelbroker;

import "google/protobuf/empty.proto";

service TunnelBrokerService {
  rpc CheckIfPrimaryDeviceOnline(CheckRequest) returns (CheckResponse) {}
  rpc BecomeNewPrimaryDevice(NewPrimaryRequest) returns (NewPrimaryResponse) {}
  rpc SendPong (PongRequest) returns (google.protobuf.Empty) {}
  rpc NewSession (NewSessionRequest) returns (NewSessionResponse) {}
  rpc Send (SendRequest) returns (SendResponse) {}
  rpc Get (GetRequest) returns (stream GetResponse) {}
}

// for CheckIfPrimaryDeviceOnline

enum CheckResponseType {
  PRIMARY_DOESNT_EXIST = 0;
  PRIMARY_ONLINE = 1;
  PRIMARY_OFFLINE = 2;
  CURRENT_IS_PRIMARY = 3;
}

// TODO: all the requests are the same, maybe there can be a mutual type for all of them
// leaving this as is for now as there may be some differences
message CheckRequest {
  string userId = 1;
  string deviceToken = 2;
}

message CheckResponse {
  CheckResponseType checkResponseType = 1;
}

// BecomeNewPrimaryDevice

message NewPrimaryRequest {
  string userId = 1;
  string deviceToken = 2;
}

message NewPrimaryResponse {
  bool success = 1;
}

// for SendPong

message PongRequest {
  string userId = 1;
  string deviceToken = 2;
}

// Session

message NewSessionRequest {
  string deviceId = 1;
  string userId = 2;
  string notifyToken = 3;
  string typeOs = 4;
}

message NewSessionResponse {
  string sessionId = 1;
}

// Send payload to device

enum MainResponseType {
  SUCCESS = 1;
  ERROR = 2;
}

message SendResponse {
  MainResponseType result = 1;
}

message SendRequest {
  string sessionID = 1;
  string toDeviceId = 2;
  bytes payload = 2;
  repeated string blobHash = 3;
}

// Get messages from devices

message GetRequest {
  string sessionId = 1;
}

message GetResponse {
  string deviceId = 1;
  bytes payload = 2;
  repeated string blobHash = 3;
}
