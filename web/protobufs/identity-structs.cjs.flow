// @flow

import {
  Message,
  BinaryWriter,
  BinaryReader,
  Map as ProtoMap,
} from 'google-protobuf';

declare export class Empty extends Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): {};
  static toObject(includeInstance: boolean, msg: Empty): {};
  static serializeBinaryToWriter(message: Empty, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Empty;
  static deserializeBinaryFromReader(message: Empty, reader: BinaryReader): Empty;
}

export type PreKeyObject = {
  prekey: string,
  prekeysignature: string,
}

declare export class PreKey extends Message {
  getPrekey(): string;
  setPrekey(value: string): PreKey;

  getPrekeysignature(): string;
  setPrekeysignature(value: string): PreKey;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PreKeyObject;
  static toObject(includeInstance: boolean, msg: PreKey): PreKeyObject;
  static serializeBinaryToWriter(message: PreKey, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PreKey;
  static deserializeBinaryFromReader(message: PreKey, reader: BinaryReader): PreKey;
}

export type IdentityKeyInfoObject = {
  payload: string,
  payloadsignature: string,
  socialproof?: string,
};

declare export class IdentityKeyInfo extends Message {
  getPayload(): string;
  setPayload(value: string): IdentityKeyInfo;

  getPayloadsignature(): string;
  setPayloadsignature(value: string): IdentityKeyInfo;

  getSocialproof(): string;
  setSocialproof(value: string): IdentityKeyInfo;
  hasSocialproof(): boolean;
  clearSocialproof(): IdentityKeyInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): IdentityKeyInfoObject;
  static toObject(includeInstance: boolean, msg: IdentityKeyInfo): IdentityKeyInfoObject;
  static serializeBinaryToWriter(message: IdentityKeyInfo, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): IdentityKeyInfo;
  static deserializeBinaryFromReader(message: IdentityKeyInfo, reader: BinaryReader): IdentityKeyInfo;
}

declare export class DeviceKeyUpload extends Message {
  getDevicekeyinfo(): IdentityKeyInfo | void;
  setDevicekeyinfo(value?: IdentityKeyInfo): DeviceKeyUpload;
  hasDevicekeyinfo(): boolean;
  clearDevicekeyinfo(): DeviceKeyUpload;

  getContentupload(): PreKey | void;
  setContentupload(value?: PreKey): DeviceKeyUpload;
  hasContentupload(): boolean;
  clearContentupload(): DeviceKeyUpload;

  getNotifupload(): PreKey | void;
  setNotifupload(value?: PreKey): DeviceKeyUpload;
  hasNotifupload(): boolean;
  clearNotifupload(): DeviceKeyUpload;

  getOnetimecontentprekeysList(): Array<string>;
  setOnetimecontentprekeysList(value: Array<string>): DeviceKeyUpload;
  clearOnetimecontentprekeysList(): DeviceKeyUpload;
  addOnetimecontentprekeys(value: string, index?: number): DeviceKeyUpload;

  getOnetimenotifprekeysList(): Array<string>;
  setOnetimenotifprekeysList(value: Array<string>): DeviceKeyUpload;
  clearOnetimenotifprekeysList(): DeviceKeyUpload;
  addOnetimenotifprekeys(value: string, index?: number): DeviceKeyUpload;

  getDevicetype(): DeviceType;
  setDevicetype(value: DeviceType): DeviceKeyUpload;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeviceKeyUploadObject;
  static toObject(includeInstance: boolean, msg: DeviceKeyUpload): DeviceKeyUploadObject;
  static serializeBinaryToWriter(message: DeviceKeyUpload, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeviceKeyUpload;
  static deserializeBinaryFromReader(message: DeviceKeyUpload, reader: BinaryReader): DeviceKeyUpload;
}

export type DeviceKeyUploadObject = {
  devicekeyinfo?: IdentityKeyInfoObject,
  identityupload?: PreKeyObject,
  notifupload?: PreKeyObject,
  onetimeidentityprekeysList: Array<string>,
  onetimenotifprekeysList: Array<string>,
};

declare export class RegistrationStartRequest extends Message {
  getOpaqueregistrationrequest(): Uint8Array | string;
  getOpaqueregistrationrequest_asU8(): Uint8Array;
  getOpaqueregistrationrequest_asB64(): string;
  setOpaqueregistrationrequest(value: Uint8Array | string): RegistrationStartRequest;

  getUsername(): string;
  setUsername(value: string): RegistrationStartRequest;

  getDevicekeyupload(): DeviceKeyUpload | void;
  setDevicekeyupload(value?: DeviceKeyUpload): RegistrationStartRequest;
  hasDevicekeyupload(): boolean;
  clearDevicekeyupload(): RegistrationStartRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RegistrationStartRequestObject;
  static toObject(includeInstance: boolean, msg: RegistrationStartRequest): RegistrationStartRequestObject;
  static serializeBinaryToWriter(message: RegistrationStartRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RegistrationStartRequest;
  static deserializeBinaryFromReader(message: RegistrationStartRequest, reader: BinaryReader): RegistrationStartRequest;
}

export type RegistrationStartRequestObject = {
  opaqueregistrationrequest: Uint8Array | string,
  username: string,
  devicekeyupload?: DeviceKeyUploadObject,
};

declare export class ReservedRegistrationStartRequest extends Message {
  getOpaqueregistrationrequest(): Uint8Array | string;
  getOpaqueregistrationrequest_asU8(): Uint8Array;
  getOpaqueregistrationrequest_asB64(): string;
  setOpaqueregistrationrequest(value: Uint8Array | string): ReservedRegistrationStartRequest;

  getUsername(): string;
  setUsername(value: string): ReservedRegistrationStartRequest;

  getDevicekeyupload(): DeviceKeyUpload | void;
  setDevicekeyupload(value?: DeviceKeyUpload): ReservedRegistrationStartRequest;
  hasDevicekeyupload(): boolean;
  clearDevicekeyupload(): ReservedRegistrationStartRequest;

  getKeyservermessage(): string;
  setKeyservermessage(value: string): ReservedRegistrationStartRequest;

  getKeyserversignature(): string;
  setKeyserversignature(value: string): ReservedRegistrationStartRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ReservedRegistrationStartRequestObject;
  static toObject(includeInstance: boolean, msg: ReservedRegistrationStartRequest): ReservedRegistrationStartRequestObject;
  static serializeBinaryToWriter(message: ReservedRegistrationStartRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ReservedRegistrationStartRequest;
  static deserializeBinaryFromReader(message: ReservedRegistrationStartRequest, reader: BinaryReader): ReservedRegistrationStartRequest;
}

export type ReservedRegistrationStartRequestObject = {
  opaqueregistrationrequest: Uint8Array | string,
  username: string,
  devicekeyupload?: DeviceKeyUploadObject,
  keyservermessage: string,
  keyserversignature: string,
};

declare export class RegistrationFinishRequest extends Message {
  getSessionid(): string;
  setSessionid(value: string): RegistrationFinishRequest;

  getOpaqueregistrationupload(): Uint8Array | string;
  getOpaqueregistrationupload_asU8(): Uint8Array;
  getOpaqueregistrationupload_asB64(): string;
  setOpaqueregistrationupload(value: Uint8Array | string): RegistrationFinishRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RegistrationFinishRequestObject;
  static toObject(includeInstance: boolean, msg: RegistrationFinishRequest): RegistrationFinishRequestObject;
  static serializeBinaryToWriter(message: RegistrationFinishRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RegistrationFinishRequest;
  static deserializeBinaryFromReader(message: RegistrationFinishRequest, reader: BinaryReader): RegistrationFinishRequest;
}

export type RegistrationFinishRequestObject = {
  sessionid: string,
  opaqueregistrationupload: Uint8Array | string,
};

declare export class RegistrationStartResponse extends Message {
  getSessionid(): string;
  setSessionid(value: string): RegistrationStartResponse;

  getOpaqueregistrationresponse(): Uint8Array | string;
  getOpaqueregistrationresponse_asU8(): Uint8Array;
  getOpaqueregistrationresponse_asB64(): string;
  setOpaqueregistrationresponse(value: Uint8Array | string): RegistrationStartResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RegistrationStartResponseObject;
  static toObject(includeInstance: boolean, msg: RegistrationStartResponse): RegistrationStartResponseObject;
  static serializeBinaryToWriter(message: RegistrationStartResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RegistrationStartResponse;
  static deserializeBinaryFromReader(message: RegistrationStartResponse, reader: BinaryReader): RegistrationStartResponse;
}

export type RegistrationStartResponseObject = {
  sessionid: string,
  opaqueregistrationresponse: Uint8Array | string,
};

declare export class RegistrationFinishResponse extends Message {
  getUserid(): string;
  setUserid(value: string): RegistrationFinishResponse;

  getAccesstoken(): string;
  setAccesstoken(value: string): RegistrationFinishResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RegistrationFinishResponseObject;
  static toObject(includeInstance: boolean, msg: RegistrationFinishResponse): RegistrationFinishResponseObject;
  static serializeBinaryToWriter(message: RegistrationFinishResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RegistrationFinishResponse;
  static deserializeBinaryFromReader(message: RegistrationFinishResponse, reader: BinaryReader): RegistrationFinishResponse;
}

export type RegistrationFinishResponseObject = {
  userid: string,
  accesstoken: string,
};

declare export class UpdateUserPasswordStartRequest extends Message {
  getOpaqueregistrationrequest(): Uint8Array | string;
  getOpaqueregistrationrequest_asU8(): Uint8Array;
  getOpaqueregistrationrequest_asB64(): string;
  setOpaqueregistrationrequest(value: Uint8Array | string): UpdateUserPasswordStartRequest;

  getAccesstoken(): string;
  setAccesstoken(value: string): UpdateUserPasswordStartRequest;

  getUserid(): string;
  setUserid(value: string): UpdateUserPasswordStartRequest;

  getDeviceidkey(): string;
  setDeviceidkey(value: string): UpdateUserPasswordStartRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateUserPasswordStartRequestObject;
  static toObject(includeInstance: boolean, msg: UpdateUserPasswordStartRequest): UpdateUserPasswordStartRequestObject;
  static serializeBinaryToWriter(message: UpdateUserPasswordStartRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateUserPasswordStartRequest;
  static deserializeBinaryFromReader(message: UpdateUserPasswordStartRequest, reader: BinaryReader): UpdateUserPasswordStartRequest;
}

export type UpdateUserPasswordStartRequestObject = {
  opaqueregistrationrequest: Uint8Array | string,
  accesstoken: string,
  userid: string,
  deviceidkey: string,
};

declare export class UpdateUserPasswordFinishRequest extends Message {
  getSessionid(): string;
  setSessionid(value: string): UpdateUserPasswordFinishRequest;

  getOpaqueregistrationupload(): Uint8Array | string;
  getOpaqueregistrationupload_asU8(): Uint8Array;
  getOpaqueregistrationupload_asB64(): string;
  setOpaqueregistrationupload(value: Uint8Array | string): UpdateUserPasswordFinishRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateUserPasswordFinishRequestObject;
  static toObject(includeInstance: boolean, msg: UpdateUserPasswordFinishRequest): UpdateUserPasswordFinishRequestObject;
  static serializeBinaryToWriter(message: UpdateUserPasswordFinishRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateUserPasswordFinishRequest;
  static deserializeBinaryFromReader(message: UpdateUserPasswordFinishRequest, reader: BinaryReader): UpdateUserPasswordFinishRequest;
}

export type UpdateUserPasswordFinishRequestObject = {
  sessionid: string,
  opaqueregistrationupload: Uint8Array | string,
};

declare export class UpdateUserPasswordStartResponse extends Message {
  getSessionid(): string;
  setSessionid(value: string): UpdateUserPasswordStartResponse;

  getOpaqueregistrationresponse(): Uint8Array | string;
  getOpaqueregistrationresponse_asU8(): Uint8Array;
  getOpaqueregistrationresponse_asB64(): string;
  setOpaqueregistrationresponse(value: Uint8Array | string): UpdateUserPasswordStartResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateUserPasswordStartResponseObject;
  static toObject(includeInstance: boolean, msg: UpdateUserPasswordStartResponse): UpdateUserPasswordStartResponseObject;
  static serializeBinaryToWriter(message: UpdateUserPasswordStartResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateUserPasswordStartResponse;
  static deserializeBinaryFromReader(message: UpdateUserPasswordStartResponse, reader: BinaryReader): UpdateUserPasswordStartResponse;
}

export type UpdateUserPasswordStartResponseObject = {
  sessionid: string,
  opaqueregistrationresponse: Uint8Array | string,
};

declare export class OpaqueLoginStartRequest extends Message {
  getUsername(): string;
  setUsername(value: string): OpaqueLoginStartRequest;

  getOpaqueloginrequest(): Uint8Array | string;
  getOpaqueloginrequest_asU8(): Uint8Array;
  getOpaqueloginrequest_asB64(): string;
  setOpaqueloginrequest(value: Uint8Array | string): OpaqueLoginStartRequest;

  getDevicekeyupload(): DeviceKeyUpload | void;
  setDevicekeyupload(value?: DeviceKeyUpload): OpaqueLoginStartRequest;
  hasDevicekeyupload(): boolean;
  clearDevicekeyupload(): OpaqueLoginStartRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OpaqueLoginStartRequestObject;
  static toObject(includeInstance: boolean, msg: OpaqueLoginStartRequest): OpaqueLoginStartRequestObject;
  static serializeBinaryToWriter(message: OpaqueLoginStartRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OpaqueLoginStartRequest;
  static deserializeBinaryFromReader(message: OpaqueLoginStartRequest, reader: BinaryReader): OpaqueLoginStartRequest;
}

export type OpaqueLoginStartRequestObject = {
  username: string,
  opaqueloginrequest: Uint8Array | string,
  devicekeyupload?: DeviceKeyUploadObject,
};

declare export class OpaqueLoginFinishRequest extends Message {
  getSessionid(): string;
  setSessionid(value: string): OpaqueLoginFinishRequest;

  getOpaqueloginupload(): Uint8Array | string;
  getOpaqueloginupload_asU8(): Uint8Array;
  getOpaqueloginupload_asB64(): string;
  setOpaqueloginupload(value: Uint8Array | string): OpaqueLoginFinishRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OpaqueLoginFinishRequestObject;
  static toObject(includeInstance: boolean, msg: OpaqueLoginFinishRequest): OpaqueLoginFinishRequestObject;
  static serializeBinaryToWriter(message: OpaqueLoginFinishRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OpaqueLoginFinishRequest;
  static deserializeBinaryFromReader(message: OpaqueLoginFinishRequest, reader: BinaryReader): OpaqueLoginFinishRequest;
}

export type OpaqueLoginFinishRequestObject = {
  sessionid: string,
  opaqueloginupload: Uint8Array | string,
};

declare export class OpaqueLoginStartResponse extends Message {
  getSessionid(): string;
  setSessionid(value: string): OpaqueLoginStartResponse;

  getOpaqueloginresponse(): Uint8Array | string;
  getOpaqueloginresponse_asU8(): Uint8Array;
  getOpaqueloginresponse_asB64(): string;
  setOpaqueloginresponse(value: Uint8Array | string): OpaqueLoginStartResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OpaqueLoginStartResponseObject;
  static toObject(includeInstance: boolean, msg: OpaqueLoginStartResponse): OpaqueLoginStartResponseObject;
  static serializeBinaryToWriter(message: OpaqueLoginStartResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OpaqueLoginStartResponse;
  static deserializeBinaryFromReader(message: OpaqueLoginStartResponse, reader: BinaryReader): OpaqueLoginStartResponse;
}

export type OpaqueLoginStartResponseObject = {
  sessionid: string,
  opaqueloginresponse: Uint8Array | string,
};

declare export class OpaqueLoginFinishResponse extends Message {
  getUserid(): string;
  setUserid(value: string): OpaqueLoginFinishResponse;

  getAccesstoken(): string;
  setAccesstoken(value: string): OpaqueLoginFinishResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OpaqueLoginFinishResponseObject;
  static toObject(includeInstance: boolean, msg: OpaqueLoginFinishResponse): OpaqueLoginFinishResponseObject;
  static serializeBinaryToWriter(message: OpaqueLoginFinishResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OpaqueLoginFinishResponse;
  static deserializeBinaryFromReader(message: OpaqueLoginFinishResponse, reader: BinaryReader): OpaqueLoginFinishResponse;
}

export type OpaqueLoginFinishResponseObject = {
  userid: string,
  accesstoken: string,
};

declare export class WalletLoginRequest extends Message {
  getSiwemessage(): string;
  setSiwemessage(value: string): WalletLoginRequest;

  getSiwesignature(): string;
  setSiwesignature(value: string): WalletLoginRequest;

  getDevicekeyupload(): DeviceKeyUpload | void;
  setDevicekeyupload(value?: DeviceKeyUpload): WalletLoginRequest;
  hasDevicekeyupload(): boolean;
  clearDevicekeyupload(): WalletLoginRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): WalletLoginRequestObject;
  static toObject(includeInstance: boolean, msg: WalletLoginRequest): WalletLoginRequestObject;
  static serializeBinaryToWriter(message: WalletLoginRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): WalletLoginRequest;
  static deserializeBinaryFromReader(message: WalletLoginRequest, reader: BinaryReader): WalletLoginRequest;
}

export type WalletLoginRequestObject = {
  siwemessage: string,
  siwesignature: string,
  devicekeyupload?: DeviceKeyUploadObject,
};

declare export class ReservedWalletLoginRequest extends Message {
  getSiwemessage(): string;
  setSiwemessage(value: string): ReservedWalletLoginRequest;

  getSiwesignature(): string;
  setSiwesignature(value: string): ReservedWalletLoginRequest;

  getDevicekeyupload(): DeviceKeyUpload | void;
  setDevicekeyupload(value?: DeviceKeyUpload): ReservedWalletLoginRequest;
  hasDevicekeyupload(): boolean;
  clearDevicekeyupload(): ReservedWalletLoginRequest;

  getKeyservermessage(): string;
  setKeyservermessage(value: string): ReservedWalletLoginRequest;

  getKeyserversignature(): string;
  setKeyserversignature(value: string): ReservedWalletLoginRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ReservedWalletLoginRequestObject;
  static toObject(includeInstance: boolean, msg: ReservedWalletLoginRequest): ReservedWalletLoginRequestObject;
  static serializeBinaryToWriter(message: ReservedWalletLoginRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ReservedWalletLoginRequest;
  static deserializeBinaryFromReader(message: ReservedWalletLoginRequest, reader: BinaryReader): ReservedWalletLoginRequest;
}

export type ReservedWalletLoginRequestObject = {
  siwemessage: string,
  siwesignature: string,
  devicekeyupload?: DeviceKeyUploadObject,
  keyservermessage: string,
  keyserversignature: string,
};

declare export class WalletLoginResponse extends Message {
  getUserid(): string;
  setUserid(value: string): WalletLoginResponse;

  getAccesstoken(): string;
  setAccesstoken(value: string): WalletLoginResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): WalletLoginResponseObject;
  static toObject(includeInstance: boolean, msg: WalletLoginResponse): WalletLoginResponseObject;
  static serializeBinaryToWriter(message: WalletLoginResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): WalletLoginResponse;
  static deserializeBinaryFromReader(message: WalletLoginResponse, reader: BinaryReader): WalletLoginResponse;
}

export type WalletLoginResponseObject = {
  userid: string,
  accesstoken: string,
};

declare export class LogoutRequest extends Message {
  getAccesstoken(): string;
  setAccesstoken(value: string): LogoutRequest;

  getUserid(): string;
  setUserid(value: string): LogoutRequest;

  getDeviceidkey(): string;
  setDeviceidkey(value: string): LogoutRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LogoutRequestObject;
  static toObject(includeInstance: boolean, msg: LogoutRequest): LogoutRequestObject;
  static serializeBinaryToWriter(message: LogoutRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LogoutRequest;
  static deserializeBinaryFromReader(message: LogoutRequest, reader: BinaryReader): LogoutRequest;
}

export type LogoutRequestObject = {
  accesstoken: string,
  userid: string,
  deviceidkey: string,
};

declare export class DeleteUserRequest extends Message {
  getAccesstoken(): string;
  setAccesstoken(value: string): DeleteUserRequest;

  getUserid(): string;
  setUserid(value: string): DeleteUserRequest;

  getDeviceidkey(): string;
  setDeviceidkey(value: string): DeleteUserRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeleteUserRequestObject;
  static toObject(includeInstance: boolean, msg: DeleteUserRequest): DeleteUserRequestObject;
  static serializeBinaryToWriter(message: DeleteUserRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeleteUserRequest;
  static deserializeBinaryFromReader(message: DeleteUserRequest, reader: BinaryReader): DeleteUserRequest;
}

export type DeleteUserRequestObject = {
  accesstoken: string,
  userid: string,
  deviceidkey: string,
};

declare export class GenerateNonceResponse extends Message {
  getNonce(): string;
  setNonce(value: string): GenerateNonceResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GenerateNonceResponseObject;
  static toObject(includeInstance: boolean, msg: GenerateNonceResponse): GenerateNonceResponseObject;
  static serializeBinaryToWriter(message: GenerateNonceResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GenerateNonceResponse;
  static deserializeBinaryFromReader(message: GenerateNonceResponse, reader: BinaryReader): GenerateNonceResponse;
}

export type GenerateNonceResponseObject = {
  nonce: string,
};

declare export class OutboundKeyInfo extends Message {
  getIdentityinfo(): IdentityKeyInfo | void;
  setIdentityinfo(value?: IdentityKeyInfo): OutboundKeyInfo;
  hasIdentityinfo(): boolean;
  clearIdentityinfo(): OutboundKeyInfo;

  getContentprekey(): PreKey | void;
  setContentprekey(value?: PreKey): OutboundKeyInfo;
  hasContentprekey(): boolean;
  clearContentprekey(): OutboundKeyInfo;

  getNotifprekey(): PreKey | void;
  setNotifprekey(value?: PreKey): OutboundKeyInfo;
  hasNotifprekey(): boolean;
  clearNotifprekey(): OutboundKeyInfo;

  getOnetimecontentprekey(): string;
  setOnetimecontentprekey(value: string): OutboundKeyInfo;
  hasOnetimecontentprekey(): boolean;
  clearOnetimecontentprekey(): OutboundKeyInfo;

  getOnetimenotifprekey(): string;
  setOnetimenotifprekey(value: string): OutboundKeyInfo;
  hasOnetimenotifprekey(): boolean;
  clearOnetimenotifprekey(): OutboundKeyInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OutboundKeyInfoObject;
  static toObject(includeInstance: boolean, msg: OutboundKeyInfo): OutboundKeyInfoObject;
  static serializeBinaryToWriter(message: OutboundKeyInfo, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OutboundKeyInfo;
  static deserializeBinaryFromReader(message: OutboundKeyInfo, reader: BinaryReader): OutboundKeyInfo;
}

export type OutboundKeyInfoObject = {
  identityinfo?: IdentityKeyInfoObject,
  contentprekey?: PreKeyObject,
  notifprekey?: PreKeyObject,
  onetimecontentprekey?: string,
  onetimenotifprekey?: string,
};

export type IdentifierCase = 0 | 1 | 2;

declare export class OutboundKeysForUserRequest extends Message {
  getUsername(): string;
  setUsername(value: string): OutboundKeysForUserRequest;

  getWalletaddress(): string;
  setWalletaddress(value: string): OutboundKeysForUserRequest;

  getIdentifierCase(): IdentifierCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OutboundKeysForUserRequestObject;
  static toObject(includeInstance: boolean, msg: OutboundKeysForUserRequest): OutboundKeysForUserRequestObject;
  static serializeBinaryToWriter(message: OutboundKeysForUserRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OutboundKeysForUserRequest;
  static deserializeBinaryFromReader(message: OutboundKeysForUserRequest, reader: BinaryReader): OutboundKeysForUserRequest;
}

export type OutboundKeysForUserRequestObject = {
  username: string,
  walletaddress: string,
};

declare export class OutboundKeysForUserResponse extends Message {
  getDevicesMap(): ProtoMap<string, OutboundKeyInfo>;
  clearDevicesMap(): OutboundKeysForUserResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OutboundKeysForUserResponseObject;
  static toObject(includeInstance: boolean, msg: OutboundKeysForUserResponse): OutboundKeysForUserResponseObject;
  static serializeBinaryToWriter(message: OutboundKeysForUserResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OutboundKeysForUserResponse;
  static deserializeBinaryFromReader(message: OutboundKeysForUserResponse, reader: BinaryReader): OutboundKeysForUserResponse;
}

export type OutboundKeysForUserResponseObject = {
  devicesMap: Array<[string, OutboundKeyInfoObject]>,
};

declare export class InboundKeyInfo extends Message {
  getIdentityinfo(): IdentityKeyInfo | void;
  setIdentityinfo(value?: IdentityKeyInfo): InboundKeyInfo;
  hasIdentityinfo(): boolean;
  clearIdentityinfo(): InboundKeyInfo;

  getContentprekey(): PreKey | void;
  setContentprekey(value?: PreKey): InboundKeyInfo;
  hasContentprekey(): boolean;
  clearContentprekey(): InboundKeyInfo;

  getNotifprekey(): PreKey | void;
  setNotifprekey(value?: PreKey): InboundKeyInfo;
  hasNotifprekey(): boolean;
  clearNotifprekey(): InboundKeyInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InboundKeyInfoObject;
  static toObject(includeInstance: boolean, msg: InboundKeyInfo): InboundKeyInfoObject;
  static serializeBinaryToWriter(message: InboundKeyInfo, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InboundKeyInfo;
  static deserializeBinaryFromReader(message: InboundKeyInfo, reader: BinaryReader): InboundKeyInfo;
}

export type InboundKeyInfoObject = {
  identityinfo?: IdentityKeyInfoObject,
  contentprekey?: PreKeyObject,
  notifprekey?: PreKeyObject,
};


declare export class InboundKeysForUserRequest extends Message {
  getUsername(): string;
  setUsername(value: string): InboundKeysForUserRequest;

  getWalletaddress(): string;
  setWalletaddress(value: string): InboundKeysForUserRequest;

  getIdentifierCase(): IdentifierCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InboundKeysForUserRequestObject;
  static toObject(includeInstance: boolean, msg: InboundKeysForUserRequest): InboundKeysForUserRequestObject;
  static serializeBinaryToWriter(message: InboundKeysForUserRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InboundKeysForUserRequest;
  static deserializeBinaryFromReader(message: InboundKeysForUserRequest, reader: BinaryReader): InboundKeysForUserRequest;
}

export type InboundKeysForUserRequestObject = {
  username: string,
  walletaddress: string,
};

declare export class InboundKeysForUserResponse extends Message {
  getDevicesMap(): ProtoMap<string, InboundKeyInfo>;
  clearDevicesMap(): InboundKeysForUserResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InboundKeysForUserResponseObject;
  static toObject(includeInstance: boolean, msg: InboundKeysForUserResponse): InboundKeysForUserResponseObject;
  static serializeBinaryToWriter(message: InboundKeysForUserResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InboundKeysForUserResponse;
  static deserializeBinaryFromReader(message: InboundKeysForUserResponse, reader: BinaryReader): InboundKeysForUserResponse;
}

export type InboundKeysForUserResponseObject = {
  devicesMap: Array<[string, InboundKeyInfoObject]>,
}

declare export class UploadOneTimeKeysRequest extends Message {
  getUserid(): string;
  setUserid(value: string): UploadOneTimeKeysRequest;

  getDeviceid(): string;
  setDeviceid(value: string): UploadOneTimeKeysRequest;

  getAccesstoken(): string;
  setAccesstoken(value: string): UploadOneTimeKeysRequest;

  getContentonetimeprekeysList(): Array<string>;
  setContentonetimeprekeysList(value: Array<string>): UploadOneTimeKeysRequest;
  clearContentonetimeprekeysList(): UploadOneTimeKeysRequest;
  addContentonetimeprekeys(value: string, index?: number): UploadOneTimeKeysRequest;

  getNotifonetimeprekeysList(): Array<string>;
  setNotifonetimeprekeysList(value: Array<string>): UploadOneTimeKeysRequest;
  clearNotifonetimeprekeysList(): UploadOneTimeKeysRequest;
  addNotifonetimeprekeys(value: string, index?: number): UploadOneTimeKeysRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UploadOneTimeKeysRequestObject;
  static toObject(includeInstance: boolean, msg: UploadOneTimeKeysRequest): UploadOneTimeKeysRequestObject;
  static serializeBinaryToWriter(message: UploadOneTimeKeysRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UploadOneTimeKeysRequest;
  static deserializeBinaryFromReader(message: UploadOneTimeKeysRequest, reader: BinaryReader): UploadOneTimeKeysRequest;
}

export type UploadOneTimeKeysRequestObject = {
  userid: string,
  deviceid: string,
  accesstoken: string,
  contentonetimeprekeysList: Array<string>,
  notifonetimeprekeysList: Array<string>,
};

declare export class VerifyUserAccessTokenRequest extends Message {
  getUserid(): string;
  setUserid(value: string): VerifyUserAccessTokenRequest;

  getSigningpublickey(): string;
  setSigningpublickey(value: string): VerifyUserAccessTokenRequest;

  getAccesstoken(): string;
  setAccesstoken(value: string): VerifyUserAccessTokenRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VerifyUserAccessTokenRequestObject;
  static toObject(includeInstance: boolean, msg: VerifyUserAccessTokenRequest): VerifyUserAccessTokenRequestObject;
  static serializeBinaryToWriter(message: VerifyUserAccessTokenRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VerifyUserAccessTokenRequest;
  static deserializeBinaryFromReader(message: VerifyUserAccessTokenRequest, reader: BinaryReader): VerifyUserAccessTokenRequest;
}

export type VerifyUserAccessTokenRequestObject = {
  userid: string,
  signingpublickey: string,
  accesstoken: string,
};

declare export class VerifyUserAccessTokenResponse extends Message {
  getTokenvalid(): boolean;
  setTokenvalid(value: boolean): VerifyUserAccessTokenResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VerifyUserAccessTokenResponseObject;
  static toObject(includeInstance: boolean, msg: VerifyUserAccessTokenResponse): VerifyUserAccessTokenResponseObject;
  static serializeBinaryToWriter(message: VerifyUserAccessTokenResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VerifyUserAccessTokenResponse;
  static deserializeBinaryFromReader(message: VerifyUserAccessTokenResponse, reader: BinaryReader): VerifyUserAccessTokenResponse;
}

export type VerifyUserAccessTokenResponseObject = {
  tokenvalid: boolean,
};

declare export class AddReservedUsernamesRequest extends Message {
  getMessage(): string;
  setMessage(value: string): AddReservedUsernamesRequest;

  getSignature(): string;
  setSignature(value: string): AddReservedUsernamesRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AddReservedUsernamesRequestObject;
  static toObject(includeInstance: boolean, msg: AddReservedUsernamesRequest): AddReservedUsernamesRequestObject;
  static serializeBinaryToWriter(message: AddReservedUsernamesRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AddReservedUsernamesRequest;
  static deserializeBinaryFromReader(message: AddReservedUsernamesRequest, reader: BinaryReader): AddReservedUsernamesRequest;
}

export type AddReservedUsernamesRequestObject = {
  message: string,
  signature: string,
};

declare export class RemoveReservedUsernameRequest extends Message {
  getMessage(): string;
  setMessage(value: string): RemoveReservedUsernameRequest;

  getSignature(): string;
  setSignature(value: string): RemoveReservedUsernameRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RemoveReservedUsernameRequestObject;
  static toObject(includeInstance: boolean, msg: RemoveReservedUsernameRequest): RemoveReservedUsernameRequestObject;
  static serializeBinaryToWriter(message: RemoveReservedUsernameRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RemoveReservedUsernameRequest;
  static deserializeBinaryFromReader(message: RemoveReservedUsernameRequest, reader: BinaryReader): RemoveReservedUsernameRequest;
}

export type RemoveReservedUsernameRequestObject = {
  message: string,
  signature: string,
};

export type DeviceType = 0 | 1 | 2 | 3 | 4 | 5;
