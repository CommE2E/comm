/**
 * @fileoverview gRPC-Web generated client stub for identity.auth
 * @enhanceable
 * @public
 * @generated
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: identity_auth.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var identity_unauth_pb = require('./identity-unauth-structs.cjs')
const proto = {};
proto.identity = {};
proto.identity.auth = require('./identity-auth-structs.cjs');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.identity.auth.IdentityClientServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.identity.auth.IdentityClientServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.UploadOneTimeKeysRequest,
 *   !proto.identity.unauth.Empty>}
 */
const methodDescriptor_IdentityClientService_UploadOneTimeKeys = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/UploadOneTimeKeys',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.UploadOneTimeKeysRequest,
  identity_unauth_pb.Empty,
  /**
   * @param {!proto.identity.auth.UploadOneTimeKeysRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_unauth_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.auth.UploadOneTimeKeysRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.unauth.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.unauth.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.uploadOneTimeKeys =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/UploadOneTimeKeys',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_UploadOneTimeKeys,
      callback);
};


/**
 * @param {!proto.identity.auth.UploadOneTimeKeysRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.unauth.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.uploadOneTimeKeys =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/UploadOneTimeKeys',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_UploadOneTimeKeys);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.RefreshUserPrekeysRequest,
 *   !proto.identity.unauth.Empty>}
 */
const methodDescriptor_IdentityClientService_RefreshUserPrekeys = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/RefreshUserPrekeys',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.RefreshUserPrekeysRequest,
  identity_unauth_pb.Empty,
  /**
   * @param {!proto.identity.auth.RefreshUserPrekeysRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_unauth_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.auth.RefreshUserPrekeysRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.unauth.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.unauth.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.refreshUserPrekeys =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/RefreshUserPrekeys',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_RefreshUserPrekeys,
      callback);
};


/**
 * @param {!proto.identity.auth.RefreshUserPrekeysRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.unauth.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.refreshUserPrekeys =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/RefreshUserPrekeys',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_RefreshUserPrekeys);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.OutboundKeysForUserRequest,
 *   !proto.identity.auth.OutboundKeysForUserResponse>}
 */
const methodDescriptor_IdentityClientService_GetOutboundKeysForUser = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/GetOutboundKeysForUser',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.OutboundKeysForUserRequest,
  proto.identity.auth.OutboundKeysForUserResponse,
  /**
   * @param {!proto.identity.auth.OutboundKeysForUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.identity.auth.OutboundKeysForUserResponse.deserializeBinary
);


/**
 * @param {!proto.identity.auth.OutboundKeysForUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.auth.OutboundKeysForUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.auth.OutboundKeysForUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.getOutboundKeysForUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/GetOutboundKeysForUser',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_GetOutboundKeysForUser,
      callback);
};


/**
 * @param {!proto.identity.auth.OutboundKeysForUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.auth.OutboundKeysForUserResponse>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.getOutboundKeysForUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/GetOutboundKeysForUser',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_GetOutboundKeysForUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.InboundKeysForUserRequest,
 *   !proto.identity.auth.InboundKeysForUserResponse>}
 */
const methodDescriptor_IdentityClientService_GetInboundKeysForUser = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/GetInboundKeysForUser',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.InboundKeysForUserRequest,
  proto.identity.auth.InboundKeysForUserResponse,
  /**
   * @param {!proto.identity.auth.InboundKeysForUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.identity.auth.InboundKeysForUserResponse.deserializeBinary
);


/**
 * @param {!proto.identity.auth.InboundKeysForUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.auth.InboundKeysForUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.auth.InboundKeysForUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.getInboundKeysForUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/GetInboundKeysForUser',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_GetInboundKeysForUser,
      callback);
};


/**
 * @param {!proto.identity.auth.InboundKeysForUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.auth.InboundKeysForUserResponse>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.getInboundKeysForUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/GetInboundKeysForUser',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_GetInboundKeysForUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.OutboundKeysForUserRequest,
 *   !proto.identity.auth.KeyserverKeysResponse>}
 */
const methodDescriptor_IdentityClientService_GetKeyserverKeys = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/GetKeyserverKeys',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.OutboundKeysForUserRequest,
  proto.identity.auth.KeyserverKeysResponse,
  /**
   * @param {!proto.identity.auth.OutboundKeysForUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.identity.auth.KeyserverKeysResponse.deserializeBinary
);


/**
 * @param {!proto.identity.auth.OutboundKeysForUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.auth.KeyserverKeysResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.auth.KeyserverKeysResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.getKeyserverKeys =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/GetKeyserverKeys',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_GetKeyserverKeys,
      callback);
};


/**
 * @param {!proto.identity.auth.OutboundKeysForUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.auth.KeyserverKeysResponse>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.getKeyserverKeys =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/GetKeyserverKeys',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_GetKeyserverKeys);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.UpdateUserPasswordStartRequest,
 *   !proto.identity.auth.UpdateUserPasswordStartResponse>}
 */
const methodDescriptor_IdentityClientService_UpdateUserPasswordStart = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/UpdateUserPasswordStart',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.UpdateUserPasswordStartRequest,
  proto.identity.auth.UpdateUserPasswordStartResponse,
  /**
   * @param {!proto.identity.auth.UpdateUserPasswordStartRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.identity.auth.UpdateUserPasswordStartResponse.deserializeBinary
);


/**
 * @param {!proto.identity.auth.UpdateUserPasswordStartRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.auth.UpdateUserPasswordStartResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.auth.UpdateUserPasswordStartResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.updateUserPasswordStart =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/UpdateUserPasswordStart',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_UpdateUserPasswordStart,
      callback);
};


/**
 * @param {!proto.identity.auth.UpdateUserPasswordStartRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.auth.UpdateUserPasswordStartResponse>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.updateUserPasswordStart =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/UpdateUserPasswordStart',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_UpdateUserPasswordStart);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.UpdateUserPasswordFinishRequest,
 *   !proto.identity.unauth.Empty>}
 */
const methodDescriptor_IdentityClientService_UpdateUserPasswordFinish = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/UpdateUserPasswordFinish',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.UpdateUserPasswordFinishRequest,
  identity_unauth_pb.Empty,
  /**
   * @param {!proto.identity.auth.UpdateUserPasswordFinishRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_unauth_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.auth.UpdateUserPasswordFinishRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.unauth.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.unauth.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.updateUserPasswordFinish =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/UpdateUserPasswordFinish',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_UpdateUserPasswordFinish,
      callback);
};


/**
 * @param {!proto.identity.auth.UpdateUserPasswordFinishRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.unauth.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.updateUserPasswordFinish =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/UpdateUserPasswordFinish',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_UpdateUserPasswordFinish);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.unauth.Empty,
 *   !proto.identity.unauth.Empty>}
 */
const methodDescriptor_IdentityClientService_LogOutUser = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/LogOutUser',
  grpc.web.MethodType.UNARY,
  identity_unauth_pb.Empty,
  identity_unauth_pb.Empty,
  /**
   * @param {!proto.identity.unauth.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_unauth_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.unauth.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.unauth.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.unauth.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.logOutUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/LogOutUser',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_LogOutUser,
      callback);
};


/**
 * @param {!proto.identity.unauth.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.unauth.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.logOutUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/LogOutUser',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_LogOutUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.unauth.Empty,
 *   !proto.identity.unauth.Empty>}
 */
const methodDescriptor_IdentityClientService_LogOutSecondaryDevice = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/LogOutSecondaryDevice',
  grpc.web.MethodType.UNARY,
  identity_unauth_pb.Empty,
  identity_unauth_pb.Empty,
  /**
   * @param {!proto.identity.unauth.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_unauth_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.unauth.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.unauth.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.unauth.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.logOutSecondaryDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/LogOutSecondaryDevice',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_LogOutSecondaryDevice,
      callback);
};


/**
 * @param {!proto.identity.unauth.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.unauth.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.logOutSecondaryDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/LogOutSecondaryDevice',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_LogOutSecondaryDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.PrimaryDeviceLogoutRequest,
 *   !proto.identity.unauth.Empty>}
 */
const methodDescriptor_IdentityClientService_LogOutPrimaryDevice = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/LogOutPrimaryDevice',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.PrimaryDeviceLogoutRequest,
  identity_unauth_pb.Empty,
  /**
   * @param {!proto.identity.auth.PrimaryDeviceLogoutRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_unauth_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.auth.PrimaryDeviceLogoutRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.unauth.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.unauth.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.logOutPrimaryDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/LogOutPrimaryDevice',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_LogOutPrimaryDevice,
      callback);
};


/**
 * @param {!proto.identity.auth.PrimaryDeviceLogoutRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.unauth.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.logOutPrimaryDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/LogOutPrimaryDevice',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_LogOutPrimaryDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.DeletePasswordUserStartRequest,
 *   !proto.identity.auth.DeletePasswordUserStartResponse>}
 */
const methodDescriptor_IdentityClientService_DeletePasswordUserStart = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/DeletePasswordUserStart',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.DeletePasswordUserStartRequest,
  proto.identity.auth.DeletePasswordUserStartResponse,
  /**
   * @param {!proto.identity.auth.DeletePasswordUserStartRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.identity.auth.DeletePasswordUserStartResponse.deserializeBinary
);


/**
 * @param {!proto.identity.auth.DeletePasswordUserStartRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.auth.DeletePasswordUserStartResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.auth.DeletePasswordUserStartResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.deletePasswordUserStart =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/DeletePasswordUserStart',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_DeletePasswordUserStart,
      callback);
};


/**
 * @param {!proto.identity.auth.DeletePasswordUserStartRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.auth.DeletePasswordUserStartResponse>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.deletePasswordUserStart =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/DeletePasswordUserStart',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_DeletePasswordUserStart);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.DeletePasswordUserFinishRequest,
 *   !proto.identity.unauth.Empty>}
 */
const methodDescriptor_IdentityClientService_DeletePasswordUserFinish = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/DeletePasswordUserFinish',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.DeletePasswordUserFinishRequest,
  identity_unauth_pb.Empty,
  /**
   * @param {!proto.identity.auth.DeletePasswordUserFinishRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_unauth_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.auth.DeletePasswordUserFinishRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.unauth.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.unauth.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.deletePasswordUserFinish =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/DeletePasswordUserFinish',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_DeletePasswordUserFinish,
      callback);
};


/**
 * @param {!proto.identity.auth.DeletePasswordUserFinishRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.unauth.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.deletePasswordUserFinish =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/DeletePasswordUserFinish',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_DeletePasswordUserFinish);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.unauth.Empty,
 *   !proto.identity.unauth.Empty>}
 */
const methodDescriptor_IdentityClientService_DeleteWalletUser = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/DeleteWalletUser',
  grpc.web.MethodType.UNARY,
  identity_unauth_pb.Empty,
  identity_unauth_pb.Empty,
  /**
   * @param {!proto.identity.unauth.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_unauth_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.unauth.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.unauth.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.unauth.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.deleteWalletUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/DeleteWalletUser',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_DeleteWalletUser,
      callback);
};


/**
 * @param {!proto.identity.unauth.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.unauth.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.deleteWalletUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/DeleteWalletUser',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_DeleteWalletUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.PrivilegedDeleteUsersRequest,
 *   !proto.identity.unauth.Empty>}
 */
const methodDescriptor_IdentityClientService_PrivilegedDeleteUsers = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/PrivilegedDeleteUsers',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.PrivilegedDeleteUsersRequest,
  identity_unauth_pb.Empty,
  /**
   * @param {!proto.identity.auth.PrivilegedDeleteUsersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_unauth_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.auth.PrivilegedDeleteUsersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.unauth.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.unauth.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.privilegedDeleteUsers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/PrivilegedDeleteUsers',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_PrivilegedDeleteUsers,
      callback);
};


/**
 * @param {!proto.identity.auth.PrivilegedDeleteUsersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.unauth.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.privilegedDeleteUsers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/PrivilegedDeleteUsers',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_PrivilegedDeleteUsers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.PrivilegedResetUserPasswordStartRequest,
 *   !proto.identity.auth.PrivilegedResetUserPasswordStartResponse>}
 */
const methodDescriptor_IdentityClientService_PrivilegedResetUserPasswordStart = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/PrivilegedResetUserPasswordStart',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.PrivilegedResetUserPasswordStartRequest,
  proto.identity.auth.PrivilegedResetUserPasswordStartResponse,
  /**
   * @param {!proto.identity.auth.PrivilegedResetUserPasswordStartRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.identity.auth.PrivilegedResetUserPasswordStartResponse.deserializeBinary
);


/**
 * @param {!proto.identity.auth.PrivilegedResetUserPasswordStartRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.auth.PrivilegedResetUserPasswordStartResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.auth.PrivilegedResetUserPasswordStartResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.privilegedResetUserPasswordStart =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/PrivilegedResetUserPasswordStart',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_PrivilegedResetUserPasswordStart,
      callback);
};


/**
 * @param {!proto.identity.auth.PrivilegedResetUserPasswordStartRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.auth.PrivilegedResetUserPasswordStartResponse>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.privilegedResetUserPasswordStart =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/PrivilegedResetUserPasswordStart',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_PrivilegedResetUserPasswordStart);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.PrivilegedResetUserPasswordFinishRequest,
 *   !proto.identity.unauth.Empty>}
 */
const methodDescriptor_IdentityClientService_PrivilegedResetUserPasswordFinish = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/PrivilegedResetUserPasswordFinish',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.PrivilegedResetUserPasswordFinishRequest,
  identity_unauth_pb.Empty,
  /**
   * @param {!proto.identity.auth.PrivilegedResetUserPasswordFinishRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_unauth_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.auth.PrivilegedResetUserPasswordFinishRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.unauth.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.unauth.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.privilegedResetUserPasswordFinish =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/PrivilegedResetUserPasswordFinish',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_PrivilegedResetUserPasswordFinish,
      callback);
};


/**
 * @param {!proto.identity.auth.PrivilegedResetUserPasswordFinishRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.unauth.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.privilegedResetUserPasswordFinish =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/PrivilegedResetUserPasswordFinish',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_PrivilegedResetUserPasswordFinish);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.GetDeviceListRequest,
 *   !proto.identity.auth.GetDeviceListResponse>}
 */
const methodDescriptor_IdentityClientService_GetDeviceListForUser = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/GetDeviceListForUser',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.GetDeviceListRequest,
  proto.identity.auth.GetDeviceListResponse,
  /**
   * @param {!proto.identity.auth.GetDeviceListRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.identity.auth.GetDeviceListResponse.deserializeBinary
);


/**
 * @param {!proto.identity.auth.GetDeviceListRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.auth.GetDeviceListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.auth.GetDeviceListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.getDeviceListForUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/GetDeviceListForUser',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_GetDeviceListForUser,
      callback);
};


/**
 * @param {!proto.identity.auth.GetDeviceListRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.auth.GetDeviceListResponse>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.getDeviceListForUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/GetDeviceListForUser',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_GetDeviceListForUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.PeersDeviceListsRequest,
 *   !proto.identity.auth.PeersDeviceListsResponse>}
 */
const methodDescriptor_IdentityClientService_GetDeviceListsForUsers = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/GetDeviceListsForUsers',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.PeersDeviceListsRequest,
  proto.identity.auth.PeersDeviceListsResponse,
  /**
   * @param {!proto.identity.auth.PeersDeviceListsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.identity.auth.PeersDeviceListsResponse.deserializeBinary
);


/**
 * @param {!proto.identity.auth.PeersDeviceListsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.auth.PeersDeviceListsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.auth.PeersDeviceListsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.getDeviceListsForUsers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/GetDeviceListsForUsers',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_GetDeviceListsForUsers,
      callback);
};


/**
 * @param {!proto.identity.auth.PeersDeviceListsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.auth.PeersDeviceListsResponse>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.getDeviceListsForUsers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/GetDeviceListsForUsers',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_GetDeviceListsForUsers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.UpdateDeviceListRequest,
 *   !proto.identity.unauth.Empty>}
 */
const methodDescriptor_IdentityClientService_UpdateDeviceList = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/UpdateDeviceList',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.UpdateDeviceListRequest,
  identity_unauth_pb.Empty,
  /**
   * @param {!proto.identity.auth.UpdateDeviceListRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_unauth_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.auth.UpdateDeviceListRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.unauth.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.unauth.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.updateDeviceList =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/UpdateDeviceList',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_UpdateDeviceList,
      callback);
};


/**
 * @param {!proto.identity.auth.UpdateDeviceListRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.unauth.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.updateDeviceList =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/UpdateDeviceList',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_UpdateDeviceList);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.LinkFarcasterAccountRequest,
 *   !proto.identity.unauth.Empty>}
 */
const methodDescriptor_IdentityClientService_LinkFarcasterAccount = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/LinkFarcasterAccount',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.LinkFarcasterAccountRequest,
  identity_unauth_pb.Empty,
  /**
   * @param {!proto.identity.auth.LinkFarcasterAccountRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_unauth_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.auth.LinkFarcasterAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.unauth.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.unauth.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.linkFarcasterAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/LinkFarcasterAccount',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_LinkFarcasterAccount,
      callback);
};


/**
 * @param {!proto.identity.auth.LinkFarcasterAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.unauth.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.linkFarcasterAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/LinkFarcasterAccount',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_LinkFarcasterAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.unauth.Empty,
 *   !proto.identity.unauth.Empty>}
 */
const methodDescriptor_IdentityClientService_UnlinkFarcasterAccount = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/UnlinkFarcasterAccount',
  grpc.web.MethodType.UNARY,
  identity_unauth_pb.Empty,
  identity_unauth_pb.Empty,
  /**
   * @param {!proto.identity.unauth.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_unauth_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.unauth.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.unauth.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.unauth.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.unlinkFarcasterAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/UnlinkFarcasterAccount',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_UnlinkFarcasterAccount,
      callback);
};


/**
 * @param {!proto.identity.unauth.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.unauth.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.unlinkFarcasterAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/UnlinkFarcasterAccount',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_UnlinkFarcasterAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.auth.UserIdentitiesRequest,
 *   !proto.identity.auth.UserIdentitiesResponse>}
 */
const methodDescriptor_IdentityClientService_FindUserIdentities = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/FindUserIdentities',
  grpc.web.MethodType.UNARY,
  proto.identity.auth.UserIdentitiesRequest,
  proto.identity.auth.UserIdentitiesResponse,
  /**
   * @param {!proto.identity.auth.UserIdentitiesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.identity.auth.UserIdentitiesResponse.deserializeBinary
);


/**
 * @param {!proto.identity.auth.UserIdentitiesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.auth.UserIdentitiesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.auth.UserIdentitiesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.findUserIdentities =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/FindUserIdentities',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_FindUserIdentities,
      callback);
};


/**
 * @param {!proto.identity.auth.UserIdentitiesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.auth.UserIdentitiesResponse>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.findUserIdentities =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/FindUserIdentities',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_FindUserIdentities);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.unauth.Empty,
 *   !proto.identity.unauth.Empty>}
 */
const methodDescriptor_IdentityClientService_SyncPlatformDetails = new grpc.web.MethodDescriptor(
  '/identity.auth.IdentityClientService/SyncPlatformDetails',
  grpc.web.MethodType.UNARY,
  identity_unauth_pb.Empty,
  identity_unauth_pb.Empty,
  /**
   * @param {!proto.identity.unauth.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_unauth_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.unauth.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.unauth.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.unauth.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.auth.IdentityClientServiceClient.prototype.syncPlatformDetails =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.auth.IdentityClientService/SyncPlatformDetails',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_SyncPlatformDetails,
      callback);
};


/**
 * @param {!proto.identity.unauth.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.unauth.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.auth.IdentityClientServicePromiseClient.prototype.syncPlatformDetails =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.auth.IdentityClientService/SyncPlatformDetails',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_SyncPlatformDetails);
};


module.exports = proto.identity.auth;
