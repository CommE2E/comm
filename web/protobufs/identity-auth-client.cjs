/**
 * @fileoverview gRPC-Web generated client stub for identity.authenticated
 * @enhanceable
 * @public
 * @generated
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: identity_authenticated.proto

/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var identity_client_pb = require('./identity-structs.cjs')
const proto = {};
proto.identity = {};
proto.identity.authenticated = require('./identity-auth-structs.cjs');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.identity.authenticated.IdentityClientServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.identity.authenticated.IdentityClientServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.authenticated.UploadOneTimeKeysRequest,
 *   !proto.identity.client.Empty>}
 */
const methodDescriptor_IdentityClientService_UploadOneTimeKeys = new grpc.web.MethodDescriptor(
  '/identity.authenticated.IdentityClientService/UploadOneTimeKeys',
  grpc.web.MethodType.UNARY,
  proto.identity.authenticated.UploadOneTimeKeysRequest,
  identity_client_pb.Empty,
  /**
   * @param {!proto.identity.authenticated.UploadOneTimeKeysRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_client_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.authenticated.UploadOneTimeKeysRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.client.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.client.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.authenticated.IdentityClientServiceClient.prototype.uploadOneTimeKeys =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.authenticated.IdentityClientService/UploadOneTimeKeys',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_UploadOneTimeKeys,
      callback);
};


/**
 * @param {!proto.identity.authenticated.UploadOneTimeKeysRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.client.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.authenticated.IdentityClientServicePromiseClient.prototype.uploadOneTimeKeys =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.authenticated.IdentityClientService/UploadOneTimeKeys',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_UploadOneTimeKeys);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.authenticated.RefreshUserPreKeysRequest,
 *   !proto.identity.client.Empty>}
 */
const methodDescriptor_IdentityClientService_RefreshUserPreKeys = new grpc.web.MethodDescriptor(
  '/identity.authenticated.IdentityClientService/RefreshUserPreKeys',
  grpc.web.MethodType.UNARY,
  proto.identity.authenticated.RefreshUserPreKeysRequest,
  identity_client_pb.Empty,
  /**
   * @param {!proto.identity.authenticated.RefreshUserPreKeysRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  identity_client_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.identity.authenticated.RefreshUserPreKeysRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.client.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.client.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.authenticated.IdentityClientServiceClient.prototype.refreshUserPreKeys =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.authenticated.IdentityClientService/RefreshUserPreKeys',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_RefreshUserPreKeys,
      callback);
};


/**
 * @param {!proto.identity.authenticated.RefreshUserPreKeysRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.client.Empty>}
 *     Promise that resolves to the response
 */
proto.identity.authenticated.IdentityClientServicePromiseClient.prototype.refreshUserPreKeys =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.authenticated.IdentityClientService/RefreshUserPreKeys',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_RefreshUserPreKeys);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.identity.authenticated.OutboundKeysForUserRequest,
 *   !proto.identity.authenticated.KeyserverKeysResponse>}
 */
const methodDescriptor_IdentityClientService_GetKeyserverKeys = new grpc.web.MethodDescriptor(
  '/identity.authenticated.IdentityClientService/GetKeyserverKeys',
  grpc.web.MethodType.UNARY,
  proto.identity.authenticated.OutboundKeysForUserRequest,
  proto.identity.authenticated.KeyserverKeysResponse,
  /**
   * @param {!proto.identity.authenticated.OutboundKeysForUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.identity.authenticated.KeyserverKeysResponse.deserializeBinary
);


/**
 * @param {!proto.identity.authenticated.OutboundKeysForUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.identity.authenticated.KeyserverKeysResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.identity.authenticated.KeyserverKeysResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.identity.authenticated.IdentityClientServiceClient.prototype.getKeyserverKeys =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/identity.authenticated.IdentityClientService/GetKeyserverKeys',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_GetKeyserverKeys,
      callback);
};


/**
 * @param {!proto.identity.authenticated.OutboundKeysForUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.identity.authenticated.KeyserverKeysResponse>}
 *     Promise that resolves to the response
 */
proto.identity.authenticated.IdentityClientServicePromiseClient.prototype.getKeyserverKeys =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/identity.authenticated.IdentityClientService/GetKeyserverKeys',
      request,
      metadata || {},
      methodDescriptor_IdentityClientService_GetKeyserverKeys);
};


module.exports = proto.identity.authenticated;
