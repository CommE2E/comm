// source: identity_client.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 * @generated
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.identity.client.AddReservedUsernamesRequest', null, global);
goog.exportSymbol('proto.identity.client.DeviceKeyUpload', null, global);
goog.exportSymbol('proto.identity.client.DeviceType', null, global);
goog.exportSymbol('proto.identity.client.Empty', null, global);
goog.exportSymbol('proto.identity.client.GenerateNonceResponse', null, global);
goog.exportSymbol('proto.identity.client.IdentityKeyInfo', null, global);
goog.exportSymbol('proto.identity.client.OpaqueLoginFinishRequest', null, global);
goog.exportSymbol('proto.identity.client.OpaqueLoginFinishResponse', null, global);
goog.exportSymbol('proto.identity.client.OpaqueLoginStartRequest', null, global);
goog.exportSymbol('proto.identity.client.OpaqueLoginStartResponse', null, global);
goog.exportSymbol('proto.identity.client.PreKey', null, global);
goog.exportSymbol('proto.identity.client.RegistrationFinishRequest', null, global);
goog.exportSymbol('proto.identity.client.RegistrationFinishResponse', null, global);
goog.exportSymbol('proto.identity.client.RegistrationStartRequest', null, global);
goog.exportSymbol('proto.identity.client.RegistrationStartResponse', null, global);
goog.exportSymbol('proto.identity.client.RemoveReservedUsernameRequest', null, global);
goog.exportSymbol('proto.identity.client.ReservedRegistrationStartRequest', null, global);
goog.exportSymbol('proto.identity.client.ReservedWalletLoginRequest', null, global);
goog.exportSymbol('proto.identity.client.VerifyUserAccessTokenRequest', null, global);
goog.exportSymbol('proto.identity.client.VerifyUserAccessTokenResponse', null, global);
goog.exportSymbol('proto.identity.client.WalletLoginRequest', null, global);
goog.exportSymbol('proto.identity.client.WalletLoginResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.Empty.displayName = 'proto.identity.client.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.PreKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.PreKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.PreKey.displayName = 'proto.identity.client.PreKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.IdentityKeyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.IdentityKeyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.IdentityKeyInfo.displayName = 'proto.identity.client.IdentityKeyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.DeviceKeyUpload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.identity.client.DeviceKeyUpload.repeatedFields_, null);
};
goog.inherits(proto.identity.client.DeviceKeyUpload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.DeviceKeyUpload.displayName = 'proto.identity.client.DeviceKeyUpload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.RegistrationStartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.RegistrationStartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.RegistrationStartRequest.displayName = 'proto.identity.client.RegistrationStartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.ReservedRegistrationStartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.ReservedRegistrationStartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.ReservedRegistrationStartRequest.displayName = 'proto.identity.client.ReservedRegistrationStartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.RegistrationFinishRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.RegistrationFinishRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.RegistrationFinishRequest.displayName = 'proto.identity.client.RegistrationFinishRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.RegistrationStartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.RegistrationStartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.RegistrationStartResponse.displayName = 'proto.identity.client.RegistrationStartResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.RegistrationFinishResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.RegistrationFinishResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.RegistrationFinishResponse.displayName = 'proto.identity.client.RegistrationFinishResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.OpaqueLoginStartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.OpaqueLoginStartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.OpaqueLoginStartRequest.displayName = 'proto.identity.client.OpaqueLoginStartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.OpaqueLoginFinishRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.OpaqueLoginFinishRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.OpaqueLoginFinishRequest.displayName = 'proto.identity.client.OpaqueLoginFinishRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.OpaqueLoginStartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.OpaqueLoginStartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.OpaqueLoginStartResponse.displayName = 'proto.identity.client.OpaqueLoginStartResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.OpaqueLoginFinishResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.OpaqueLoginFinishResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.OpaqueLoginFinishResponse.displayName = 'proto.identity.client.OpaqueLoginFinishResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.WalletLoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.WalletLoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.WalletLoginRequest.displayName = 'proto.identity.client.WalletLoginRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.ReservedWalletLoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.ReservedWalletLoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.ReservedWalletLoginRequest.displayName = 'proto.identity.client.ReservedWalletLoginRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.WalletLoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.WalletLoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.WalletLoginResponse.displayName = 'proto.identity.client.WalletLoginResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.GenerateNonceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.GenerateNonceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.GenerateNonceResponse.displayName = 'proto.identity.client.GenerateNonceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.VerifyUserAccessTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.VerifyUserAccessTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.VerifyUserAccessTokenRequest.displayName = 'proto.identity.client.VerifyUserAccessTokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.VerifyUserAccessTokenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.VerifyUserAccessTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.VerifyUserAccessTokenResponse.displayName = 'proto.identity.client.VerifyUserAccessTokenResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.AddReservedUsernamesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.AddReservedUsernamesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.AddReservedUsernamesRequest.displayName = 'proto.identity.client.AddReservedUsernamesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.RemoveReservedUsernameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.RemoveReservedUsernameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.RemoveReservedUsernameRequest.displayName = 'proto.identity.client.RemoveReservedUsernameRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.Empty}
 */
proto.identity.client.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.Empty;
  return proto.identity.client.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.Empty}
 */
proto.identity.client.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.PreKey.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.PreKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.PreKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.PreKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    prekey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    prekeysignature: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.PreKey}
 */
proto.identity.client.PreKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.PreKey;
  return proto.identity.client.PreKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.PreKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.PreKey}
 */
proto.identity.client.PreKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrekey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrekeysignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.PreKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.PreKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.PreKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.PreKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrekey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrekeysignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string preKey = 1;
 * @return {string}
 */
proto.identity.client.PreKey.prototype.getPrekey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.PreKey} returns this
 */
proto.identity.client.PreKey.prototype.setPrekey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string preKeySignature = 2;
 * @return {string}
 */
proto.identity.client.PreKey.prototype.getPrekeysignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.PreKey} returns this
 */
proto.identity.client.PreKey.prototype.setPrekeysignature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.IdentityKeyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.IdentityKeyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.IdentityKeyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.IdentityKeyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: jspb.Message.getFieldWithDefault(msg, 1, ""),
    payloadsignature: jspb.Message.getFieldWithDefault(msg, 2, ""),
    socialproof: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.IdentityKeyInfo}
 */
proto.identity.client.IdentityKeyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.IdentityKeyInfo;
  return proto.identity.client.IdentityKeyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.IdentityKeyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.IdentityKeyInfo}
 */
proto.identity.client.IdentityKeyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayloadsignature(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSocialproof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.IdentityKeyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.IdentityKeyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.IdentityKeyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.IdentityKeyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPayloadsignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string payload = 1;
 * @return {string}
 */
proto.identity.client.IdentityKeyInfo.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.IdentityKeyInfo} returns this
 */
proto.identity.client.IdentityKeyInfo.prototype.setPayload = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string payloadSignature = 2;
 * @return {string}
 */
proto.identity.client.IdentityKeyInfo.prototype.getPayloadsignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.IdentityKeyInfo} returns this
 */
proto.identity.client.IdentityKeyInfo.prototype.setPayloadsignature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string socialProof = 3;
 * @return {string}
 */
proto.identity.client.IdentityKeyInfo.prototype.getSocialproof = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.IdentityKeyInfo} returns this
 */
proto.identity.client.IdentityKeyInfo.prototype.setSocialproof = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.identity.client.IdentityKeyInfo} returns this
 */
proto.identity.client.IdentityKeyInfo.prototype.clearSocialproof = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.IdentityKeyInfo.prototype.hasSocialproof = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.identity.client.DeviceKeyUpload.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.DeviceKeyUpload.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.DeviceKeyUpload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.DeviceKeyUpload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.DeviceKeyUpload.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicekeyinfo: (f = msg.getDevicekeyinfo()) && proto.identity.client.IdentityKeyInfo.toObject(includeInstance, f),
    contentupload: (f = msg.getContentupload()) && proto.identity.client.PreKey.toObject(includeInstance, f),
    notifupload: (f = msg.getNotifupload()) && proto.identity.client.PreKey.toObject(includeInstance, f),
    onetimecontentprekeysList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    onetimenotifprekeysList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    devicetype: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.DeviceKeyUpload}
 */
proto.identity.client.DeviceKeyUpload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.DeviceKeyUpload;
  return proto.identity.client.DeviceKeyUpload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.DeviceKeyUpload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.DeviceKeyUpload}
 */
proto.identity.client.DeviceKeyUpload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.identity.client.IdentityKeyInfo;
      reader.readMessage(value,proto.identity.client.IdentityKeyInfo.deserializeBinaryFromReader);
      msg.setDevicekeyinfo(value);
      break;
    case 2:
      var value = new proto.identity.client.PreKey;
      reader.readMessage(value,proto.identity.client.PreKey.deserializeBinaryFromReader);
      msg.setContentupload(value);
      break;
    case 3:
      var value = new proto.identity.client.PreKey;
      reader.readMessage(value,proto.identity.client.PreKey.deserializeBinaryFromReader);
      msg.setNotifupload(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addOnetimecontentprekeys(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addOnetimenotifprekeys(value);
      break;
    case 6:
      var value = /** @type {!proto.identity.client.DeviceType} */ (reader.readEnum());
      msg.setDevicetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.DeviceKeyUpload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.DeviceKeyUpload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.DeviceKeyUpload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.DeviceKeyUpload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicekeyinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.identity.client.IdentityKeyInfo.serializeBinaryToWriter
    );
  }
  f = message.getContentupload();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.identity.client.PreKey.serializeBinaryToWriter
    );
  }
  f = message.getNotifupload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identity.client.PreKey.serializeBinaryToWriter
    );
  }
  f = message.getOnetimecontentprekeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getOnetimenotifprekeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getDevicetype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional IdentityKeyInfo deviceKeyInfo = 1;
 * @return {?proto.identity.client.IdentityKeyInfo}
 */
proto.identity.client.DeviceKeyUpload.prototype.getDevicekeyinfo = function() {
  return /** @type{?proto.identity.client.IdentityKeyInfo} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.IdentityKeyInfo, 1));
};


/**
 * @param {?proto.identity.client.IdentityKeyInfo|undefined} value
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
*/
proto.identity.client.DeviceKeyUpload.prototype.setDevicekeyinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.clearDevicekeyinfo = function() {
  return this.setDevicekeyinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.DeviceKeyUpload.prototype.hasDevicekeyinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PreKey contentUpload = 2;
 * @return {?proto.identity.client.PreKey}
 */
proto.identity.client.DeviceKeyUpload.prototype.getContentupload = function() {
  return /** @type{?proto.identity.client.PreKey} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.PreKey, 2));
};


/**
 * @param {?proto.identity.client.PreKey|undefined} value
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
*/
proto.identity.client.DeviceKeyUpload.prototype.setContentupload = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.clearContentupload = function() {
  return this.setContentupload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.DeviceKeyUpload.prototype.hasContentupload = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PreKey notifUpload = 3;
 * @return {?proto.identity.client.PreKey}
 */
proto.identity.client.DeviceKeyUpload.prototype.getNotifupload = function() {
  return /** @type{?proto.identity.client.PreKey} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.PreKey, 3));
};


/**
 * @param {?proto.identity.client.PreKey|undefined} value
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
*/
proto.identity.client.DeviceKeyUpload.prototype.setNotifupload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.clearNotifupload = function() {
  return this.setNotifupload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.DeviceKeyUpload.prototype.hasNotifupload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string oneTimeContentPrekeys = 4;
 * @return {!Array<string>}
 */
proto.identity.client.DeviceKeyUpload.prototype.getOnetimecontentprekeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.setOnetimecontentprekeysList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.addOnetimecontentprekeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.clearOnetimecontentprekeysList = function() {
  return this.setOnetimecontentprekeysList([]);
};


/**
 * repeated string oneTimeNotifPrekeys = 5;
 * @return {!Array<string>}
 */
proto.identity.client.DeviceKeyUpload.prototype.getOnetimenotifprekeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.setOnetimenotifprekeysList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.addOnetimenotifprekeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.clearOnetimenotifprekeysList = function() {
  return this.setOnetimenotifprekeysList([]);
};


/**
 * optional DeviceType deviceType = 6;
 * @return {!proto.identity.client.DeviceType}
 */
proto.identity.client.DeviceKeyUpload.prototype.getDevicetype = function() {
  return /** @type {!proto.identity.client.DeviceType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.identity.client.DeviceType} value
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.setDevicetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.RegistrationStartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.RegistrationStartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.RegistrationStartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationStartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaqueregistrationrequest: msg.getOpaqueregistrationrequest_asB64(),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    devicekeyupload: (f = msg.getDevicekeyupload()) && proto.identity.client.DeviceKeyUpload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.RegistrationStartRequest}
 */
proto.identity.client.RegistrationStartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.RegistrationStartRequest;
  return proto.identity.client.RegistrationStartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.RegistrationStartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.RegistrationStartRequest}
 */
proto.identity.client.RegistrationStartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueregistrationrequest(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = new proto.identity.client.DeviceKeyUpload;
      reader.readMessage(value,proto.identity.client.DeviceKeyUpload.deserializeBinaryFromReader);
      msg.setDevicekeyupload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.RegistrationStartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.RegistrationStartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.RegistrationStartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationStartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaqueregistrationrequest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDevicekeyupload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identity.client.DeviceKeyUpload.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes opaqueRegistrationRequest = 1;
 * @return {string}
 */
proto.identity.client.RegistrationStartRequest.prototype.getOpaqueregistrationrequest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes opaqueRegistrationRequest = 1;
 * This is a type-conversion wrapper around `getOpaqueregistrationrequest()`
 * @return {string}
 */
proto.identity.client.RegistrationStartRequest.prototype.getOpaqueregistrationrequest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueregistrationrequest()));
};


/**
 * optional bytes opaqueRegistrationRequest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueregistrationrequest()`
 * @return {!Uint8Array}
 */
proto.identity.client.RegistrationStartRequest.prototype.getOpaqueregistrationrequest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueregistrationrequest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.RegistrationStartRequest} returns this
 */
proto.identity.client.RegistrationStartRequest.prototype.setOpaqueregistrationrequest = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.identity.client.RegistrationStartRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.RegistrationStartRequest} returns this
 */
proto.identity.client.RegistrationStartRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DeviceKeyUpload deviceKeyUpload = 3;
 * @return {?proto.identity.client.DeviceKeyUpload}
 */
proto.identity.client.RegistrationStartRequest.prototype.getDevicekeyupload = function() {
  return /** @type{?proto.identity.client.DeviceKeyUpload} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.DeviceKeyUpload, 3));
};


/**
 * @param {?proto.identity.client.DeviceKeyUpload|undefined} value
 * @return {!proto.identity.client.RegistrationStartRequest} returns this
*/
proto.identity.client.RegistrationStartRequest.prototype.setDevicekeyupload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.RegistrationStartRequest} returns this
 */
proto.identity.client.RegistrationStartRequest.prototype.clearDevicekeyupload = function() {
  return this.setDevicekeyupload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.RegistrationStartRequest.prototype.hasDevicekeyupload = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.ReservedRegistrationStartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.ReservedRegistrationStartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.ReservedRegistrationStartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.ReservedRegistrationStartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaqueregistrationrequest: msg.getOpaqueregistrationrequest_asB64(),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    devicekeyupload: (f = msg.getDevicekeyupload()) && proto.identity.client.DeviceKeyUpload.toObject(includeInstance, f),
    keyservermessage: jspb.Message.getFieldWithDefault(msg, 4, ""),
    keyserversignature: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.ReservedRegistrationStartRequest}
 */
proto.identity.client.ReservedRegistrationStartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.ReservedRegistrationStartRequest;
  return proto.identity.client.ReservedRegistrationStartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.ReservedRegistrationStartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.ReservedRegistrationStartRequest}
 */
proto.identity.client.ReservedRegistrationStartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueregistrationrequest(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = new proto.identity.client.DeviceKeyUpload;
      reader.readMessage(value,proto.identity.client.DeviceKeyUpload.deserializeBinaryFromReader);
      msg.setDevicekeyupload(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyservermessage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyserversignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.ReservedRegistrationStartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.ReservedRegistrationStartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.ReservedRegistrationStartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.ReservedRegistrationStartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaqueregistrationrequest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDevicekeyupload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identity.client.DeviceKeyUpload.serializeBinaryToWriter
    );
  }
  f = message.getKeyservermessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getKeyserversignature();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional bytes opaqueRegistrationRequest = 1;
 * @return {string}
 */
proto.identity.client.ReservedRegistrationStartRequest.prototype.getOpaqueregistrationrequest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes opaqueRegistrationRequest = 1;
 * This is a type-conversion wrapper around `getOpaqueregistrationrequest()`
 * @return {string}
 */
proto.identity.client.ReservedRegistrationStartRequest.prototype.getOpaqueregistrationrequest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueregistrationrequest()));
};


/**
 * optional bytes opaqueRegistrationRequest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueregistrationrequest()`
 * @return {!Uint8Array}
 */
proto.identity.client.ReservedRegistrationStartRequest.prototype.getOpaqueregistrationrequest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueregistrationrequest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.ReservedRegistrationStartRequest} returns this
 */
proto.identity.client.ReservedRegistrationStartRequest.prototype.setOpaqueregistrationrequest = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.identity.client.ReservedRegistrationStartRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.ReservedRegistrationStartRequest} returns this
 */
proto.identity.client.ReservedRegistrationStartRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DeviceKeyUpload deviceKeyUpload = 3;
 * @return {?proto.identity.client.DeviceKeyUpload}
 */
proto.identity.client.ReservedRegistrationStartRequest.prototype.getDevicekeyupload = function() {
  return /** @type{?proto.identity.client.DeviceKeyUpload} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.DeviceKeyUpload, 3));
};


/**
 * @param {?proto.identity.client.DeviceKeyUpload|undefined} value
 * @return {!proto.identity.client.ReservedRegistrationStartRequest} returns this
*/
proto.identity.client.ReservedRegistrationStartRequest.prototype.setDevicekeyupload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.ReservedRegistrationStartRequest} returns this
 */
proto.identity.client.ReservedRegistrationStartRequest.prototype.clearDevicekeyupload = function() {
  return this.setDevicekeyupload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.ReservedRegistrationStartRequest.prototype.hasDevicekeyupload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string keyserverMessage = 4;
 * @return {string}
 */
proto.identity.client.ReservedRegistrationStartRequest.prototype.getKeyservermessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.ReservedRegistrationStartRequest} returns this
 */
proto.identity.client.ReservedRegistrationStartRequest.prototype.setKeyservermessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string keyserverSignature = 5;
 * @return {string}
 */
proto.identity.client.ReservedRegistrationStartRequest.prototype.getKeyserversignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.ReservedRegistrationStartRequest} returns this
 */
proto.identity.client.ReservedRegistrationStartRequest.prototype.setKeyserversignature = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.RegistrationFinishRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.RegistrationFinishRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.RegistrationFinishRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationFinishRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opaqueregistrationupload: msg.getOpaqueregistrationupload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.RegistrationFinishRequest}
 */
proto.identity.client.RegistrationFinishRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.RegistrationFinishRequest;
  return proto.identity.client.RegistrationFinishRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.RegistrationFinishRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.RegistrationFinishRequest}
 */
proto.identity.client.RegistrationFinishRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueregistrationupload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.RegistrationFinishRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.RegistrationFinishRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.RegistrationFinishRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationFinishRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpaqueregistrationupload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string sessionID = 1;
 * @return {string}
 */
proto.identity.client.RegistrationFinishRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.RegistrationFinishRequest} returns this
 */
proto.identity.client.RegistrationFinishRequest.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes opaqueRegistrationUpload = 2;
 * @return {string}
 */
proto.identity.client.RegistrationFinishRequest.prototype.getOpaqueregistrationupload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes opaqueRegistrationUpload = 2;
 * This is a type-conversion wrapper around `getOpaqueregistrationupload()`
 * @return {string}
 */
proto.identity.client.RegistrationFinishRequest.prototype.getOpaqueregistrationupload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueregistrationupload()));
};


/**
 * optional bytes opaqueRegistrationUpload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueregistrationupload()`
 * @return {!Uint8Array}
 */
proto.identity.client.RegistrationFinishRequest.prototype.getOpaqueregistrationupload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueregistrationupload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.RegistrationFinishRequest} returns this
 */
proto.identity.client.RegistrationFinishRequest.prototype.setOpaqueregistrationupload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.RegistrationStartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.RegistrationStartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.RegistrationStartResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationStartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opaqueregistrationresponse: msg.getOpaqueregistrationresponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.RegistrationStartResponse}
 */
proto.identity.client.RegistrationStartResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.RegistrationStartResponse;
  return proto.identity.client.RegistrationStartResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.RegistrationStartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.RegistrationStartResponse}
 */
proto.identity.client.RegistrationStartResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueregistrationresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.RegistrationStartResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.RegistrationStartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.RegistrationStartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationStartResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpaqueregistrationresponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string sessionID = 1;
 * @return {string}
 */
proto.identity.client.RegistrationStartResponse.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.RegistrationStartResponse} returns this
 */
proto.identity.client.RegistrationStartResponse.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes opaqueRegistrationResponse = 2;
 * @return {string}
 */
proto.identity.client.RegistrationStartResponse.prototype.getOpaqueregistrationresponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes opaqueRegistrationResponse = 2;
 * This is a type-conversion wrapper around `getOpaqueregistrationresponse()`
 * @return {string}
 */
proto.identity.client.RegistrationStartResponse.prototype.getOpaqueregistrationresponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueregistrationresponse()));
};


/**
 * optional bytes opaqueRegistrationResponse = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueregistrationresponse()`
 * @return {!Uint8Array}
 */
proto.identity.client.RegistrationStartResponse.prototype.getOpaqueregistrationresponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueregistrationresponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.RegistrationStartResponse} returns this
 */
proto.identity.client.RegistrationStartResponse.prototype.setOpaqueregistrationresponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.RegistrationFinishResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.RegistrationFinishResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.RegistrationFinishResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationFinishResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accesstoken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.RegistrationFinishResponse}
 */
proto.identity.client.RegistrationFinishResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.RegistrationFinishResponse;
  return proto.identity.client.RegistrationFinishResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.RegistrationFinishResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.RegistrationFinishResponse}
 */
proto.identity.client.RegistrationFinishResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.RegistrationFinishResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.RegistrationFinishResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.RegistrationFinishResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationFinishResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string userID = 1;
 * @return {string}
 */
proto.identity.client.RegistrationFinishResponse.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.RegistrationFinishResponse} returns this
 */
proto.identity.client.RegistrationFinishResponse.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string accessToken = 2;
 * @return {string}
 */
proto.identity.client.RegistrationFinishResponse.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.RegistrationFinishResponse} returns this
 */
proto.identity.client.RegistrationFinishResponse.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.OpaqueLoginStartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.OpaqueLoginStartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginStartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opaqueloginrequest: msg.getOpaqueloginrequest_asB64(),
    devicekeyupload: (f = msg.getDevicekeyupload()) && proto.identity.client.DeviceKeyUpload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.OpaqueLoginStartRequest}
 */
proto.identity.client.OpaqueLoginStartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.OpaqueLoginStartRequest;
  return proto.identity.client.OpaqueLoginStartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.OpaqueLoginStartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.OpaqueLoginStartRequest}
 */
proto.identity.client.OpaqueLoginStartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueloginrequest(value);
      break;
    case 3:
      var value = new proto.identity.client.DeviceKeyUpload;
      reader.readMessage(value,proto.identity.client.DeviceKeyUpload.deserializeBinaryFromReader);
      msg.setDevicekeyupload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.OpaqueLoginStartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.OpaqueLoginStartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginStartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpaqueloginrequest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDevicekeyupload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identity.client.DeviceKeyUpload.serializeBinaryToWriter
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.OpaqueLoginStartRequest} returns this
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes opaqueLoginRequest = 2;
 * @return {string}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.getOpaqueloginrequest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes opaqueLoginRequest = 2;
 * This is a type-conversion wrapper around `getOpaqueloginrequest()`
 * @return {string}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.getOpaqueloginrequest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueloginrequest()));
};


/**
 * optional bytes opaqueLoginRequest = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueloginrequest()`
 * @return {!Uint8Array}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.getOpaqueloginrequest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueloginrequest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.OpaqueLoginStartRequest} returns this
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.setOpaqueloginrequest = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional DeviceKeyUpload deviceKeyUpload = 3;
 * @return {?proto.identity.client.DeviceKeyUpload}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.getDevicekeyupload = function() {
  return /** @type{?proto.identity.client.DeviceKeyUpload} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.DeviceKeyUpload, 3));
};


/**
 * @param {?proto.identity.client.DeviceKeyUpload|undefined} value
 * @return {!proto.identity.client.OpaqueLoginStartRequest} returns this
*/
proto.identity.client.OpaqueLoginStartRequest.prototype.setDevicekeyupload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.OpaqueLoginStartRequest} returns this
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.clearDevicekeyupload = function() {
  return this.setDevicekeyupload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.hasDevicekeyupload = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.OpaqueLoginFinishRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.OpaqueLoginFinishRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginFinishRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opaqueloginupload: msg.getOpaqueloginupload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.OpaqueLoginFinishRequest}
 */
proto.identity.client.OpaqueLoginFinishRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.OpaqueLoginFinishRequest;
  return proto.identity.client.OpaqueLoginFinishRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.OpaqueLoginFinishRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.OpaqueLoginFinishRequest}
 */
proto.identity.client.OpaqueLoginFinishRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueloginupload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.OpaqueLoginFinishRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.OpaqueLoginFinishRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginFinishRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpaqueloginupload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string sessionID = 1;
 * @return {string}
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.OpaqueLoginFinishRequest} returns this
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes opaqueLoginUpload = 2;
 * @return {string}
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.getOpaqueloginupload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes opaqueLoginUpload = 2;
 * This is a type-conversion wrapper around `getOpaqueloginupload()`
 * @return {string}
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.getOpaqueloginupload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueloginupload()));
};


/**
 * optional bytes opaqueLoginUpload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueloginupload()`
 * @return {!Uint8Array}
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.getOpaqueloginupload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueloginupload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.OpaqueLoginFinishRequest} returns this
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.setOpaqueloginupload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.OpaqueLoginStartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.OpaqueLoginStartResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginStartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opaqueloginresponse: msg.getOpaqueloginresponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.OpaqueLoginStartResponse}
 */
proto.identity.client.OpaqueLoginStartResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.OpaqueLoginStartResponse;
  return proto.identity.client.OpaqueLoginStartResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.OpaqueLoginStartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.OpaqueLoginStartResponse}
 */
proto.identity.client.OpaqueLoginStartResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueloginresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.OpaqueLoginStartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.OpaqueLoginStartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginStartResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpaqueloginresponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string sessionID = 1;
 * @return {string}
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.OpaqueLoginStartResponse} returns this
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes opaqueLoginResponse = 2;
 * @return {string}
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.getOpaqueloginresponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes opaqueLoginResponse = 2;
 * This is a type-conversion wrapper around `getOpaqueloginresponse()`
 * @return {string}
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.getOpaqueloginresponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueloginresponse()));
};


/**
 * optional bytes opaqueLoginResponse = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueloginresponse()`
 * @return {!Uint8Array}
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.getOpaqueloginresponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueloginresponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.OpaqueLoginStartResponse} returns this
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.setOpaqueloginresponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.OpaqueLoginFinishResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.OpaqueLoginFinishResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.OpaqueLoginFinishResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginFinishResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accesstoken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.OpaqueLoginFinishResponse}
 */
proto.identity.client.OpaqueLoginFinishResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.OpaqueLoginFinishResponse;
  return proto.identity.client.OpaqueLoginFinishResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.OpaqueLoginFinishResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.OpaqueLoginFinishResponse}
 */
proto.identity.client.OpaqueLoginFinishResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.OpaqueLoginFinishResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.OpaqueLoginFinishResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.OpaqueLoginFinishResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginFinishResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string userID = 1;
 * @return {string}
 */
proto.identity.client.OpaqueLoginFinishResponse.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.OpaqueLoginFinishResponse} returns this
 */
proto.identity.client.OpaqueLoginFinishResponse.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string accessToken = 2;
 * @return {string}
 */
proto.identity.client.OpaqueLoginFinishResponse.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.OpaqueLoginFinishResponse} returns this
 */
proto.identity.client.OpaqueLoginFinishResponse.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.WalletLoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.WalletLoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.WalletLoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.WalletLoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    siwemessage: jspb.Message.getFieldWithDefault(msg, 1, ""),
    siwesignature: jspb.Message.getFieldWithDefault(msg, 2, ""),
    devicekeyupload: (f = msg.getDevicekeyupload()) && proto.identity.client.DeviceKeyUpload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.WalletLoginRequest}
 */
proto.identity.client.WalletLoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.WalletLoginRequest;
  return proto.identity.client.WalletLoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.WalletLoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.WalletLoginRequest}
 */
proto.identity.client.WalletLoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSiwemessage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSiwesignature(value);
      break;
    case 3:
      var value = new proto.identity.client.DeviceKeyUpload;
      reader.readMessage(value,proto.identity.client.DeviceKeyUpload.deserializeBinaryFromReader);
      msg.setDevicekeyupload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.WalletLoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.WalletLoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.WalletLoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.WalletLoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSiwemessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSiwesignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDevicekeyupload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identity.client.DeviceKeyUpload.serializeBinaryToWriter
    );
  }
};


/**
 * optional string siweMessage = 1;
 * @return {string}
 */
proto.identity.client.WalletLoginRequest.prototype.getSiwemessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.WalletLoginRequest} returns this
 */
proto.identity.client.WalletLoginRequest.prototype.setSiwemessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string siweSignature = 2;
 * @return {string}
 */
proto.identity.client.WalletLoginRequest.prototype.getSiwesignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.WalletLoginRequest} returns this
 */
proto.identity.client.WalletLoginRequest.prototype.setSiwesignature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DeviceKeyUpload deviceKeyUpload = 3;
 * @return {?proto.identity.client.DeviceKeyUpload}
 */
proto.identity.client.WalletLoginRequest.prototype.getDevicekeyupload = function() {
  return /** @type{?proto.identity.client.DeviceKeyUpload} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.DeviceKeyUpload, 3));
};


/**
 * @param {?proto.identity.client.DeviceKeyUpload|undefined} value
 * @return {!proto.identity.client.WalletLoginRequest} returns this
*/
proto.identity.client.WalletLoginRequest.prototype.setDevicekeyupload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.WalletLoginRequest} returns this
 */
proto.identity.client.WalletLoginRequest.prototype.clearDevicekeyupload = function() {
  return this.setDevicekeyupload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.WalletLoginRequest.prototype.hasDevicekeyupload = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.ReservedWalletLoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.ReservedWalletLoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.ReservedWalletLoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.ReservedWalletLoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    siwemessage: jspb.Message.getFieldWithDefault(msg, 1, ""),
    siwesignature: jspb.Message.getFieldWithDefault(msg, 2, ""),
    devicekeyupload: (f = msg.getDevicekeyupload()) && proto.identity.client.DeviceKeyUpload.toObject(includeInstance, f),
    keyservermessage: jspb.Message.getFieldWithDefault(msg, 4, ""),
    keyserversignature: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.ReservedWalletLoginRequest}
 */
proto.identity.client.ReservedWalletLoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.ReservedWalletLoginRequest;
  return proto.identity.client.ReservedWalletLoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.ReservedWalletLoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.ReservedWalletLoginRequest}
 */
proto.identity.client.ReservedWalletLoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSiwemessage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSiwesignature(value);
      break;
    case 3:
      var value = new proto.identity.client.DeviceKeyUpload;
      reader.readMessage(value,proto.identity.client.DeviceKeyUpload.deserializeBinaryFromReader);
      msg.setDevicekeyupload(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyservermessage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyserversignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.ReservedWalletLoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.ReservedWalletLoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.ReservedWalletLoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.ReservedWalletLoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSiwemessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSiwesignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDevicekeyupload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identity.client.DeviceKeyUpload.serializeBinaryToWriter
    );
  }
  f = message.getKeyservermessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getKeyserversignature();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string siweMessage = 1;
 * @return {string}
 */
proto.identity.client.ReservedWalletLoginRequest.prototype.getSiwemessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.ReservedWalletLoginRequest} returns this
 */
proto.identity.client.ReservedWalletLoginRequest.prototype.setSiwemessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string siweSignature = 2;
 * @return {string}
 */
proto.identity.client.ReservedWalletLoginRequest.prototype.getSiwesignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.ReservedWalletLoginRequest} returns this
 */
proto.identity.client.ReservedWalletLoginRequest.prototype.setSiwesignature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DeviceKeyUpload deviceKeyUpload = 3;
 * @return {?proto.identity.client.DeviceKeyUpload}
 */
proto.identity.client.ReservedWalletLoginRequest.prototype.getDevicekeyupload = function() {
  return /** @type{?proto.identity.client.DeviceKeyUpload} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.DeviceKeyUpload, 3));
};


/**
 * @param {?proto.identity.client.DeviceKeyUpload|undefined} value
 * @return {!proto.identity.client.ReservedWalletLoginRequest} returns this
*/
proto.identity.client.ReservedWalletLoginRequest.prototype.setDevicekeyupload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.ReservedWalletLoginRequest} returns this
 */
proto.identity.client.ReservedWalletLoginRequest.prototype.clearDevicekeyupload = function() {
  return this.setDevicekeyupload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.ReservedWalletLoginRequest.prototype.hasDevicekeyupload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string keyserverMessage = 4;
 * @return {string}
 */
proto.identity.client.ReservedWalletLoginRequest.prototype.getKeyservermessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.ReservedWalletLoginRequest} returns this
 */
proto.identity.client.ReservedWalletLoginRequest.prototype.setKeyservermessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string keyserverSignature = 5;
 * @return {string}
 */
proto.identity.client.ReservedWalletLoginRequest.prototype.getKeyserversignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.ReservedWalletLoginRequest} returns this
 */
proto.identity.client.ReservedWalletLoginRequest.prototype.setKeyserversignature = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.WalletLoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.WalletLoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.WalletLoginResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.WalletLoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accesstoken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.WalletLoginResponse}
 */
proto.identity.client.WalletLoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.WalletLoginResponse;
  return proto.identity.client.WalletLoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.WalletLoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.WalletLoginResponse}
 */
proto.identity.client.WalletLoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.WalletLoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.WalletLoginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.WalletLoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.WalletLoginResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string userID = 1;
 * @return {string}
 */
proto.identity.client.WalletLoginResponse.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.WalletLoginResponse} returns this
 */
proto.identity.client.WalletLoginResponse.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string accessToken = 2;
 * @return {string}
 */
proto.identity.client.WalletLoginResponse.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.WalletLoginResponse} returns this
 */
proto.identity.client.WalletLoginResponse.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.GenerateNonceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.GenerateNonceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.GenerateNonceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.GenerateNonceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.GenerateNonceResponse}
 */
proto.identity.client.GenerateNonceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.GenerateNonceResponse;
  return proto.identity.client.GenerateNonceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.GenerateNonceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.GenerateNonceResponse}
 */
proto.identity.client.GenerateNonceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.GenerateNonceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.GenerateNonceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.GenerateNonceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.GenerateNonceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string nonce = 1;
 * @return {string}
 */
proto.identity.client.GenerateNonceResponse.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.GenerateNonceResponse} returns this
 */
proto.identity.client.GenerateNonceResponse.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.VerifyUserAccessTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.VerifyUserAccessTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.VerifyUserAccessTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.VerifyUserAccessTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signingpublickey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    accesstoken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.VerifyUserAccessTokenRequest}
 */
proto.identity.client.VerifyUserAccessTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.VerifyUserAccessTokenRequest;
  return proto.identity.client.VerifyUserAccessTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.VerifyUserAccessTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.VerifyUserAccessTokenRequest}
 */
proto.identity.client.VerifyUserAccessTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigningpublickey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.VerifyUserAccessTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.VerifyUserAccessTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.VerifyUserAccessTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.VerifyUserAccessTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSigningpublickey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string userID = 1;
 * @return {string}
 */
proto.identity.client.VerifyUserAccessTokenRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.VerifyUserAccessTokenRequest} returns this
 */
proto.identity.client.VerifyUserAccessTokenRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string signingPublicKey = 2;
 * @return {string}
 */
proto.identity.client.VerifyUserAccessTokenRequest.prototype.getSigningpublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.VerifyUserAccessTokenRequest} returns this
 */
proto.identity.client.VerifyUserAccessTokenRequest.prototype.setSigningpublickey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string accessToken = 3;
 * @return {string}
 */
proto.identity.client.VerifyUserAccessTokenRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.VerifyUserAccessTokenRequest} returns this
 */
proto.identity.client.VerifyUserAccessTokenRequest.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.VerifyUserAccessTokenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.VerifyUserAccessTokenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.VerifyUserAccessTokenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.VerifyUserAccessTokenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenvalid: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.VerifyUserAccessTokenResponse}
 */
proto.identity.client.VerifyUserAccessTokenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.VerifyUserAccessTokenResponse;
  return proto.identity.client.VerifyUserAccessTokenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.VerifyUserAccessTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.VerifyUserAccessTokenResponse}
 */
proto.identity.client.VerifyUserAccessTokenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTokenvalid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.VerifyUserAccessTokenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.VerifyUserAccessTokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.VerifyUserAccessTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.VerifyUserAccessTokenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenvalid();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool tokenValid = 1;
 * @return {boolean}
 */
proto.identity.client.VerifyUserAccessTokenResponse.prototype.getTokenvalid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.identity.client.VerifyUserAccessTokenResponse} returns this
 */
proto.identity.client.VerifyUserAccessTokenResponse.prototype.setTokenvalid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.AddReservedUsernamesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.AddReservedUsernamesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.AddReservedUsernamesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.AddReservedUsernamesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.AddReservedUsernamesRequest}
 */
proto.identity.client.AddReservedUsernamesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.AddReservedUsernamesRequest;
  return proto.identity.client.AddReservedUsernamesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.AddReservedUsernamesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.AddReservedUsernamesRequest}
 */
proto.identity.client.AddReservedUsernamesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.AddReservedUsernamesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.AddReservedUsernamesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.AddReservedUsernamesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.AddReservedUsernamesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.identity.client.AddReservedUsernamesRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.AddReservedUsernamesRequest} returns this
 */
proto.identity.client.AddReservedUsernamesRequest.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string signature = 2;
 * @return {string}
 */
proto.identity.client.AddReservedUsernamesRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.AddReservedUsernamesRequest} returns this
 */
proto.identity.client.AddReservedUsernamesRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.RemoveReservedUsernameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.RemoveReservedUsernameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.RemoveReservedUsernameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RemoveReservedUsernameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.RemoveReservedUsernameRequest}
 */
proto.identity.client.RemoveReservedUsernameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.RemoveReservedUsernameRequest;
  return proto.identity.client.RemoveReservedUsernameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.RemoveReservedUsernameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.RemoveReservedUsernameRequest}
 */
proto.identity.client.RemoveReservedUsernameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.RemoveReservedUsernameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.RemoveReservedUsernameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.RemoveReservedUsernameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RemoveReservedUsernameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.identity.client.RemoveReservedUsernameRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.RemoveReservedUsernameRequest} returns this
 */
proto.identity.client.RemoveReservedUsernameRequest.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string signature = 2;
 * @return {string}
 */
proto.identity.client.RemoveReservedUsernameRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.RemoveReservedUsernameRequest} returns this
 */
proto.identity.client.RemoveReservedUsernameRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.identity.client.DeviceType = {
  KEYSERVER: 0,
  WEB: 1,
  IOS: 2,
  ANDROID: 3,
  WINDOWS: 4,
  MACOS: 5
};

goog.object.extend(exports, proto.identity.client);
