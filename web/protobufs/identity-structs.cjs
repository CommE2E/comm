// source: identity_client.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 * @generated
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.identity.client.DeleteUserRequest', null, global);
goog.exportSymbol('proto.identity.client.DeviceKeyUpload', null, global);
goog.exportSymbol('proto.identity.client.Empty', null, global);
goog.exportSymbol('proto.identity.client.GenerateNonceResponse', null, global);
goog.exportSymbol('proto.identity.client.IdentityKeyInfo', null, global);
goog.exportSymbol('proto.identity.client.KeyserverKeysRequest', null, global);
goog.exportSymbol('proto.identity.client.KeyserverKeysRequest.IdentifierCase', null, global);
goog.exportSymbol('proto.identity.client.KeyserverKeysResponse', null, global);
goog.exportSymbol('proto.identity.client.KeyserverSessionInfo', null, global);
goog.exportSymbol('proto.identity.client.OpaqueLoginFinishRequest', null, global);
goog.exportSymbol('proto.identity.client.OpaqueLoginFinishResponse', null, global);
goog.exportSymbol('proto.identity.client.OpaqueLoginStartRequest', null, global);
goog.exportSymbol('proto.identity.client.OpaqueLoginStartResponse', null, global);
goog.exportSymbol('proto.identity.client.PreKey', null, global);
goog.exportSymbol('proto.identity.client.ReceiverKeyInfo', null, global);
goog.exportSymbol('proto.identity.client.ReceiverKeysForUserRequest', null, global);
goog.exportSymbol('proto.identity.client.ReceiverKeysForUserRequest.IdentifierCase', null, global);
goog.exportSymbol('proto.identity.client.ReceiverKeysForUserResponse', null, global);
goog.exportSymbol('proto.identity.client.RefreshUserPreKeysRequest', null, global);
goog.exportSymbol('proto.identity.client.RegistrationFinishRequest', null, global);
goog.exportSymbol('proto.identity.client.RegistrationFinishResponse', null, global);
goog.exportSymbol('proto.identity.client.RegistrationStartRequest', null, global);
goog.exportSymbol('proto.identity.client.RegistrationStartResponse', null, global);
goog.exportSymbol('proto.identity.client.SenderKeyInfo', null, global);
goog.exportSymbol('proto.identity.client.SenderKeysForUserRequest', null, global);
goog.exportSymbol('proto.identity.client.SenderKeysForUserRequest.IdentifierCase', null, global);
goog.exportSymbol('proto.identity.client.SenderKeysForUserResponse', null, global);
goog.exportSymbol('proto.identity.client.UpdateUserPasswordFinishRequest', null, global);
goog.exportSymbol('proto.identity.client.UpdateUserPasswordFinishResponse', null, global);
goog.exportSymbol('proto.identity.client.UpdateUserPasswordStartRequest', null, global);
goog.exportSymbol('proto.identity.client.UpdateUserPasswordStartResponse', null, global);
goog.exportSymbol('proto.identity.client.UploadOneTimeKeysRequest', null, global);
goog.exportSymbol('proto.identity.client.WalletLoginRequest', null, global);
goog.exportSymbol('proto.identity.client.WalletLoginResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.Empty.displayName = 'proto.identity.client.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.PreKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.PreKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.PreKey.displayName = 'proto.identity.client.PreKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.IdentityKeyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.IdentityKeyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.IdentityKeyInfo.displayName = 'proto.identity.client.IdentityKeyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.DeviceKeyUpload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.identity.client.DeviceKeyUpload.repeatedFields_, null);
};
goog.inherits(proto.identity.client.DeviceKeyUpload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.DeviceKeyUpload.displayName = 'proto.identity.client.DeviceKeyUpload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.RegistrationStartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.RegistrationStartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.RegistrationStartRequest.displayName = 'proto.identity.client.RegistrationStartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.RegistrationFinishRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.RegistrationFinishRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.RegistrationFinishRequest.displayName = 'proto.identity.client.RegistrationFinishRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.RegistrationStartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.RegistrationStartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.RegistrationStartResponse.displayName = 'proto.identity.client.RegistrationStartResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.RegistrationFinishResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.RegistrationFinishResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.RegistrationFinishResponse.displayName = 'proto.identity.client.RegistrationFinishResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.UpdateUserPasswordStartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.UpdateUserPasswordStartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.UpdateUserPasswordStartRequest.displayName = 'proto.identity.client.UpdateUserPasswordStartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.UpdateUserPasswordFinishRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.UpdateUserPasswordFinishRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.UpdateUserPasswordFinishRequest.displayName = 'proto.identity.client.UpdateUserPasswordFinishRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.UpdateUserPasswordStartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.UpdateUserPasswordStartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.UpdateUserPasswordStartResponse.displayName = 'proto.identity.client.UpdateUserPasswordStartResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.UpdateUserPasswordFinishResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.UpdateUserPasswordFinishResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.UpdateUserPasswordFinishResponse.displayName = 'proto.identity.client.UpdateUserPasswordFinishResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.OpaqueLoginStartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.OpaqueLoginStartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.OpaqueLoginStartRequest.displayName = 'proto.identity.client.OpaqueLoginStartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.OpaqueLoginFinishRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.OpaqueLoginFinishRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.OpaqueLoginFinishRequest.displayName = 'proto.identity.client.OpaqueLoginFinishRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.OpaqueLoginStartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.OpaqueLoginStartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.OpaqueLoginStartResponse.displayName = 'proto.identity.client.OpaqueLoginStartResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.OpaqueLoginFinishResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.OpaqueLoginFinishResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.OpaqueLoginFinishResponse.displayName = 'proto.identity.client.OpaqueLoginFinishResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.WalletLoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.WalletLoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.WalletLoginRequest.displayName = 'proto.identity.client.WalletLoginRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.WalletLoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.WalletLoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.WalletLoginResponse.displayName = 'proto.identity.client.WalletLoginResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.DeleteUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.DeleteUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.DeleteUserRequest.displayName = 'proto.identity.client.DeleteUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.GenerateNonceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.GenerateNonceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.GenerateNonceResponse.displayName = 'proto.identity.client.GenerateNonceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.ReceiverKeyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.ReceiverKeyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.ReceiverKeyInfo.displayName = 'proto.identity.client.ReceiverKeyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.ReceiverKeysForUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.identity.client.ReceiverKeysForUserRequest.oneofGroups_);
};
goog.inherits(proto.identity.client.ReceiverKeysForUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.ReceiverKeysForUserRequest.displayName = 'proto.identity.client.ReceiverKeysForUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.ReceiverKeysForUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.ReceiverKeysForUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.ReceiverKeysForUserResponse.displayName = 'proto.identity.client.ReceiverKeysForUserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.SenderKeyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.SenderKeyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.SenderKeyInfo.displayName = 'proto.identity.client.SenderKeyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.SenderKeysForUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.identity.client.SenderKeysForUserRequest.oneofGroups_);
};
goog.inherits(proto.identity.client.SenderKeysForUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.SenderKeysForUserRequest.displayName = 'proto.identity.client.SenderKeysForUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.SenderKeysForUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.SenderKeysForUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.SenderKeysForUserResponse.displayName = 'proto.identity.client.SenderKeysForUserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.KeyserverSessionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.KeyserverSessionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.KeyserverSessionInfo.displayName = 'proto.identity.client.KeyserverSessionInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.KeyserverKeysRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.identity.client.KeyserverKeysRequest.oneofGroups_);
};
goog.inherits(proto.identity.client.KeyserverKeysRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.KeyserverKeysRequest.displayName = 'proto.identity.client.KeyserverKeysRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.KeyserverKeysResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.KeyserverKeysResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.KeyserverKeysResponse.displayName = 'proto.identity.client.KeyserverKeysResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.UploadOneTimeKeysRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.identity.client.UploadOneTimeKeysRequest.repeatedFields_, null);
};
goog.inherits(proto.identity.client.UploadOneTimeKeysRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.UploadOneTimeKeysRequest.displayName = 'proto.identity.client.UploadOneTimeKeysRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.client.RefreshUserPreKeysRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.client.RefreshUserPreKeysRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.client.RefreshUserPreKeysRequest.displayName = 'proto.identity.client.RefreshUserPreKeysRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.Empty}
 */
proto.identity.client.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.Empty;
  return proto.identity.client.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.Empty}
 */
proto.identity.client.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.PreKey.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.PreKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.PreKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.PreKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    prekey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    prekeysignature: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.PreKey}
 */
proto.identity.client.PreKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.PreKey;
  return proto.identity.client.PreKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.PreKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.PreKey}
 */
proto.identity.client.PreKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrekey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrekeysignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.PreKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.PreKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.PreKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.PreKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrekey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrekeysignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string preKey = 1;
 * @return {string}
 */
proto.identity.client.PreKey.prototype.getPrekey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.PreKey} returns this
 */
proto.identity.client.PreKey.prototype.setPrekey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string preKeySignature = 2;
 * @return {string}
 */
proto.identity.client.PreKey.prototype.getPrekeysignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.PreKey} returns this
 */
proto.identity.client.PreKey.prototype.setPrekeysignature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.IdentityKeyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.IdentityKeyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.IdentityKeyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.IdentityKeyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: jspb.Message.getFieldWithDefault(msg, 1, ""),
    payloadsignature: jspb.Message.getFieldWithDefault(msg, 2, ""),
    socialproof: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.IdentityKeyInfo}
 */
proto.identity.client.IdentityKeyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.IdentityKeyInfo;
  return proto.identity.client.IdentityKeyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.IdentityKeyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.IdentityKeyInfo}
 */
proto.identity.client.IdentityKeyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayloadsignature(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSocialproof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.IdentityKeyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.IdentityKeyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.IdentityKeyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.IdentityKeyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPayloadsignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string payload = 1;
 * @return {string}
 */
proto.identity.client.IdentityKeyInfo.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.IdentityKeyInfo} returns this
 */
proto.identity.client.IdentityKeyInfo.prototype.setPayload = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string payloadSignature = 2;
 * @return {string}
 */
proto.identity.client.IdentityKeyInfo.prototype.getPayloadsignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.IdentityKeyInfo} returns this
 */
proto.identity.client.IdentityKeyInfo.prototype.setPayloadsignature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string socialProof = 3;
 * @return {string}
 */
proto.identity.client.IdentityKeyInfo.prototype.getSocialproof = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.IdentityKeyInfo} returns this
 */
proto.identity.client.IdentityKeyInfo.prototype.setSocialproof = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.identity.client.IdentityKeyInfo} returns this
 */
proto.identity.client.IdentityKeyInfo.prototype.clearSocialproof = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.IdentityKeyInfo.prototype.hasSocialproof = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.identity.client.DeviceKeyUpload.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.DeviceKeyUpload.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.DeviceKeyUpload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.DeviceKeyUpload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.DeviceKeyUpload.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicekeyinfo: (f = msg.getDevicekeyinfo()) && proto.identity.client.IdentityKeyInfo.toObject(includeInstance, f),
    identityupload: (f = msg.getIdentityupload()) && proto.identity.client.PreKey.toObject(includeInstance, f),
    notifupload: (f = msg.getNotifupload()) && proto.identity.client.PreKey.toObject(includeInstance, f),
    onetimeidentityprekeysList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    onetimenotifprekeysList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.DeviceKeyUpload}
 */
proto.identity.client.DeviceKeyUpload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.DeviceKeyUpload;
  return proto.identity.client.DeviceKeyUpload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.DeviceKeyUpload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.DeviceKeyUpload}
 */
proto.identity.client.DeviceKeyUpload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.identity.client.IdentityKeyInfo;
      reader.readMessage(value,proto.identity.client.IdentityKeyInfo.deserializeBinaryFromReader);
      msg.setDevicekeyinfo(value);
      break;
    case 2:
      var value = new proto.identity.client.PreKey;
      reader.readMessage(value,proto.identity.client.PreKey.deserializeBinaryFromReader);
      msg.setIdentityupload(value);
      break;
    case 3:
      var value = new proto.identity.client.PreKey;
      reader.readMessage(value,proto.identity.client.PreKey.deserializeBinaryFromReader);
      msg.setNotifupload(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addOnetimeidentityprekeys(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addOnetimenotifprekeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.DeviceKeyUpload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.DeviceKeyUpload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.DeviceKeyUpload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.DeviceKeyUpload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicekeyinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.identity.client.IdentityKeyInfo.serializeBinaryToWriter
    );
  }
  f = message.getIdentityupload();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.identity.client.PreKey.serializeBinaryToWriter
    );
  }
  f = message.getNotifupload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identity.client.PreKey.serializeBinaryToWriter
    );
  }
  f = message.getOnetimeidentityprekeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getOnetimenotifprekeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional IdentityKeyInfo deviceKeyInfo = 1;
 * @return {?proto.identity.client.IdentityKeyInfo}
 */
proto.identity.client.DeviceKeyUpload.prototype.getDevicekeyinfo = function() {
  return /** @type{?proto.identity.client.IdentityKeyInfo} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.IdentityKeyInfo, 1));
};


/**
 * @param {?proto.identity.client.IdentityKeyInfo|undefined} value
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
*/
proto.identity.client.DeviceKeyUpload.prototype.setDevicekeyinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.clearDevicekeyinfo = function() {
  return this.setDevicekeyinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.DeviceKeyUpload.prototype.hasDevicekeyinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PreKey identityUpload = 2;
 * @return {?proto.identity.client.PreKey}
 */
proto.identity.client.DeviceKeyUpload.prototype.getIdentityupload = function() {
  return /** @type{?proto.identity.client.PreKey} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.PreKey, 2));
};


/**
 * @param {?proto.identity.client.PreKey|undefined} value
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
*/
proto.identity.client.DeviceKeyUpload.prototype.setIdentityupload = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.clearIdentityupload = function() {
  return this.setIdentityupload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.DeviceKeyUpload.prototype.hasIdentityupload = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PreKey notifUpload = 3;
 * @return {?proto.identity.client.PreKey}
 */
proto.identity.client.DeviceKeyUpload.prototype.getNotifupload = function() {
  return /** @type{?proto.identity.client.PreKey} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.PreKey, 3));
};


/**
 * @param {?proto.identity.client.PreKey|undefined} value
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
*/
proto.identity.client.DeviceKeyUpload.prototype.setNotifupload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.clearNotifupload = function() {
  return this.setNotifupload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.DeviceKeyUpload.prototype.hasNotifupload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string onetimeIdentityPrekeys = 4;
 * @return {!Array<string>}
 */
proto.identity.client.DeviceKeyUpload.prototype.getOnetimeidentityprekeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.setOnetimeidentityprekeysList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.addOnetimeidentityprekeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.clearOnetimeidentityprekeysList = function() {
  return this.setOnetimeidentityprekeysList([]);
};


/**
 * repeated string onetimeNotifPrekeys = 5;
 * @return {!Array<string>}
 */
proto.identity.client.DeviceKeyUpload.prototype.getOnetimenotifprekeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.setOnetimenotifprekeysList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.addOnetimenotifprekeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.identity.client.DeviceKeyUpload} returns this
 */
proto.identity.client.DeviceKeyUpload.prototype.clearOnetimenotifprekeysList = function() {
  return this.setOnetimenotifprekeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.RegistrationStartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.RegistrationStartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.RegistrationStartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationStartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaqueregistrationrequest: msg.getOpaqueregistrationrequest_asB64(),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    devicekeyupload: (f = msg.getDevicekeyupload()) && proto.identity.client.DeviceKeyUpload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.RegistrationStartRequest}
 */
proto.identity.client.RegistrationStartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.RegistrationStartRequest;
  return proto.identity.client.RegistrationStartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.RegistrationStartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.RegistrationStartRequest}
 */
proto.identity.client.RegistrationStartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueregistrationrequest(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = new proto.identity.client.DeviceKeyUpload;
      reader.readMessage(value,proto.identity.client.DeviceKeyUpload.deserializeBinaryFromReader);
      msg.setDevicekeyupload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.RegistrationStartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.RegistrationStartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.RegistrationStartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationStartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaqueregistrationrequest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDevicekeyupload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identity.client.DeviceKeyUpload.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes opaqueRegistrationRequest = 1;
 * @return {string}
 */
proto.identity.client.RegistrationStartRequest.prototype.getOpaqueregistrationrequest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes opaqueRegistrationRequest = 1;
 * This is a type-conversion wrapper around `getOpaqueregistrationrequest()`
 * @return {string}
 */
proto.identity.client.RegistrationStartRequest.prototype.getOpaqueregistrationrequest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueregistrationrequest()));
};


/**
 * optional bytes opaqueRegistrationRequest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueregistrationrequest()`
 * @return {!Uint8Array}
 */
proto.identity.client.RegistrationStartRequest.prototype.getOpaqueregistrationrequest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueregistrationrequest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.RegistrationStartRequest} returns this
 */
proto.identity.client.RegistrationStartRequest.prototype.setOpaqueregistrationrequest = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.identity.client.RegistrationStartRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.RegistrationStartRequest} returns this
 */
proto.identity.client.RegistrationStartRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DeviceKeyUpload deviceKeyUpload = 3;
 * @return {?proto.identity.client.DeviceKeyUpload}
 */
proto.identity.client.RegistrationStartRequest.prototype.getDevicekeyupload = function() {
  return /** @type{?proto.identity.client.DeviceKeyUpload} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.DeviceKeyUpload, 3));
};


/**
 * @param {?proto.identity.client.DeviceKeyUpload|undefined} value
 * @return {!proto.identity.client.RegistrationStartRequest} returns this
*/
proto.identity.client.RegistrationStartRequest.prototype.setDevicekeyupload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.RegistrationStartRequest} returns this
 */
proto.identity.client.RegistrationStartRequest.prototype.clearDevicekeyupload = function() {
  return this.setDevicekeyupload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.RegistrationStartRequest.prototype.hasDevicekeyupload = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.RegistrationFinishRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.RegistrationFinishRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.RegistrationFinishRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationFinishRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opaqueregistrationupload: msg.getOpaqueregistrationupload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.RegistrationFinishRequest}
 */
proto.identity.client.RegistrationFinishRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.RegistrationFinishRequest;
  return proto.identity.client.RegistrationFinishRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.RegistrationFinishRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.RegistrationFinishRequest}
 */
proto.identity.client.RegistrationFinishRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueregistrationupload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.RegistrationFinishRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.RegistrationFinishRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.RegistrationFinishRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationFinishRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpaqueregistrationupload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string sessionID = 1;
 * @return {string}
 */
proto.identity.client.RegistrationFinishRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.RegistrationFinishRequest} returns this
 */
proto.identity.client.RegistrationFinishRequest.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes opaqueRegistrationUpload = 2;
 * @return {string}
 */
proto.identity.client.RegistrationFinishRequest.prototype.getOpaqueregistrationupload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes opaqueRegistrationUpload = 2;
 * This is a type-conversion wrapper around `getOpaqueregistrationupload()`
 * @return {string}
 */
proto.identity.client.RegistrationFinishRequest.prototype.getOpaqueregistrationupload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueregistrationupload()));
};


/**
 * optional bytes opaqueRegistrationUpload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueregistrationupload()`
 * @return {!Uint8Array}
 */
proto.identity.client.RegistrationFinishRequest.prototype.getOpaqueregistrationupload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueregistrationupload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.RegistrationFinishRequest} returns this
 */
proto.identity.client.RegistrationFinishRequest.prototype.setOpaqueregistrationupload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.RegistrationStartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.RegistrationStartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.RegistrationStartResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationStartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opaqueregistrationresponse: msg.getOpaqueregistrationresponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.RegistrationStartResponse}
 */
proto.identity.client.RegistrationStartResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.RegistrationStartResponse;
  return proto.identity.client.RegistrationStartResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.RegistrationStartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.RegistrationStartResponse}
 */
proto.identity.client.RegistrationStartResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueregistrationresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.RegistrationStartResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.RegistrationStartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.RegistrationStartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationStartResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpaqueregistrationresponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string sessionID = 1;
 * @return {string}
 */
proto.identity.client.RegistrationStartResponse.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.RegistrationStartResponse} returns this
 */
proto.identity.client.RegistrationStartResponse.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes opaqueRegistrationResponse = 2;
 * @return {string}
 */
proto.identity.client.RegistrationStartResponse.prototype.getOpaqueregistrationresponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes opaqueRegistrationResponse = 2;
 * This is a type-conversion wrapper around `getOpaqueregistrationresponse()`
 * @return {string}
 */
proto.identity.client.RegistrationStartResponse.prototype.getOpaqueregistrationresponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueregistrationresponse()));
};


/**
 * optional bytes opaqueRegistrationResponse = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueregistrationresponse()`
 * @return {!Uint8Array}
 */
proto.identity.client.RegistrationStartResponse.prototype.getOpaqueregistrationresponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueregistrationresponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.RegistrationStartResponse} returns this
 */
proto.identity.client.RegistrationStartResponse.prototype.setOpaqueregistrationresponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.RegistrationFinishResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.RegistrationFinishResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.RegistrationFinishResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationFinishResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.RegistrationFinishResponse}
 */
proto.identity.client.RegistrationFinishResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.RegistrationFinishResponse;
  return proto.identity.client.RegistrationFinishResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.RegistrationFinishResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.RegistrationFinishResponse}
 */
proto.identity.client.RegistrationFinishResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.RegistrationFinishResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.RegistrationFinishResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.RegistrationFinishResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RegistrationFinishResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string accessToken = 2;
 * @return {string}
 */
proto.identity.client.RegistrationFinishResponse.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.RegistrationFinishResponse} returns this
 */
proto.identity.client.RegistrationFinishResponse.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.UpdateUserPasswordStartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.UpdateUserPasswordStartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.UpdateUserPasswordStartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.UpdateUserPasswordStartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaqueregistrationrequest: msg.getOpaqueregistrationrequest_asB64(),
    accesstoken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.UpdateUserPasswordStartRequest}
 */
proto.identity.client.UpdateUserPasswordStartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.UpdateUserPasswordStartRequest;
  return proto.identity.client.UpdateUserPasswordStartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.UpdateUserPasswordStartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.UpdateUserPasswordStartRequest}
 */
proto.identity.client.UpdateUserPasswordStartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueregistrationrequest(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.UpdateUserPasswordStartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.UpdateUserPasswordStartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.UpdateUserPasswordStartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.UpdateUserPasswordStartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaqueregistrationrequest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes opaqueRegistrationRequest = 1;
 * @return {string}
 */
proto.identity.client.UpdateUserPasswordStartRequest.prototype.getOpaqueregistrationrequest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes opaqueRegistrationRequest = 1;
 * This is a type-conversion wrapper around `getOpaqueregistrationrequest()`
 * @return {string}
 */
proto.identity.client.UpdateUserPasswordStartRequest.prototype.getOpaqueregistrationrequest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueregistrationrequest()));
};


/**
 * optional bytes opaqueRegistrationRequest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueregistrationrequest()`
 * @return {!Uint8Array}
 */
proto.identity.client.UpdateUserPasswordStartRequest.prototype.getOpaqueregistrationrequest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueregistrationrequest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.UpdateUserPasswordStartRequest} returns this
 */
proto.identity.client.UpdateUserPasswordStartRequest.prototype.setOpaqueregistrationrequest = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string accessToken = 3;
 * @return {string}
 */
proto.identity.client.UpdateUserPasswordStartRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.UpdateUserPasswordStartRequest} returns this
 */
proto.identity.client.UpdateUserPasswordStartRequest.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.UpdateUserPasswordFinishRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.UpdateUserPasswordFinishRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.UpdateUserPasswordFinishRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.UpdateUserPasswordFinishRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opaqueregistrationupload: msg.getOpaqueregistrationupload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.UpdateUserPasswordFinishRequest}
 */
proto.identity.client.UpdateUserPasswordFinishRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.UpdateUserPasswordFinishRequest;
  return proto.identity.client.UpdateUserPasswordFinishRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.UpdateUserPasswordFinishRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.UpdateUserPasswordFinishRequest}
 */
proto.identity.client.UpdateUserPasswordFinishRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueregistrationupload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.UpdateUserPasswordFinishRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.UpdateUserPasswordFinishRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.UpdateUserPasswordFinishRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.UpdateUserPasswordFinishRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpaqueregistrationupload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string sessionID = 1;
 * @return {string}
 */
proto.identity.client.UpdateUserPasswordFinishRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.UpdateUserPasswordFinishRequest} returns this
 */
proto.identity.client.UpdateUserPasswordFinishRequest.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes opaqueRegistrationUpload = 2;
 * @return {string}
 */
proto.identity.client.UpdateUserPasswordFinishRequest.prototype.getOpaqueregistrationupload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes opaqueRegistrationUpload = 2;
 * This is a type-conversion wrapper around `getOpaqueregistrationupload()`
 * @return {string}
 */
proto.identity.client.UpdateUserPasswordFinishRequest.prototype.getOpaqueregistrationupload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueregistrationupload()));
};


/**
 * optional bytes opaqueRegistrationUpload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueregistrationupload()`
 * @return {!Uint8Array}
 */
proto.identity.client.UpdateUserPasswordFinishRequest.prototype.getOpaqueregistrationupload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueregistrationupload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.UpdateUserPasswordFinishRequest} returns this
 */
proto.identity.client.UpdateUserPasswordFinishRequest.prototype.setOpaqueregistrationupload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.UpdateUserPasswordStartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.UpdateUserPasswordStartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.UpdateUserPasswordStartResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.UpdateUserPasswordStartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opaqueregistrationresponse: msg.getOpaqueregistrationresponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.UpdateUserPasswordStartResponse}
 */
proto.identity.client.UpdateUserPasswordStartResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.UpdateUserPasswordStartResponse;
  return proto.identity.client.UpdateUserPasswordStartResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.UpdateUserPasswordStartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.UpdateUserPasswordStartResponse}
 */
proto.identity.client.UpdateUserPasswordStartResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueregistrationresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.UpdateUserPasswordStartResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.UpdateUserPasswordStartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.UpdateUserPasswordStartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.UpdateUserPasswordStartResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpaqueregistrationresponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string sessionID = 1;
 * @return {string}
 */
proto.identity.client.UpdateUserPasswordStartResponse.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.UpdateUserPasswordStartResponse} returns this
 */
proto.identity.client.UpdateUserPasswordStartResponse.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes opaqueRegistrationResponse = 2;
 * @return {string}
 */
proto.identity.client.UpdateUserPasswordStartResponse.prototype.getOpaqueregistrationresponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes opaqueRegistrationResponse = 2;
 * This is a type-conversion wrapper around `getOpaqueregistrationresponse()`
 * @return {string}
 */
proto.identity.client.UpdateUserPasswordStartResponse.prototype.getOpaqueregistrationresponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueregistrationresponse()));
};


/**
 * optional bytes opaqueRegistrationResponse = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueregistrationresponse()`
 * @return {!Uint8Array}
 */
proto.identity.client.UpdateUserPasswordStartResponse.prototype.getOpaqueregistrationresponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueregistrationresponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.UpdateUserPasswordStartResponse} returns this
 */
proto.identity.client.UpdateUserPasswordStartResponse.prototype.setOpaqueregistrationresponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.UpdateUserPasswordFinishResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.UpdateUserPasswordFinishResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.UpdateUserPasswordFinishResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.UpdateUserPasswordFinishResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.UpdateUserPasswordFinishResponse}
 */
proto.identity.client.UpdateUserPasswordFinishResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.UpdateUserPasswordFinishResponse;
  return proto.identity.client.UpdateUserPasswordFinishResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.UpdateUserPasswordFinishResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.UpdateUserPasswordFinishResponse}
 */
proto.identity.client.UpdateUserPasswordFinishResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.UpdateUserPasswordFinishResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.UpdateUserPasswordFinishResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.UpdateUserPasswordFinishResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.UpdateUserPasswordFinishResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string accessToken = 2;
 * @return {string}
 */
proto.identity.client.UpdateUserPasswordFinishResponse.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.UpdateUserPasswordFinishResponse} returns this
 */
proto.identity.client.UpdateUserPasswordFinishResponse.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.OpaqueLoginStartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.OpaqueLoginStartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginStartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opaqueloginrequest: msg.getOpaqueloginrequest_asB64(),
    devicekeyupload: (f = msg.getDevicekeyupload()) && proto.identity.client.DeviceKeyUpload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.OpaqueLoginStartRequest}
 */
proto.identity.client.OpaqueLoginStartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.OpaqueLoginStartRequest;
  return proto.identity.client.OpaqueLoginStartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.OpaqueLoginStartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.OpaqueLoginStartRequest}
 */
proto.identity.client.OpaqueLoginStartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueloginrequest(value);
      break;
    case 3:
      var value = new proto.identity.client.DeviceKeyUpload;
      reader.readMessage(value,proto.identity.client.DeviceKeyUpload.deserializeBinaryFromReader);
      msg.setDevicekeyupload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.OpaqueLoginStartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.OpaqueLoginStartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginStartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpaqueloginrequest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDevicekeyupload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identity.client.DeviceKeyUpload.serializeBinaryToWriter
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.OpaqueLoginStartRequest} returns this
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes opaqueLoginRequest = 2;
 * @return {string}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.getOpaqueloginrequest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes opaqueLoginRequest = 2;
 * This is a type-conversion wrapper around `getOpaqueloginrequest()`
 * @return {string}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.getOpaqueloginrequest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueloginrequest()));
};


/**
 * optional bytes opaqueLoginRequest = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueloginrequest()`
 * @return {!Uint8Array}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.getOpaqueloginrequest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueloginrequest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.OpaqueLoginStartRequest} returns this
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.setOpaqueloginrequest = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional DeviceKeyUpload deviceKeyUpload = 3;
 * @return {?proto.identity.client.DeviceKeyUpload}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.getDevicekeyupload = function() {
  return /** @type{?proto.identity.client.DeviceKeyUpload} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.DeviceKeyUpload, 3));
};


/**
 * @param {?proto.identity.client.DeviceKeyUpload|undefined} value
 * @return {!proto.identity.client.OpaqueLoginStartRequest} returns this
*/
proto.identity.client.OpaqueLoginStartRequest.prototype.setDevicekeyupload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.OpaqueLoginStartRequest} returns this
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.clearDevicekeyupload = function() {
  return this.setDevicekeyupload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.OpaqueLoginStartRequest.prototype.hasDevicekeyupload = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.OpaqueLoginFinishRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.OpaqueLoginFinishRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginFinishRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opaqueloginupload: msg.getOpaqueloginupload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.OpaqueLoginFinishRequest}
 */
proto.identity.client.OpaqueLoginFinishRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.OpaqueLoginFinishRequest;
  return proto.identity.client.OpaqueLoginFinishRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.OpaqueLoginFinishRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.OpaqueLoginFinishRequest}
 */
proto.identity.client.OpaqueLoginFinishRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueloginupload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.OpaqueLoginFinishRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.OpaqueLoginFinishRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginFinishRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpaqueloginupload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string sessionID = 1;
 * @return {string}
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.OpaqueLoginFinishRequest} returns this
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes opaqueLoginUpload = 2;
 * @return {string}
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.getOpaqueloginupload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes opaqueLoginUpload = 2;
 * This is a type-conversion wrapper around `getOpaqueloginupload()`
 * @return {string}
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.getOpaqueloginupload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueloginupload()));
};


/**
 * optional bytes opaqueLoginUpload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueloginupload()`
 * @return {!Uint8Array}
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.getOpaqueloginupload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueloginupload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.OpaqueLoginFinishRequest} returns this
 */
proto.identity.client.OpaqueLoginFinishRequest.prototype.setOpaqueloginupload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.OpaqueLoginStartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.OpaqueLoginStartResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginStartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    opaqueloginresponse: msg.getOpaqueloginresponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.OpaqueLoginStartResponse}
 */
proto.identity.client.OpaqueLoginStartResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.OpaqueLoginStartResponse;
  return proto.identity.client.OpaqueLoginStartResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.OpaqueLoginStartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.OpaqueLoginStartResponse}
 */
proto.identity.client.OpaqueLoginStartResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaqueloginresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.OpaqueLoginStartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.OpaqueLoginStartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginStartResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpaqueloginresponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string sessionID = 1;
 * @return {string}
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.OpaqueLoginStartResponse} returns this
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes opaqueLoginResponse = 2;
 * @return {string}
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.getOpaqueloginresponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes opaqueLoginResponse = 2;
 * This is a type-conversion wrapper around `getOpaqueloginresponse()`
 * @return {string}
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.getOpaqueloginresponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaqueloginresponse()));
};


/**
 * optional bytes opaqueLoginResponse = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaqueloginresponse()`
 * @return {!Uint8Array}
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.getOpaqueloginresponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaqueloginresponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.identity.client.OpaqueLoginStartResponse} returns this
 */
proto.identity.client.OpaqueLoginStartResponse.prototype.setOpaqueloginresponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.OpaqueLoginFinishResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.OpaqueLoginFinishResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.OpaqueLoginFinishResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginFinishResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.OpaqueLoginFinishResponse}
 */
proto.identity.client.OpaqueLoginFinishResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.OpaqueLoginFinishResponse;
  return proto.identity.client.OpaqueLoginFinishResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.OpaqueLoginFinishResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.OpaqueLoginFinishResponse}
 */
proto.identity.client.OpaqueLoginFinishResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.OpaqueLoginFinishResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.OpaqueLoginFinishResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.OpaqueLoginFinishResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.OpaqueLoginFinishResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string accessToken = 2;
 * @return {string}
 */
proto.identity.client.OpaqueLoginFinishResponse.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.OpaqueLoginFinishResponse} returns this
 */
proto.identity.client.OpaqueLoginFinishResponse.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.WalletLoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.WalletLoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.WalletLoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.WalletLoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    siwemessage: jspb.Message.getFieldWithDefault(msg, 1, ""),
    siwesignature: jspb.Message.getFieldWithDefault(msg, 2, ""),
    devicekeyupload: (f = msg.getDevicekeyupload()) && proto.identity.client.DeviceKeyUpload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.WalletLoginRequest}
 */
proto.identity.client.WalletLoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.WalletLoginRequest;
  return proto.identity.client.WalletLoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.WalletLoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.WalletLoginRequest}
 */
proto.identity.client.WalletLoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSiwemessage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSiwesignature(value);
      break;
    case 3:
      var value = new proto.identity.client.DeviceKeyUpload;
      reader.readMessage(value,proto.identity.client.DeviceKeyUpload.deserializeBinaryFromReader);
      msg.setDevicekeyupload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.WalletLoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.WalletLoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.WalletLoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.WalletLoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSiwemessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSiwesignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDevicekeyupload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identity.client.DeviceKeyUpload.serializeBinaryToWriter
    );
  }
};


/**
 * optional string siweMessage = 1;
 * @return {string}
 */
proto.identity.client.WalletLoginRequest.prototype.getSiwemessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.WalletLoginRequest} returns this
 */
proto.identity.client.WalletLoginRequest.prototype.setSiwemessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string siweSignature = 2;
 * @return {string}
 */
proto.identity.client.WalletLoginRequest.prototype.getSiwesignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.WalletLoginRequest} returns this
 */
proto.identity.client.WalletLoginRequest.prototype.setSiwesignature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DeviceKeyUpload deviceKeyUpload = 3;
 * @return {?proto.identity.client.DeviceKeyUpload}
 */
proto.identity.client.WalletLoginRequest.prototype.getDevicekeyupload = function() {
  return /** @type{?proto.identity.client.DeviceKeyUpload} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.DeviceKeyUpload, 3));
};


/**
 * @param {?proto.identity.client.DeviceKeyUpload|undefined} value
 * @return {!proto.identity.client.WalletLoginRequest} returns this
*/
proto.identity.client.WalletLoginRequest.prototype.setDevicekeyupload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.WalletLoginRequest} returns this
 */
proto.identity.client.WalletLoginRequest.prototype.clearDevicekeyupload = function() {
  return this.setDevicekeyupload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.WalletLoginRequest.prototype.hasDevicekeyupload = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.WalletLoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.WalletLoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.WalletLoginResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.WalletLoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.WalletLoginResponse}
 */
proto.identity.client.WalletLoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.WalletLoginResponse;
  return proto.identity.client.WalletLoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.WalletLoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.WalletLoginResponse}
 */
proto.identity.client.WalletLoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.WalletLoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.WalletLoginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.WalletLoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.WalletLoginResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.identity.client.WalletLoginResponse.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.WalletLoginResponse} returns this
 */
proto.identity.client.WalletLoginResponse.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.DeleteUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.DeleteUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.DeleteUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.DeleteUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.DeleteUserRequest}
 */
proto.identity.client.DeleteUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.DeleteUserRequest;
  return proto.identity.client.DeleteUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.DeleteUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.DeleteUserRequest}
 */
proto.identity.client.DeleteUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.DeleteUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.DeleteUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.DeleteUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.DeleteUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.identity.client.DeleteUserRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.DeleteUserRequest} returns this
 */
proto.identity.client.DeleteUserRequest.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.GenerateNonceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.GenerateNonceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.GenerateNonceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.GenerateNonceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.GenerateNonceResponse}
 */
proto.identity.client.GenerateNonceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.GenerateNonceResponse;
  return proto.identity.client.GenerateNonceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.GenerateNonceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.GenerateNonceResponse}
 */
proto.identity.client.GenerateNonceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.GenerateNonceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.GenerateNonceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.GenerateNonceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.GenerateNonceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string nonce = 1;
 * @return {string}
 */
proto.identity.client.GenerateNonceResponse.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.GenerateNonceResponse} returns this
 */
proto.identity.client.GenerateNonceResponse.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.ReceiverKeyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.ReceiverKeyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.ReceiverKeyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.ReceiverKeyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    identityinfo: (f = msg.getIdentityinfo()) && proto.identity.client.IdentityKeyInfo.toObject(includeInstance, f),
    identityprekey: (f = msg.getIdentityprekey()) && proto.identity.client.PreKey.toObject(includeInstance, f),
    notifprekey: (f = msg.getNotifprekey()) && proto.identity.client.PreKey.toObject(includeInstance, f),
    onetimeidentityprekey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    onetimenotifprekey: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.ReceiverKeyInfo}
 */
proto.identity.client.ReceiverKeyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.ReceiverKeyInfo;
  return proto.identity.client.ReceiverKeyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.ReceiverKeyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.ReceiverKeyInfo}
 */
proto.identity.client.ReceiverKeyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.identity.client.IdentityKeyInfo;
      reader.readMessage(value,proto.identity.client.IdentityKeyInfo.deserializeBinaryFromReader);
      msg.setIdentityinfo(value);
      break;
    case 2:
      var value = new proto.identity.client.PreKey;
      reader.readMessage(value,proto.identity.client.PreKey.deserializeBinaryFromReader);
      msg.setIdentityprekey(value);
      break;
    case 3:
      var value = new proto.identity.client.PreKey;
      reader.readMessage(value,proto.identity.client.PreKey.deserializeBinaryFromReader);
      msg.setNotifprekey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOnetimeidentityprekey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOnetimenotifprekey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.ReceiverKeyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.ReceiverKeyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.ReceiverKeyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.ReceiverKeyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentityinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.identity.client.IdentityKeyInfo.serializeBinaryToWriter
    );
  }
  f = message.getIdentityprekey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.identity.client.PreKey.serializeBinaryToWriter
    );
  }
  f = message.getNotifprekey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identity.client.PreKey.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional IdentityKeyInfo identityInfo = 1;
 * @return {?proto.identity.client.IdentityKeyInfo}
 */
proto.identity.client.ReceiverKeyInfo.prototype.getIdentityinfo = function() {
  return /** @type{?proto.identity.client.IdentityKeyInfo} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.IdentityKeyInfo, 1));
};


/**
 * @param {?proto.identity.client.IdentityKeyInfo|undefined} value
 * @return {!proto.identity.client.ReceiverKeyInfo} returns this
*/
proto.identity.client.ReceiverKeyInfo.prototype.setIdentityinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.ReceiverKeyInfo} returns this
 */
proto.identity.client.ReceiverKeyInfo.prototype.clearIdentityinfo = function() {
  return this.setIdentityinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.ReceiverKeyInfo.prototype.hasIdentityinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PreKey identityPrekey = 2;
 * @return {?proto.identity.client.PreKey}
 */
proto.identity.client.ReceiverKeyInfo.prototype.getIdentityprekey = function() {
  return /** @type{?proto.identity.client.PreKey} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.PreKey, 2));
};


/**
 * @param {?proto.identity.client.PreKey|undefined} value
 * @return {!proto.identity.client.ReceiverKeyInfo} returns this
*/
proto.identity.client.ReceiverKeyInfo.prototype.setIdentityprekey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.ReceiverKeyInfo} returns this
 */
proto.identity.client.ReceiverKeyInfo.prototype.clearIdentityprekey = function() {
  return this.setIdentityprekey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.ReceiverKeyInfo.prototype.hasIdentityprekey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PreKey notifPrekey = 3;
 * @return {?proto.identity.client.PreKey}
 */
proto.identity.client.ReceiverKeyInfo.prototype.getNotifprekey = function() {
  return /** @type{?proto.identity.client.PreKey} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.PreKey, 3));
};


/**
 * @param {?proto.identity.client.PreKey|undefined} value
 * @return {!proto.identity.client.ReceiverKeyInfo} returns this
*/
proto.identity.client.ReceiverKeyInfo.prototype.setNotifprekey = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.ReceiverKeyInfo} returns this
 */
proto.identity.client.ReceiverKeyInfo.prototype.clearNotifprekey = function() {
  return this.setNotifprekey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.ReceiverKeyInfo.prototype.hasNotifprekey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string onetimeIdentityPrekey = 4;
 * @return {string}
 */
proto.identity.client.ReceiverKeyInfo.prototype.getOnetimeidentityprekey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.ReceiverKeyInfo} returns this
 */
proto.identity.client.ReceiverKeyInfo.prototype.setOnetimeidentityprekey = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.identity.client.ReceiverKeyInfo} returns this
 */
proto.identity.client.ReceiverKeyInfo.prototype.clearOnetimeidentityprekey = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.ReceiverKeyInfo.prototype.hasOnetimeidentityprekey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string onetimeNotifPrekey = 5;
 * @return {string}
 */
proto.identity.client.ReceiverKeyInfo.prototype.getOnetimenotifprekey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.ReceiverKeyInfo} returns this
 */
proto.identity.client.ReceiverKeyInfo.prototype.setOnetimenotifprekey = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.identity.client.ReceiverKeyInfo} returns this
 */
proto.identity.client.ReceiverKeyInfo.prototype.clearOnetimenotifprekey = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.ReceiverKeyInfo.prototype.hasOnetimenotifprekey = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.identity.client.ReceiverKeysForUserRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.identity.client.ReceiverKeysForUserRequest.IdentifierCase = {
  IDENTIFIER_NOT_SET: 0,
  USERNAME: 1,
  WALLETADDRESS: 2
};

/**
 * @return {proto.identity.client.ReceiverKeysForUserRequest.IdentifierCase}
 */
proto.identity.client.ReceiverKeysForUserRequest.prototype.getIdentifierCase = function() {
  return /** @type {proto.identity.client.ReceiverKeysForUserRequest.IdentifierCase} */(jspb.Message.computeOneofCase(this, proto.identity.client.ReceiverKeysForUserRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.ReceiverKeysForUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.ReceiverKeysForUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.ReceiverKeysForUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.ReceiverKeysForUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    walletaddress: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.ReceiverKeysForUserRequest}
 */
proto.identity.client.ReceiverKeysForUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.ReceiverKeysForUserRequest;
  return proto.identity.client.ReceiverKeysForUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.ReceiverKeysForUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.ReceiverKeysForUserRequest}
 */
proto.identity.client.ReceiverKeysForUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWalletaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.ReceiverKeysForUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.ReceiverKeysForUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.ReceiverKeysForUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.ReceiverKeysForUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.identity.client.ReceiverKeysForUserRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.ReceiverKeysForUserRequest} returns this
 */
proto.identity.client.ReceiverKeysForUserRequest.prototype.setUsername = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.identity.client.ReceiverKeysForUserRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.identity.client.ReceiverKeysForUserRequest} returns this
 */
proto.identity.client.ReceiverKeysForUserRequest.prototype.clearUsername = function() {
  return jspb.Message.setOneofField(this, 1, proto.identity.client.ReceiverKeysForUserRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.ReceiverKeysForUserRequest.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string walletAddress = 2;
 * @return {string}
 */
proto.identity.client.ReceiverKeysForUserRequest.prototype.getWalletaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.ReceiverKeysForUserRequest} returns this
 */
proto.identity.client.ReceiverKeysForUserRequest.prototype.setWalletaddress = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.identity.client.ReceiverKeysForUserRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.identity.client.ReceiverKeysForUserRequest} returns this
 */
proto.identity.client.ReceiverKeysForUserRequest.prototype.clearWalletaddress = function() {
  return jspb.Message.setOneofField(this, 2, proto.identity.client.ReceiverKeysForUserRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.ReceiverKeysForUserRequest.prototype.hasWalletaddress = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.ReceiverKeysForUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.ReceiverKeysForUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.ReceiverKeysForUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.ReceiverKeysForUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicesMap: (f = msg.getDevicesMap()) ? f.toObject(includeInstance, proto.identity.client.ReceiverKeyInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.ReceiverKeysForUserResponse}
 */
proto.identity.client.ReceiverKeysForUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.ReceiverKeysForUserResponse;
  return proto.identity.client.ReceiverKeysForUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.ReceiverKeysForUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.ReceiverKeysForUserResponse}
 */
proto.identity.client.ReceiverKeysForUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getDevicesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.identity.client.ReceiverKeyInfo.deserializeBinaryFromReader, "", new proto.identity.client.ReceiverKeyInfo());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.ReceiverKeysForUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.ReceiverKeysForUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.ReceiverKeysForUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.ReceiverKeysForUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.identity.client.ReceiverKeyInfo.serializeBinaryToWriter);
  }
};


/**
 * map<string, ReceiverKeyInfo> devices = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.identity.client.ReceiverKeyInfo>}
 */
proto.identity.client.ReceiverKeysForUserResponse.prototype.getDevicesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.identity.client.ReceiverKeyInfo>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.identity.client.ReceiverKeyInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.identity.client.ReceiverKeysForUserResponse} returns this
 */
proto.identity.client.ReceiverKeysForUserResponse.prototype.clearDevicesMap = function() {
  this.getDevicesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.SenderKeyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.SenderKeyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.SenderKeyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.SenderKeyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    identityinfo: (f = msg.getIdentityinfo()) && proto.identity.client.IdentityKeyInfo.toObject(includeInstance, f),
    identityprekey: (f = msg.getIdentityprekey()) && proto.identity.client.PreKey.toObject(includeInstance, f),
    notifprekey: (f = msg.getNotifprekey()) && proto.identity.client.PreKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.SenderKeyInfo}
 */
proto.identity.client.SenderKeyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.SenderKeyInfo;
  return proto.identity.client.SenderKeyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.SenderKeyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.SenderKeyInfo}
 */
proto.identity.client.SenderKeyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.identity.client.IdentityKeyInfo;
      reader.readMessage(value,proto.identity.client.IdentityKeyInfo.deserializeBinaryFromReader);
      msg.setIdentityinfo(value);
      break;
    case 2:
      var value = new proto.identity.client.PreKey;
      reader.readMessage(value,proto.identity.client.PreKey.deserializeBinaryFromReader);
      msg.setIdentityprekey(value);
      break;
    case 3:
      var value = new proto.identity.client.PreKey;
      reader.readMessage(value,proto.identity.client.PreKey.deserializeBinaryFromReader);
      msg.setNotifprekey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.SenderKeyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.SenderKeyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.SenderKeyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.SenderKeyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentityinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.identity.client.IdentityKeyInfo.serializeBinaryToWriter
    );
  }
  f = message.getIdentityprekey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.identity.client.PreKey.serializeBinaryToWriter
    );
  }
  f = message.getNotifprekey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identity.client.PreKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional IdentityKeyInfo identityInfo = 1;
 * @return {?proto.identity.client.IdentityKeyInfo}
 */
proto.identity.client.SenderKeyInfo.prototype.getIdentityinfo = function() {
  return /** @type{?proto.identity.client.IdentityKeyInfo} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.IdentityKeyInfo, 1));
};


/**
 * @param {?proto.identity.client.IdentityKeyInfo|undefined} value
 * @return {!proto.identity.client.SenderKeyInfo} returns this
*/
proto.identity.client.SenderKeyInfo.prototype.setIdentityinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.SenderKeyInfo} returns this
 */
proto.identity.client.SenderKeyInfo.prototype.clearIdentityinfo = function() {
  return this.setIdentityinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.SenderKeyInfo.prototype.hasIdentityinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PreKey identityPrekey = 2;
 * @return {?proto.identity.client.PreKey}
 */
proto.identity.client.SenderKeyInfo.prototype.getIdentityprekey = function() {
  return /** @type{?proto.identity.client.PreKey} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.PreKey, 2));
};


/**
 * @param {?proto.identity.client.PreKey|undefined} value
 * @return {!proto.identity.client.SenderKeyInfo} returns this
*/
proto.identity.client.SenderKeyInfo.prototype.setIdentityprekey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.SenderKeyInfo} returns this
 */
proto.identity.client.SenderKeyInfo.prototype.clearIdentityprekey = function() {
  return this.setIdentityprekey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.SenderKeyInfo.prototype.hasIdentityprekey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PreKey notifPrekey = 3;
 * @return {?proto.identity.client.PreKey}
 */
proto.identity.client.SenderKeyInfo.prototype.getNotifprekey = function() {
  return /** @type{?proto.identity.client.PreKey} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.PreKey, 3));
};


/**
 * @param {?proto.identity.client.PreKey|undefined} value
 * @return {!proto.identity.client.SenderKeyInfo} returns this
*/
proto.identity.client.SenderKeyInfo.prototype.setNotifprekey = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.SenderKeyInfo} returns this
 */
proto.identity.client.SenderKeyInfo.prototype.clearNotifprekey = function() {
  return this.setNotifprekey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.SenderKeyInfo.prototype.hasNotifprekey = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.identity.client.SenderKeysForUserRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.identity.client.SenderKeysForUserRequest.IdentifierCase = {
  IDENTIFIER_NOT_SET: 0,
  USERNAME: 1,
  WALLETADDRESS: 2
};

/**
 * @return {proto.identity.client.SenderKeysForUserRequest.IdentifierCase}
 */
proto.identity.client.SenderKeysForUserRequest.prototype.getIdentifierCase = function() {
  return /** @type {proto.identity.client.SenderKeysForUserRequest.IdentifierCase} */(jspb.Message.computeOneofCase(this, proto.identity.client.SenderKeysForUserRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.SenderKeysForUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.SenderKeysForUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.SenderKeysForUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.SenderKeysForUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    walletaddress: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.SenderKeysForUserRequest}
 */
proto.identity.client.SenderKeysForUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.SenderKeysForUserRequest;
  return proto.identity.client.SenderKeysForUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.SenderKeysForUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.SenderKeysForUserRequest}
 */
proto.identity.client.SenderKeysForUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWalletaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.SenderKeysForUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.SenderKeysForUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.SenderKeysForUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.SenderKeysForUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.identity.client.SenderKeysForUserRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.SenderKeysForUserRequest} returns this
 */
proto.identity.client.SenderKeysForUserRequest.prototype.setUsername = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.identity.client.SenderKeysForUserRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.identity.client.SenderKeysForUserRequest} returns this
 */
proto.identity.client.SenderKeysForUserRequest.prototype.clearUsername = function() {
  return jspb.Message.setOneofField(this, 1, proto.identity.client.SenderKeysForUserRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.SenderKeysForUserRequest.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string walletAddress = 2;
 * @return {string}
 */
proto.identity.client.SenderKeysForUserRequest.prototype.getWalletaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.SenderKeysForUserRequest} returns this
 */
proto.identity.client.SenderKeysForUserRequest.prototype.setWalletaddress = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.identity.client.SenderKeysForUserRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.identity.client.SenderKeysForUserRequest} returns this
 */
proto.identity.client.SenderKeysForUserRequest.prototype.clearWalletaddress = function() {
  return jspb.Message.setOneofField(this, 2, proto.identity.client.SenderKeysForUserRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.SenderKeysForUserRequest.prototype.hasWalletaddress = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.SenderKeysForUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.SenderKeysForUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.SenderKeysForUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.SenderKeysForUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicesMap: (f = msg.getDevicesMap()) ? f.toObject(includeInstance, proto.identity.client.SenderKeyInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.SenderKeysForUserResponse}
 */
proto.identity.client.SenderKeysForUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.SenderKeysForUserResponse;
  return proto.identity.client.SenderKeysForUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.SenderKeysForUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.SenderKeysForUserResponse}
 */
proto.identity.client.SenderKeysForUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getDevicesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.identity.client.SenderKeyInfo.deserializeBinaryFromReader, "", new proto.identity.client.SenderKeyInfo());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.SenderKeysForUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.SenderKeysForUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.SenderKeysForUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.SenderKeysForUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.identity.client.SenderKeyInfo.serializeBinaryToWriter);
  }
};


/**
 * map<string, SenderKeyInfo> devices = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.identity.client.SenderKeyInfo>}
 */
proto.identity.client.SenderKeysForUserResponse.prototype.getDevicesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.identity.client.SenderKeyInfo>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.identity.client.SenderKeyInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.identity.client.SenderKeysForUserResponse} returns this
 */
proto.identity.client.SenderKeysForUserResponse.prototype.clearDevicesMap = function() {
  this.getDevicesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.KeyserverSessionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.KeyserverSessionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.KeyserverSessionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.KeyserverSessionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    identityinfo: (f = msg.getIdentityinfo()) && proto.identity.client.IdentityKeyInfo.toObject(includeInstance, f),
    identityprekeys: (f = msg.getIdentityprekeys()) && proto.identity.client.PreKey.toObject(includeInstance, f),
    onetimeidentityprekey: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.KeyserverSessionInfo}
 */
proto.identity.client.KeyserverSessionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.KeyserverSessionInfo;
  return proto.identity.client.KeyserverSessionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.KeyserverSessionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.KeyserverSessionInfo}
 */
proto.identity.client.KeyserverSessionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.identity.client.IdentityKeyInfo;
      reader.readMessage(value,proto.identity.client.IdentityKeyInfo.deserializeBinaryFromReader);
      msg.setIdentityinfo(value);
      break;
    case 2:
      var value = new proto.identity.client.PreKey;
      reader.readMessage(value,proto.identity.client.PreKey.deserializeBinaryFromReader);
      msg.setIdentityprekeys(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOnetimeidentityprekey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.KeyserverSessionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.KeyserverSessionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.KeyserverSessionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.KeyserverSessionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentityinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.identity.client.IdentityKeyInfo.serializeBinaryToWriter
    );
  }
  f = message.getIdentityprekeys();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.identity.client.PreKey.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional IdentityKeyInfo identityInfo = 1;
 * @return {?proto.identity.client.IdentityKeyInfo}
 */
proto.identity.client.KeyserverSessionInfo.prototype.getIdentityinfo = function() {
  return /** @type{?proto.identity.client.IdentityKeyInfo} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.IdentityKeyInfo, 1));
};


/**
 * @param {?proto.identity.client.IdentityKeyInfo|undefined} value
 * @return {!proto.identity.client.KeyserverSessionInfo} returns this
*/
proto.identity.client.KeyserverSessionInfo.prototype.setIdentityinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.KeyserverSessionInfo} returns this
 */
proto.identity.client.KeyserverSessionInfo.prototype.clearIdentityinfo = function() {
  return this.setIdentityinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.KeyserverSessionInfo.prototype.hasIdentityinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PreKey identityPrekeys = 2;
 * @return {?proto.identity.client.PreKey}
 */
proto.identity.client.KeyserverSessionInfo.prototype.getIdentityprekeys = function() {
  return /** @type{?proto.identity.client.PreKey} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.PreKey, 2));
};


/**
 * @param {?proto.identity.client.PreKey|undefined} value
 * @return {!proto.identity.client.KeyserverSessionInfo} returns this
*/
proto.identity.client.KeyserverSessionInfo.prototype.setIdentityprekeys = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.KeyserverSessionInfo} returns this
 */
proto.identity.client.KeyserverSessionInfo.prototype.clearIdentityprekeys = function() {
  return this.setIdentityprekeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.KeyserverSessionInfo.prototype.hasIdentityprekeys = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string onetimeIdentityPrekey = 5;
 * @return {string}
 */
proto.identity.client.KeyserverSessionInfo.prototype.getOnetimeidentityprekey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.KeyserverSessionInfo} returns this
 */
proto.identity.client.KeyserverSessionInfo.prototype.setOnetimeidentityprekey = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.identity.client.KeyserverSessionInfo} returns this
 */
proto.identity.client.KeyserverSessionInfo.prototype.clearOnetimeidentityprekey = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.KeyserverSessionInfo.prototype.hasOnetimeidentityprekey = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.identity.client.KeyserverKeysRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.identity.client.KeyserverKeysRequest.IdentifierCase = {
  IDENTIFIER_NOT_SET: 0,
  USERNAME: 1,
  WALLETADDRESS: 2
};

/**
 * @return {proto.identity.client.KeyserverKeysRequest.IdentifierCase}
 */
proto.identity.client.KeyserverKeysRequest.prototype.getIdentifierCase = function() {
  return /** @type {proto.identity.client.KeyserverKeysRequest.IdentifierCase} */(jspb.Message.computeOneofCase(this, proto.identity.client.KeyserverKeysRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.KeyserverKeysRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.KeyserverKeysRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.KeyserverKeysRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.KeyserverKeysRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    walletaddress: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.KeyserverKeysRequest}
 */
proto.identity.client.KeyserverKeysRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.KeyserverKeysRequest;
  return proto.identity.client.KeyserverKeysRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.KeyserverKeysRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.KeyserverKeysRequest}
 */
proto.identity.client.KeyserverKeysRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWalletaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.KeyserverKeysRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.KeyserverKeysRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.KeyserverKeysRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.KeyserverKeysRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.identity.client.KeyserverKeysRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.KeyserverKeysRequest} returns this
 */
proto.identity.client.KeyserverKeysRequest.prototype.setUsername = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.identity.client.KeyserverKeysRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.identity.client.KeyserverKeysRequest} returns this
 */
proto.identity.client.KeyserverKeysRequest.prototype.clearUsername = function() {
  return jspb.Message.setOneofField(this, 1, proto.identity.client.KeyserverKeysRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.KeyserverKeysRequest.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string walletAddress = 2;
 * @return {string}
 */
proto.identity.client.KeyserverKeysRequest.prototype.getWalletaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.KeyserverKeysRequest} returns this
 */
proto.identity.client.KeyserverKeysRequest.prototype.setWalletaddress = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.identity.client.KeyserverKeysRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.identity.client.KeyserverKeysRequest} returns this
 */
proto.identity.client.KeyserverKeysRequest.prototype.clearWalletaddress = function() {
  return jspb.Message.setOneofField(this, 2, proto.identity.client.KeyserverKeysRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.KeyserverKeysRequest.prototype.hasWalletaddress = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.KeyserverKeysResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.KeyserverKeysResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.KeyserverKeysResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.KeyserverKeysResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyserverinfo: (f = msg.getKeyserverinfo()) && proto.identity.client.KeyserverSessionInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.KeyserverKeysResponse}
 */
proto.identity.client.KeyserverKeysResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.KeyserverKeysResponse;
  return proto.identity.client.KeyserverKeysResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.KeyserverKeysResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.KeyserverKeysResponse}
 */
proto.identity.client.KeyserverKeysResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.identity.client.KeyserverSessionInfo;
      reader.readMessage(value,proto.identity.client.KeyserverSessionInfo.deserializeBinaryFromReader);
      msg.setKeyserverinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.KeyserverKeysResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.KeyserverKeysResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.KeyserverKeysResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.KeyserverKeysResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyserverinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.identity.client.KeyserverSessionInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional KeyserverSessionInfo keyserverInfo = 1;
 * @return {?proto.identity.client.KeyserverSessionInfo}
 */
proto.identity.client.KeyserverKeysResponse.prototype.getKeyserverinfo = function() {
  return /** @type{?proto.identity.client.KeyserverSessionInfo} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.KeyserverSessionInfo, 1));
};


/**
 * @param {?proto.identity.client.KeyserverSessionInfo|undefined} value
 * @return {!proto.identity.client.KeyserverKeysResponse} returns this
*/
proto.identity.client.KeyserverKeysResponse.prototype.setKeyserverinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.KeyserverKeysResponse} returns this
 */
proto.identity.client.KeyserverKeysResponse.prototype.clearKeyserverinfo = function() {
  return this.setKeyserverinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.KeyserverKeysResponse.prototype.hasKeyserverinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.identity.client.UploadOneTimeKeysRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.UploadOneTimeKeysRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.UploadOneTimeKeysRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.UploadOneTimeKeysRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.UploadOneTimeKeysRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    onetimeprekeysList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.UploadOneTimeKeysRequest}
 */
proto.identity.client.UploadOneTimeKeysRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.UploadOneTimeKeysRequest;
  return proto.identity.client.UploadOneTimeKeysRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.UploadOneTimeKeysRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.UploadOneTimeKeysRequest}
 */
proto.identity.client.UploadOneTimeKeysRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addOnetimeprekeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.UploadOneTimeKeysRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.UploadOneTimeKeysRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.UploadOneTimeKeysRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.UploadOneTimeKeysRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOnetimeprekeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.identity.client.UploadOneTimeKeysRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.UploadOneTimeKeysRequest} returns this
 */
proto.identity.client.UploadOneTimeKeysRequest.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string oneTimePreKeys = 2;
 * @return {!Array<string>}
 */
proto.identity.client.UploadOneTimeKeysRequest.prototype.getOnetimeprekeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.identity.client.UploadOneTimeKeysRequest} returns this
 */
proto.identity.client.UploadOneTimeKeysRequest.prototype.setOnetimeprekeysList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.identity.client.UploadOneTimeKeysRequest} returns this
 */
proto.identity.client.UploadOneTimeKeysRequest.prototype.addOnetimeprekeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.identity.client.UploadOneTimeKeysRequest} returns this
 */
proto.identity.client.UploadOneTimeKeysRequest.prototype.clearOnetimeprekeysList = function() {
  return this.setOnetimeprekeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.client.RefreshUserPreKeysRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.client.RefreshUserPreKeysRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.client.RefreshUserPreKeysRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RefreshUserPreKeysRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newprekeys: (f = msg.getNewprekeys()) && proto.identity.client.PreKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.client.RefreshUserPreKeysRequest}
 */
proto.identity.client.RefreshUserPreKeysRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.client.RefreshUserPreKeysRequest;
  return proto.identity.client.RefreshUserPreKeysRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.client.RefreshUserPreKeysRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.client.RefreshUserPreKeysRequest}
 */
proto.identity.client.RefreshUserPreKeysRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = new proto.identity.client.PreKey;
      reader.readMessage(value,proto.identity.client.PreKey.deserializeBinaryFromReader);
      msg.setNewprekeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.client.RefreshUserPreKeysRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.client.RefreshUserPreKeysRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.client.RefreshUserPreKeysRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.client.RefreshUserPreKeysRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewprekeys();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.identity.client.PreKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.identity.client.RefreshUserPreKeysRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.client.RefreshUserPreKeysRequest} returns this
 */
proto.identity.client.RefreshUserPreKeysRequest.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PreKey newPreKeys = 2;
 * @return {?proto.identity.client.PreKey}
 */
proto.identity.client.RefreshUserPreKeysRequest.prototype.getNewprekeys = function() {
  return /** @type{?proto.identity.client.PreKey} */ (
    jspb.Message.getWrapperField(this, proto.identity.client.PreKey, 2));
};


/**
 * @param {?proto.identity.client.PreKey|undefined} value
 * @return {!proto.identity.client.RefreshUserPreKeysRequest} returns this
*/
proto.identity.client.RefreshUserPreKeysRequest.prototype.setNewprekeys = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.client.RefreshUserPreKeysRequest} returns this
 */
proto.identity.client.RefreshUserPreKeysRequest.prototype.clearNewprekeys = function() {
  return this.setNewprekeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.client.RefreshUserPreKeysRequest.prototype.hasNewprekeys = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.identity.client);

