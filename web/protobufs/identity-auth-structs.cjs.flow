// @flow

import {
  Message,
  BinaryWriter,
  BinaryReader,
  Map as ProtoMap,
} from 'google-protobuf';

import * as identityStructs from './identity-unauth-structs.cjs';

declare export class UploadOneTimeKeysRequest extends Message {
  getContentonetimeprekeysList(): Array<string>;
  setContentonetimeprekeysList(value: Array<string>): UploadOneTimeKeysRequest;
  clearContentonetimeprekeysList(): UploadOneTimeKeysRequest;
  addContentonetimeprekeys(value: string, index?: number): UploadOneTimeKeysRequest;

  getNotifonetimeprekeysList(): Array<string>;
  setNotifonetimeprekeysList(value: Array<string>): UploadOneTimeKeysRequest;
  clearNotifonetimeprekeysList(): UploadOneTimeKeysRequest;
  addNotifonetimeprekeys(value: string, index?: number): UploadOneTimeKeysRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UploadOneTimeKeysRequestObject;
  static toObject(includeInstance: boolean, msg: UploadOneTimeKeysRequest): UploadOneTimeKeysRequestObject;
  static serializeBinaryToWriter(message: UploadOneTimeKeysRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UploadOneTimeKeysRequest;
  static deserializeBinaryFromReader(message: UploadOneTimeKeysRequest, reader: BinaryReader): UploadOneTimeKeysRequest;
}

export type UploadOneTimeKeysRequestObject = {
  contentonetimeprekeysList: Array<string>,
  notifonetimeprekeysList: Array<string>,
};

declare export class RefreshUserPreKeysRequest extends Message {
  getNewcontentprekeys(): identityStructs.PreKey | void;
  setNewcontentprekeys(value?: identityStructs.PreKey): RefreshUserPreKeysRequest;
  hasNewcontentprekeys(): boolean;
  clearNewcontentprekeys(): RefreshUserPreKeysRequest;

  getNewnotifprekeys(): identityStructs.PreKey | void;
  setNewnotifprekeys(value?: identityStructs.PreKey): RefreshUserPreKeysRequest;
  hasNewnotifprekeys(): boolean;
  clearNewnotifprekeys(): RefreshUserPreKeysRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RefreshUserPreKeysRequestObject;
  static toObject(includeInstance: boolean, msg: RefreshUserPreKeysRequest): RefreshUserPreKeysRequestObject;
  static serializeBinaryToWriter(message: RefreshUserPreKeysRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RefreshUserPreKeysRequest;
  static deserializeBinaryFromReader(message: RefreshUserPreKeysRequest, reader: BinaryReader): RefreshUserPreKeysRequest;
}

export type RefreshUserPreKeysRequestObject = {
  newcontentprekeys?: identityStructs.PreKeyObject,
  newnotifprekeys?: identityStructs.PreKeyObject,
}

declare export class OutboundKeyInfo extends Message {
  getIdentityinfo(): identityStructs.IdentityKeyInfo | void;
  setIdentityinfo(value?: identityStructs.IdentityKeyInfo): OutboundKeyInfo;
  hasIdentityinfo(): boolean;
  clearIdentityinfo(): OutboundKeyInfo;

  getContentprekey(): identityStructs.PreKey | void;
  setContentprekey(value?: identityStructs.PreKey): OutboundKeyInfo;
  hasContentprekey(): boolean;
  clearContentprekey(): OutboundKeyInfo;

  getNotifprekey(): identityStructs.PreKey | void;
  setNotifprekey(value?: identityStructs.PreKey): OutboundKeyInfo;
  hasNotifprekey(): boolean;
  clearNotifprekey(): OutboundKeyInfo;

  getOnetimecontentprekey(): string;
  setOnetimecontentprekey(value: string): OutboundKeyInfo;
  hasOnetimecontentprekey(): boolean;
  clearOnetimecontentprekey(): OutboundKeyInfo;

  getOnetimenotifprekey(): string;
  setOnetimenotifprekey(value: string): OutboundKeyInfo;
  hasOnetimenotifprekey(): boolean;
  clearOnetimenotifprekey(): OutboundKeyInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OutboundKeyInfoObject;
  static toObject(includeInstance: boolean, msg: OutboundKeyInfo): OutboundKeyInfoObject;
  static serializeBinaryToWriter(message: OutboundKeyInfo, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OutboundKeyInfo;
  static deserializeBinaryFromReader(message: OutboundKeyInfo, reader: BinaryReader): OutboundKeyInfo;
}

export type OutboundKeyInfoObject = {
  identityinfo?: identityStructs.IdentityKeyInfoObject,
  contentprekey?: identityStructs.PreKeyObject,
  notifprekey?: identityStructs.PreKeyObject,
  onetimecontentprekey?: string,
  onetimenotifprekey?: string,
};

declare export class KeyserverKeysResponse extends Message {
  getKeyserverinfo(): OutboundKeyInfo | void;
  setKeyserverinfo(value?: OutboundKeyInfo): KeyserverKeysResponse;
  hasKeyserverinfo(): boolean;
  clearKeyserverinfo(): KeyserverKeysResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): KeyserverKeysResponseObject;
  static toObject(includeInstance: boolean, msg: KeyserverKeysResponse): KeyserverKeysResponseObject;
  static serializeBinaryToWriter(message: KeyserverKeysResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): KeyserverKeysResponse;
  static deserializeBinaryFromReader(message: KeyserverKeysResponse, reader: BinaryReader): KeyserverKeysResponse;
}

export type KeyserverKeysResponseObject = {
  keyserverinfo?: OutboundKeyInfoObject,
};

declare export class OutboundKeysForUserResponse extends Message {
  getDevicesMap(): ProtoMap<string, OutboundKeyInfo>;
  clearDevicesMap(): OutboundKeysForUserResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OutboundKeysForUserResponseObject;
  static toObject(includeInstance: boolean, msg: OutboundKeysForUserResponse): OutboundKeysForUserResponseObject;
  static serializeBinaryToWriter(message: OutboundKeysForUserResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OutboundKeysForUserResponse;
  static deserializeBinaryFromReader(message: OutboundKeysForUserResponse, reader: BinaryReader): OutboundKeysForUserResponse;
}

export type OutboundKeysForUserResponseObject = {
  devicesMap: Array<[string, OutboundKeyInfoObject]>,
};

declare export class OutboundKeysForUserRequest extends Message {
  getUserid(): string;
  setUserid(value: string): OutboundKeysForUserRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OutboundKeysForUserRequestObject;
  static toObject(includeInstance: boolean, msg: OutboundKeysForUserRequest): OutboundKeysForUserRequestObject;
  static serializeBinaryToWriter(message: OutboundKeysForUserRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OutboundKeysForUserRequest;
  static deserializeBinaryFromReader(message: OutboundKeysForUserRequest, reader: BinaryReader): OutboundKeysForUserRequest;
}

export type OutboundKeysForUserRequestObject = {
  userid: string,
};

declare export class InboundKeyInfo extends Message {
  getIdentityinfo(): identityStructs.IdentityKeyInfo | void;
  setIdentityinfo(value?: identityStructs.IdentityKeyInfo): InboundKeyInfo;
  hasIdentityinfo(): boolean;
  clearIdentityinfo(): InboundKeyInfo;

  getContentprekey(): identityStructs.PreKey | void;
  setContentprekey(value?: identityStructs.PreKey): InboundKeyInfo;
  hasContentprekey(): boolean;
  clearContentprekey(): InboundKeyInfo;

  getNotifprekey(): identityStructs.PreKey | void;
  setNotifprekey(value?: identityStructs.PreKey): InboundKeyInfo;
  hasNotifprekey(): boolean;
  clearNotifprekey(): InboundKeyInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InboundKeyInfoObject;
  static toObject(includeInstance: boolean, msg: InboundKeyInfo): InboundKeyInfoObject;
  static serializeBinaryToWriter(message: InboundKeyInfo, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InboundKeyInfo;
  static deserializeBinaryFromReader(message: InboundKeyInfo, reader: BinaryReader): InboundKeyInfo;
}

export type InboundKeyInfoObject = {
  identityinfo?: identityStructs.IdentityKeyInfoObject,
  contentprekey?: identityStructs.PreKeyObject,
  notifprekey?: identityStructs.PreKeyObject,
};

declare export class InboundKeysForUserResponse extends Message {
  getDevicesMap(): ProtoMap<string, InboundKeyInfo>;
  clearDevicesMap(): InboundKeysForUserResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InboundKeysForUserResponseObject;
  static toObject(includeInstance: boolean, msg: InboundKeysForUserResponse): InboundKeysForUserResponseObject;
  static serializeBinaryToWriter(message: InboundKeysForUserResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InboundKeysForUserResponse;
  static deserializeBinaryFromReader(message: InboundKeysForUserResponse, reader: BinaryReader): InboundKeysForUserResponse;
}

export type InboundKeysForUserResponseObject = {
  devicesMap: Array<[string, InboundKeyInfoObject]>,
}

declare export class InboundKeysForUserRequest extends Message {
  getUsername(): string;
  setUsername(value: string): InboundKeysForUserRequest;

  getWalletaddress(): string;
  setWalletaddress(value: string): InboundKeysForUserRequest;

  getIdentifierCase(): IdentifierCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InboundKeysForUserRequestObject;
  static toObject(includeInstance: boolean, msg: InboundKeysForUserRequest): InboundKeysForUserRequestObject;
  static serializeBinaryToWriter(message: InboundKeysForUserRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InboundKeysForUserRequest;
  static deserializeBinaryFromReader(message: InboundKeysForUserRequest, reader: BinaryReader): InboundKeysForUserRequest;
}

export type InboundKeysForUserRequestObject = {
  userid: string,
};

export type IdentifierCase = 0 | 1 | 2;

declare export class FindUserIDRequest extends Message {
  getUsername(): string;
  setUsername(value: string): FindUserIDRequest;

  getWalletaddress(): string;
  setWalletaddress(value: string): FindUserIDRequest;

  getIdentifierCase(): IdentifierCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FindUserIDRequestObject;
  static toObject(includeInstance: boolean, msg: FindUserIDRequest): FindUserIDRequestObject;
  static serializeBinaryToWriter(message: FindUserIDRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FindUserIDRequest;
  static deserializeBinaryFromReader(message: FindUserIDRequest, reader: BinaryReader): FindUserIDRequest;
}

export type FindUserIDRequestObject = {
  username: string,
  walletaddress: string,
}

declare export class FindUserIDResponse extends Message {
  getUserid(): string;
  setUserid(value: string): FindUserIDResponse;
  hasUserid(): boolean;
  clearUserid(): FindUserIDResponse;

  getIsReserved(): boolean;
  setIsReserved(value: boolean): FindUserIDResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FindUserIDResponseObject;
  static toObject(includeInstance: boolean, msg: FindUserIDResponse): FindUserIDResponseObject;
  static serializeBinaryToWriter(message: FindUserIDResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FindUserIDResponse;
  static deserializeBinaryFromReader(message: FindUserIDResponse, reader: BinaryReader): FindUserIDResponse;
}

export type FindUserIDResponseObject = {
  userid?: string,
  isReserved: boolean,
}

declare export class UpdateUserPasswordStartRequest extends Message {
  getOpaqueregistrationrequest(): Uint8Array | string;
  getOpaqueregistrationrequest_asU8(): Uint8Array;
  getOpaqueregistrationrequest_asB64(): string;
  setOpaqueregistrationrequest(value: Uint8Array | string): UpdateUserPasswordStartRequest;

  getAccesstoken(): string;
  setAccesstoken(value: string): UpdateUserPasswordStartRequest;

  getUserid(): string;
  setUserid(value: string): UpdateUserPasswordStartRequest;

  getDeviceidkey(): string;
  setDeviceidkey(value: string): UpdateUserPasswordStartRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateUserPasswordStartRequestObject;
  static toObject(includeInstance: boolean, msg: UpdateUserPasswordStartRequest): UpdateUserPasswordStartRequestObject;
  static serializeBinaryToWriter(message: UpdateUserPasswordStartRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateUserPasswordStartRequest;
  static deserializeBinaryFromReader(message: UpdateUserPasswordStartRequest, reader: BinaryReader): UpdateUserPasswordStartRequest;
}

export type UpdateUserPasswordStartRequestObject = {
  opaqueregistrationrequest: Uint8Array | string,
  accesstoken: string,
  userid: string,
  deviceidkey: string,
};

declare export class UpdateUserPasswordFinishRequest extends Message {
  getSessionid(): string;
  setSessionid(value: string): UpdateUserPasswordFinishRequest;

  getOpaqueregistrationupload(): Uint8Array | string;
  getOpaqueregistrationupload_asU8(): Uint8Array;
  getOpaqueregistrationupload_asB64(): string;
  setOpaqueregistrationupload(value: Uint8Array | string): UpdateUserPasswordFinishRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateUserPasswordFinishRequestObject;
  static toObject(includeInstance: boolean, msg: UpdateUserPasswordFinishRequest): UpdateUserPasswordFinishRequestObject;
  static serializeBinaryToWriter(message: UpdateUserPasswordFinishRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateUserPasswordFinishRequest;
  static deserializeBinaryFromReader(message: UpdateUserPasswordFinishRequest, reader: BinaryReader): UpdateUserPasswordFinishRequest;
}

export type UpdateUserPasswordFinishRequestObject = {
  sessionid: string,
  opaqueregistrationupload: Uint8Array | string,
};

declare export class UpdateUserPasswordStartResponse extends Message {
  getSessionid(): string;
  setSessionid(value: string): UpdateUserPasswordStartResponse;

  getOpaqueregistrationresponse(): Uint8Array | string;
  getOpaqueregistrationresponse_asU8(): Uint8Array;
  getOpaqueregistrationresponse_asB64(): string;
  setOpaqueregistrationresponse(value: Uint8Array | string): UpdateUserPasswordStartResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateUserPasswordStartResponseObject;
  static toObject(includeInstance: boolean, msg: UpdateUserPasswordStartResponse): UpdateUserPasswordStartResponseObject;
  static serializeBinaryToWriter(message: UpdateUserPasswordStartResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateUserPasswordStartResponse;
  static deserializeBinaryFromReader(message: UpdateUserPasswordStartResponse, reader: BinaryReader): UpdateUserPasswordStartResponse;
}

export type UpdateUserPasswordStartResponseObject = {
  sessionid: string,
  opaqueregistrationresponse: Uint8Array | string,
};

