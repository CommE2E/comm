// @flow

import {
  Message,
  BinaryWriter,
  BinaryReader,
  Map as ProtoMap,
} from 'google-protobuf';

import * as identityStructs from './identity-unauth-structs.cjs';

declare export class EthereumIdentity extends Message {
  getWalletAddress(): string;
  setWalletAddress(value: string): EthereumIdentity;

  getSiweMessage(): string;
  setSiweMessage(value: string): EthereumIdentity;

  getSiweSignature(): string;
  setSiweSignature(value: string): EthereumIdentity;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EthereumIdentityObject;
  static toObject(includeInstance: boolean, msg: EthereumIdentity): EthereumIdentityObject;
  static serializeBinaryToWriter(message: EthereumIdentity, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EthereumIdentity;
  static deserializeBinaryFromReader(message: EthereumIdentity, reader: BinaryReader): EthereumIdentity;
}

export type EthereumIdentityObject = {
  walletAddress: string,
  siweMessage: string,
  siweSignature: string,
}

declare export class Identity extends Message {
  getUsername(): string;
  setUsername(value: string): Identity;

  getEthIdentity(): EthereumIdentity | void;
  setEthIdentity(value?: EthereumIdentity): Identity;
  hasEthIdentity(): boolean;
  clearEthIdentity(): Identity;

  getFarcasterId(): string;
  setFarcasterId(value: string): Identity;
  hasFarcasterId(): boolean;
  clearFarcasterId(): Identity;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): IdentityObject;
  static toObject(includeInstance: boolean, msg: Identity): IdentityObject;
  static serializeBinaryToWriter(message: Identity, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Identity;
  static deserializeBinaryFromReader(message: Identity, reader: BinaryReader): Identity;
}

export type IdentityObject = {
  username: string,
  ethIdentity: ?EthereumIdentityObject,
  farcasterId: ?string,
}

declare export class UploadOneTimeKeysRequest extends Message {
  getContentOneTimePrekeysList(): Array<string>;
  setContentOneTimePrekeysList(value: Array<string>): UploadOneTimeKeysRequest;
  clearContentOneTimePrekeysList(): UploadOneTimeKeysRequest;
  addContentOneTimePrekeys(value: string, index?: number): UploadOneTimeKeysRequest;

  getNotifOneTimePrekeysList(): Array<string>;
  setNotifOneTimePrekeysList(value: Array<string>): UploadOneTimeKeysRequest;
  clearNotifOneTimePrekeysList(): UploadOneTimeKeysRequest;
  addNotifOneTimePrekeys(value: string, index?: number): UploadOneTimeKeysRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UploadOneTimeKeysRequestObject;
  static toObject(includeInstance: boolean, msg: UploadOneTimeKeysRequest): UploadOneTimeKeysRequestObject;
  static serializeBinaryToWriter(message: UploadOneTimeKeysRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UploadOneTimeKeysRequest;
  static deserializeBinaryFromReader(message: UploadOneTimeKeysRequest, reader: BinaryReader): UploadOneTimeKeysRequest;
}

export type UploadOneTimeKeysRequestObject = {
  contentOneTimePrekeysList: Array<string>,
  notifOneTimePrekeysList: Array<string>,
};

declare export class RefreshUserPrekeysRequest extends Message {
  getNewContentPrekey(): identityStructs.Prekey | void;
  setNewContentPrekey(value?: identityStructs.Prekey): RefreshUserPrekeysRequest;
  hasNewContentPrekey(): boolean;
  clearNewContentPrekey(): RefreshUserPrekeysRequest;

  getNewNotifPrekey(): identityStructs.Prekey | void;
  setNewNotifPrekey(value?: identityStructs.Prekey): RefreshUserPrekeysRequest;
  hasNewNotifPrekey(): boolean;
  clearNewNotifPrekey(): RefreshUserPrekeysRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RefreshUserPrekeysRequestObject;
  static toObject(includeInstance: boolean, msg: RefreshUserPrekeysRequest): RefreshUserPrekeysRequestObject;
  static serializeBinaryToWriter(message: RefreshUserPrekeysRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RefreshUserPrekeysRequest;
  static deserializeBinaryFromReader(message: RefreshUserPrekeysRequest, reader: BinaryReader): RefreshUserPrekeysRequest;
}

export type RefreshUserPrekeysRequestObject = {
  newContentPrekey?: identityStructs.PrekeyObject,
  newNotifPrekey?: identityStructs.PrekeyObject,
}

declare export class OutboundKeyInfo extends Message {
  getIdentityInfo(): identityStructs.IdentityKeyInfo | void;
  setIdentityInfo(value?: identityStructs.IdentityKeyInfo): OutboundKeyInfo;
  hasIdentityInfo(): boolean;
  clearIdentityInfo(): OutboundKeyInfo;

  getContentPrekey(): identityStructs.Prekey | void;
  setContentPrekey(value?: identityStructs.Prekey): OutboundKeyInfo;
  hasContentPrekey(): boolean;
  clearContentPrekey(): OutboundKeyInfo;

  getNotifPrekey(): identityStructs.Prekey | void;
  setNotifPrekey(value?: identityStructs.Prekey): OutboundKeyInfo;
  hasNotifPrekey(): boolean;
  clearNotifPrekey(): OutboundKeyInfo;

  getOneTimeContentPrekey(): string;
  setOneTimeContentPrekey(value: string): OutboundKeyInfo;
  hasOneTimeContentPrekey(): boolean;
  clearOneTimeContentPrekey(): OutboundKeyInfo;

  getOneTimeNotifPrekey(): string;
  setOneTimeNotifPrekey(value: string): OutboundKeyInfo;
  hasOneTimeNotifPrekey(): boolean;
  clearOneTimeNotifPrekey(): OutboundKeyInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OutboundKeyInfoObject;
  static toObject(includeInstance: boolean, msg: OutboundKeyInfo): OutboundKeyInfoObject;
  static serializeBinaryToWriter(message: OutboundKeyInfo, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OutboundKeyInfo;
  static deserializeBinaryFromReader(message: OutboundKeyInfo, reader: BinaryReader): OutboundKeyInfo;
}

export type OutboundKeyInfoObject = {
  identityInfo?: identityStructs.IdentityKeyInfoObject,
  contentPrekey?: identityStructs.PrekeyObject,
  notifPrekey?: identityStructs.PrekeyObject,
  oneTimeContentPrekey?: string,
  oneTimeNotifPrekey?: string,
};

declare export class KeyserverKeysResponse extends Message {
  getKeyserverInfo(): OutboundKeyInfo | void;
  setKeyserverInfo(value?: OutboundKeyInfo): KeyserverKeysResponse;
  hasKeyserverInfo(): boolean;
  clearKeyserverInfo(): KeyserverKeysResponse;

  getIdentity(): Identity | void;
  setIdentity(value?: Identity): KeyserverKeysResponse;
  hasIdentity(): boolean;
  clearIdentity(): KeyserverKeysResponse;

  getPrimaryDeviceIdentityInfo(): identityStructs.IdentityKeyInfo | void;
  setPrimaryDeviceIdentityInfo(value?: identityStructs.IdentityKeyInfo): KeyserverKeysResponse;
  hasPrimaryDeviceIdentityInfo(): boolean;
  clearPrimaryDeviceIdentityInfo(): KeyserverKeysResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): KeyserverKeysResponseObject;
  static toObject(includeInstance: boolean, msg: KeyserverKeysResponse): KeyserverKeysResponseObject;
  static serializeBinaryToWriter(message: KeyserverKeysResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): KeyserverKeysResponse;
  static deserializeBinaryFromReader(message: KeyserverKeysResponse, reader: BinaryReader): KeyserverKeysResponse;
}

export type KeyserverKeysResponseObject = {
  keyserverInfo: ?OutboundKeyInfoObject,
  identity: ?IdentityObject,
  primaryDeviceIdentityInfo: ?identityStructs.IdentityKeyInfoObject,
};

declare export class OutboundKeysForUserResponse extends Message {
  getDevicesMap(): ProtoMap<string, OutboundKeyInfo>;
  clearDevicesMap(): OutboundKeysForUserResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OutboundKeysForUserResponseObject;
  static toObject(includeInstance: boolean, msg: OutboundKeysForUserResponse): OutboundKeysForUserResponseObject;
  static serializeBinaryToWriter(message: OutboundKeysForUserResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OutboundKeysForUserResponse;
  static deserializeBinaryFromReader(message: OutboundKeysForUserResponse, reader: BinaryReader): OutboundKeysForUserResponse;
}

export type OutboundKeysForUserResponseObject = {
  devicesMap: Array<[string, OutboundKeyInfoObject]>,
};

declare export class OutboundKeysForUserRequest extends Message {
  getUserId(): string;
  setUserId(value: string): OutboundKeysForUserRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OutboundKeysForUserRequestObject;
  static toObject(includeInstance: boolean, msg: OutboundKeysForUserRequest): OutboundKeysForUserRequestObject;
  static serializeBinaryToWriter(message: OutboundKeysForUserRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OutboundKeysForUserRequest;
  static deserializeBinaryFromReader(message: OutboundKeysForUserRequest, reader: BinaryReader): OutboundKeysForUserRequest;
}

export type OutboundKeysForUserRequestObject = {
  userId: string,
};

declare export class InboundKeyInfo extends Message {
  getIdentityInfo(): identityStructs.IdentityKeyInfo | void;
  setIdentityInfo(value?: identityStructs.IdentityKeyInfo): InboundKeyInfo;
  hasIdentityInfo(): boolean;
  clearIdentityInfo(): InboundKeyInfo;

  getContentPrekey(): identityStructs.Prekey | void;
  setContentPrekey(value?: identityStructs.Prekey): InboundKeyInfo;
  hasContentPrekey(): boolean;
  clearContentPrekey(): InboundKeyInfo;

  getNotifPrekey(): identityStructs.Prekey | void;
  setNotifPrekey(value?: identityStructs.Prekey): InboundKeyInfo;
  hasNotifPrekey(): boolean;
  clearNotifPrekey(): InboundKeyInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InboundKeyInfoObject;
  static toObject(includeInstance: boolean, msg: InboundKeyInfo): InboundKeyInfoObject;
  static serializeBinaryToWriter(message: InboundKeyInfo, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InboundKeyInfo;
  static deserializeBinaryFromReader(message: InboundKeyInfo, reader: BinaryReader): InboundKeyInfo;
}

export type InboundKeyInfoObject = {
  identityInfo?: identityStructs.IdentityKeyInfoObject,
  contentPrekey?: identityStructs.PrekeyObject,
  notifPrekey?: identityStructs.PrekeyObject,
};

declare export class InboundKeysForUserResponse extends Message {
  getDevicesMap(): ProtoMap<string, InboundKeyInfo>;
  clearDevicesMap(): InboundKeysForUserResponse;

  getIdentity(): Identity | void;
  setIdentity(value?: Identity): InboundKeysForUserResponse;
  hasIdentity(): boolean;
  clearIdentity(): InboundKeysForUserResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InboundKeysForUserResponseObject;
  static toObject(includeInstance: boolean, msg: InboundKeysForUserResponse): InboundKeysForUserResponseObject;
  static serializeBinaryToWriter(message: InboundKeysForUserResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InboundKeysForUserResponse;
  static deserializeBinaryFromReader(message: InboundKeysForUserResponse, reader: BinaryReader): InboundKeysForUserResponse;
}

export type InboundKeysForUserResponseObject = {
  devicesMap: Array<[string, InboundKeyInfoObject]>,
  identity: ?IdentityObject,
}

declare export class InboundKeysForUserRequest extends Message {
  getUserId(): string;
  setUserId(value: string): InboundKeysForUserRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InboundKeysForUserRequestObject;
  static toObject(includeInstance: boolean, msg: InboundKeysForUserRequest): InboundKeysForUserRequestObject;
  static serializeBinaryToWriter(message: InboundKeysForUserRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InboundKeysForUserRequest;
  static deserializeBinaryFromReader(message: InboundKeysForUserRequest, reader: BinaryReader): InboundKeysForUserRequest;
}

export type InboundKeysForUserRequestObject = {
  userId: string,
};

declare export class UpdateUserPasswordStartRequest extends Message {
  getOpaqueRegistrationRequest(): Uint8Array | string;
  getOpaqueRegistrationRequest_asU8(): Uint8Array;
  getOpaqueRegistrationRequest_asB64(): string;
  setOpaqueRegistrationRequest(value: Uint8Array | string): UpdateUserPasswordStartRequest;

  getOpaqueLoginRequest(): Uint8Array | string;
  getOpaqueLoginRequest_asU8(): Uint8Array;
  getOpaqueLoginRequest_asB64(): string;
  setOpaqueLoginRequest(value: Uint8Array | string): UpdateUserPasswordStartRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateUserPasswordStartRequestObject;
  static toObject(includeInstance: boolean, msg: UpdateUserPasswordStartRequest): UpdateUserPasswordStartRequestObject;
  static serializeBinaryToWriter(message: UpdateUserPasswordStartRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateUserPasswordStartRequest;
  static deserializeBinaryFromReader(message: UpdateUserPasswordStartRequest, reader: BinaryReader): UpdateUserPasswordStartRequest;
}

export type UpdateUserPasswordStartRequestObject = {
  opaqueRegistrationRequest: Uint8Array | string,
  opaqueLoginRequest: Uint8Array | string,
};

declare export class UpdateUserPasswordFinishRequest extends Message {
  getSessionId(): string;
  setSessionId(value: string): UpdateUserPasswordFinishRequest;

  getOpaqueRegistrationUpload(): Uint8Array | string;
  getOpaqueRegistrationUpload_asU8(): Uint8Array;
  getOpaqueRegistrationUpload_asB64(): string;
  setOpaqueRegistrationUpload(value: Uint8Array | string): UpdateUserPasswordFinishRequest;

  getOpaqueLoginUpload(): Uint8Array | string;
  getOpaqueLoginUpload_asU8(): Uint8Array;
  getOpaqueLoginUpload_asB64(): string;
  setOpaqueLoginUpload(value: Uint8Array | string): UpdateUserPasswordFinishRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateUserPasswordFinishRequestObject;
  static toObject(includeInstance: boolean, msg: UpdateUserPasswordFinishRequest): UpdateUserPasswordFinishRequestObject;
  static serializeBinaryToWriter(message: UpdateUserPasswordFinishRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateUserPasswordFinishRequest;
  static deserializeBinaryFromReader(message: UpdateUserPasswordFinishRequest, reader: BinaryReader): UpdateUserPasswordFinishRequest;
}

export type UpdateUserPasswordFinishRequestObject = {
  sessionId: string,
  opaqueRegistrationUpload: Uint8Array | string,
  opaqueLoginUpload: Uint8Array | string,
};

declare export class UpdateUserPasswordStartResponse extends Message {
  getSessionId(): string;
  setSessionId(value: string): UpdateUserPasswordStartResponse;

  getOpaqueRegistrationResponse(): Uint8Array | string;
  getOpaqueRegistrationResponse_asU8(): Uint8Array;
  getOpaqueRegistrationResponse_asB64(): string;
  setOpaqueRegistrationResponse(value: Uint8Array | string): UpdateUserPasswordStartResponse;

  getOpaqueLoginResponse(): Uint8Array | string;
  getOpaqueLoginResponse_asU8(): Uint8Array;
  getOpaqueLoginResponse_asB64(): string;
  setOpaqueLoginResponse(value: Uint8Array | string): UpdateUserPasswordStartResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateUserPasswordStartResponseObject;
  static toObject(includeInstance: boolean, msg: UpdateUserPasswordStartResponse): UpdateUserPasswordStartResponseObject;
  static serializeBinaryToWriter(message: UpdateUserPasswordStartResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateUserPasswordStartResponse;
  static deserializeBinaryFromReader(message: UpdateUserPasswordStartResponse, reader: BinaryReader): UpdateUserPasswordStartResponse;
}

export type UpdateUserPasswordStartResponseObject = {
  sessionId: string,
  opaqueRegistrationResponse: Uint8Array | string,
  opaqueLoginResponse: Uint8Array | string,
};

declare export class DeletePasswordUserStartRequest extends Message {
  getOpaqueLoginRequest(): Uint8Array | string;
  getOpaqueLoginRequest_asU8(): Uint8Array;
  getOpaqueLoginRequest_asB64(): string;
  setOpaqueLoginRequest(value: Uint8Array | string): DeletePasswordUserStartRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeletePasswordUserStartRequestObject;
  static toObject(includeInstance: boolean, msg: DeletePasswordUserStartRequest): DeletePasswordUserStartRequestObject;
  static serializeBinaryToWriter(message: DeletePasswordUserStartRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeletePasswordUserStartRequest;
  static deserializeBinaryFromReader(message: DeletePasswordUserStartRequest, reader: BinaryReader): DeletePasswordUserStartRequest;
}

export type DeletePasswordUserStartRequestObject = {
  opaqueLoginRequest: Uint8Array | string,
}

declare export class DeletePasswordUserFinishRequest extends Message {
  getSessionId(): string;
  setSessionId(value: string): DeletePasswordUserFinishRequest;

  getOpaqueLoginUpload(): Uint8Array | string;
  getOpaqueLoginUpload_asU8(): Uint8Array;
  getOpaqueLoginUpload_asB64(): string;
  setOpaqueLoginUpload(value: Uint8Array | string): DeletePasswordUserFinishRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeletePasswordUserFinishRequestObject;
  static toObject(includeInstance: boolean, msg: DeletePasswordUserFinishRequest): DeletePasswordUserFinishRequestObject;
  static serializeBinaryToWriter(message: DeletePasswordUserFinishRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeletePasswordUserFinishRequest;
  static deserializeBinaryFromReader(message: DeletePasswordUserFinishRequest, reader: BinaryReader): DeletePasswordUserFinishRequest;
}

export type DeletePasswordUserFinishRequestObject = {
  sessionId: string,
  opaqueLoginUpload: Uint8Array | string,
}

declare export class DeletePasswordUserStartResponse extends Message {
  getSessionId(): string;
  setSessionId(value: string): DeletePasswordUserStartResponse;

  getOpaqueLoginResponse(): Uint8Array | string;
  getOpaqueLoginResponse_asU8(): Uint8Array;
  getOpaqueLoginResponse_asB64(): string;
  setOpaqueLoginResponse(value: Uint8Array | string): DeletePasswordUserStartResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeletePasswordUserStartResponseObject;
  static toObject(includeInstance: boolean, msg: DeletePasswordUserStartResponse): DeletePasswordUserStartResponseObject;
  static serializeBinaryToWriter(message: DeletePasswordUserStartResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeletePasswordUserStartResponse;
  static deserializeBinaryFromReader(message: DeletePasswordUserStartResponse, reader: BinaryReader): DeletePasswordUserStartResponse;
}

export type DeletePasswordUserStartResponseObject = {
  sessionId: string,
  opaqueLoginResponse: Uint8Array | string,
}

export type SinceTimestampCase = 0 | 2;

declare export class GetDeviceListRequest extends Message {
  getUserId(): string;
  setUserId(value: string): GetDeviceListRequest;

  getSinceTimestamp(): number;
  setSinceTimestamp(value: number): GetDeviceListRequest;
  hasSinceTimestamp(): boolean;
  clearSinceTimestamp(): GetDeviceListRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetDeviceListRequestObject;
  static toObject(includeInstance: boolean, msg: GetDeviceListRequest): GetDeviceListRequestObject;
  static serializeBinaryToWriter(message: GetDeviceListRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetDeviceListRequest;
  static deserializeBinaryFromReader(message: GetDeviceListRequest, reader: BinaryReader): GetDeviceListRequest;
}

export type GetDeviceListRequestObject = {
  userId: string,
  sinceTimestamp?: number,
}

declare export class GetDeviceListResponse extends Message {
  getDeviceListUpdatesList(): Array<string>;
  setDeviceListUpdatesList(value: Array<string>): GetDeviceListResponse;
  clearDeviceListUpdatesList(): GetDeviceListResponse;
  addDeviceListUpdates(value: string, index?: number): GetDeviceListResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetDeviceListResponseObject;
  static toObject(includeInstance: boolean, msg: GetDeviceListResponse): GetDeviceListResponseObject;
  static serializeBinaryToWriter(message: GetDeviceListResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetDeviceListResponse;
  static deserializeBinaryFromReader(message: GetDeviceListResponse, reader: BinaryReader): GetDeviceListResponse;
}

export type GetDeviceListResponseObject = {
  deviceListUpdatesList: Array<string>,
}

declare export class PlatformDetails extends Message {
  getDeviceType(): identityStructs.DeviceType;
  setDeviceType(value: identityStructs.DeviceType): PlatformDetails;

  getCodeVersion(): number;
  setCodeVersion(value: number): PlatformDetails;

  getStateVersion(): number;
  setStateVersion(value: number): PlatformDetails;
  hasStateVersion(): boolean;
  clearStateVersion(): PlatformDetails;

  getMajorDesktopVersion(): number;
  setMajorDesktopVersion(value: number): PlatformDetails;
  hasMajorDesktopVersion(): boolean;
  clearMajorDesktopVersion(): PlatformDetails;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PlatformDetailsObject;
  static toObject(includeInstance: boolean, msg: PlatformDetails): PlatformDetailsObject;
  static serializeBinaryToWriter(message: PlatformDetails, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PlatformDetails;
  static deserializeBinaryFromReader(message: PlatformDetails, reader: BinaryReader): PlatformDetails;
}

export type PlatformDetailsObject = {
  deviceType: identityStructs.DeviceType,
  codeVersion: number,
  stateVersion?: number,
  majorDesktopVersion?: number,
}

declare export class UserDevicesPlatformDetails extends Message {
  getDevicesPlatformDetailsMap(): ProtoMap<string, PlatformDetails>;
  clearDevicesPlatformDetailsMap(): UserDevicesPlatformDetails;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UserDevicesPlatformDetailsObject;
  static toObject(includeInstance: boolean, msg: UserDevicesPlatformDetails): UserDevicesPlatformDetailsObject;
  static serializeBinaryToWriter(message: UserDevicesPlatformDetails, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UserDevicesPlatformDetails;
  static deserializeBinaryFromReader(message: UserDevicesPlatformDetails, reader: BinaryReader): UserDevicesPlatformDetails;
}

export type UserDevicesPlatformDetailsObject = {
  devicesPlatformDetailsMap: Array<[string, PlatformDetailsObject]>,
}

declare export class PeersDeviceListsRequest extends Message {
  getUserIdsList(): Array<string>;
  setUserIdsList(value: Array<string>): PeersDeviceListsRequest;
  clearUserIdsList(): PeersDeviceListsRequest;
  addUserIds(value: string, index?: number): PeersDeviceListsRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PeersDeviceListsRequestObject;
  static toObject(includeInstance: boolean, msg: PeersDeviceListsRequest): PeersDeviceListsRequestObject;
  static serializeBinaryToWriter(message: PeersDeviceListsRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PeersDeviceListsRequest;
  static deserializeBinaryFromReader(message: PeersDeviceListsRequest, reader: BinaryReader): PeersDeviceListsRequest;
}

export type PeersDeviceListsRequestObject = {
  userIdsList: Array<string>,
}

declare export class PeersDeviceListsResponse extends Message {
  getUsersDeviceListsMap(): ProtoMap<string, string>;
  clearUsersDeviceListsMap(): PeersDeviceListsResponse;

  getUsersDevicesPlatformDetailsMap(): ProtoMap<string, UserDevicesPlatformDetails>;
  clearUsersDevicesPlatformDetailsMap(): PeersDeviceListsResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PeersDeviceListsResponseObject;
  static toObject(includeInstance: boolean, msg: PeersDeviceListsResponse): PeersDeviceListsResponseObject;
  static serializeBinaryToWriter(message: PeersDeviceListsResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PeersDeviceListsResponse;
  static deserializeBinaryFromReader(message: PeersDeviceListsResponse, reader: BinaryReader): PeersDeviceListsResponse;
}

export type PeersDeviceListsResponseObject = {
  usersDeviceListsMap: Array<[string, string]>,
  usersDevicesPlatformDetailsMap: Array<[string, UserDevicesPlatformDetailsObject]>,
}

declare export class UpdateDeviceListRequest extends Message {
  getNewDeviceList(): string;
  setNewDeviceList(value: string): UpdateDeviceListRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateDeviceListRequestObject;
  static toObject(includeInstance: boolean, msg: UpdateDeviceListRequest): UpdateDeviceListRequestObject;
  static serializeBinaryToWriter(message: UpdateDeviceListRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateDeviceListRequest;
  static deserializeBinaryFromReader(message: UpdateDeviceListRequest, reader: BinaryReader): UpdateDeviceListRequest;
}

export type UpdateDeviceListRequestObject = {
  newDeviceList: string,
}

declare export class LinkFarcasterAccountRequest extends Message {
  getFarcasterId(): string;
  setFarcasterId(value: string): LinkFarcasterAccountRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LinkFarcasterAccountRequestObject;
  static toObject(includeInstance: boolean, msg: LinkFarcasterAccountRequest): LinkFarcasterAccountRequestObject;
  static serializeBinaryToWriter(message: LinkFarcasterAccountRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LinkFarcasterAccountRequest;
  static deserializeBinaryFromReader(message: LinkFarcasterAccountRequest, reader: BinaryReader): LinkFarcasterAccountRequest;
}

export type LinkFarcasterAccountRequestObject = {
  farcasterId: string,
}

declare export class UserIdentitiesRequest extends Message {
  getUserIdsList(): Array<string>;
  setUserIdsList(value: Array<string>): UserIdentitiesRequest;
  clearUserIdsList(): UserIdentitiesRequest;
  addUserIds(value: string, index?: number): UserIdentitiesRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UserIdentitiesRequestObject;
  static toObject(includeInstance: boolean, msg: UserIdentitiesRequest): UserIdentitiesRequestObject;
  static serializeBinaryToWriter(message: UserIdentitiesRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UserIdentitiesRequest;
  static deserializeBinaryFromReader(message: UserIdentitiesRequest, reader: BinaryReader): UserIdentitiesRequest;
}

export type UserIdentitiesRequestObject = {
  userIdsList: Array<string>,
}

declare export class UserIdentitiesResponse extends Message {
  getIdentitiesMap(): Map<string, Identity>;
  clearIdentitiesMap(): UserIdentitiesResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UserIdentitiesResponseObject;
  static toObject(includeInstance: boolean, msg: UserIdentitiesResponse): UserIdentitiesResponseObject;
  static serializeBinaryToWriter(message: UserIdentitiesResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UserIdentitiesResponse;
  static deserializeBinaryFromReader(message: UserIdentitiesResponse, reader: BinaryReader): UserIdentitiesResponse;
}

export type UserIdentitiesResponseObject = {
  identitiesMap: Array<[string, IdentityObject]>,
}
