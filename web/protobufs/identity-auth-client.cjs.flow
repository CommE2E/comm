// @flow

import * as grpcWeb from 'grpc-web';

import * as identityAuthStructs from './identity-auth-structs.cjs';
import * as identityStructs from './identity-unauth-structs.cjs';


declare export class IdentityClientServiceClient {
  constructor (hostname: string,
               credentials?: null | { +[index: string]: string; },
               options?: null | { +[index: string]: any; }): void;

  uploadOneTimeKeys(
    request: identityAuthStructs.UploadOneTimeKeysRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.Empty) => void
  ): grpcWeb.ClientReadableStream<identityStructs.Empty>;

  refreshUserPrekeys(
    request: identityAuthStructs.RefreshUserPrekeysRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.Empty) => void
  ): grpcWeb.ClientReadableStream<identityStructs.Empty>;

  getOutboundKeysForUser(
    request: identityAuthStructs.OutboundKeysForUserRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityAuthStructs.OutboundKeysForUserResponse) => void
  ): grpcWeb.ClientReadableStream<identityAuthStructs.OutboundKeysForUserResponse>;

  getInboundKeysForUser(
    request: identityAuthStructs.InboundKeysForUserRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityAuthStructs.InboundKeysForUserResponse) => void
  ): grpcWeb.ClientReadableStream<identityAuthStructs.InboundKeysForUserResponse>;

  updateUserPasswordStart(
    request: identityAuthStructs.UpdateUserPasswordStartRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityAuthStructs.UpdateUserPasswordStartResponse) => void
  ): grpcWeb.ClientReadableStream<identityAuthStructs.UpdateUserPasswordStartResponse>;

  updateUserPasswordFinish(
    request: identityAuthStructs.UpdateUserPasswordFinishRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.Empty) => void
  ): grpcWeb.ClientReadableStream<identityStructs.Empty>;

  logOutUser(
    request: identityStructs.Empty,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.Empty) => void
  ): grpcWeb.ClientReadableStream<identityStructs.Empty>;

  deleteUser(
    request: identityStructs.Empty,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.Empty) => void
  ): grpcWeb.ClientReadableStream<identityStructs.Empty>;

  getKeyserverKeys(
    request: identityAuthStructs.OutboundKeysForUserRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityAuthStructs.KeyserverKeysResponse) => void
  ): grpcWeb.ClientReadableStream<identityAuthStructs.KeyserverKeysResponse>;

  findUserID(
    request: identityAuthStructs.FindUserIDRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityAuthStructs.FindUserIDResponse) => void
  ): grpcWeb.ClientReadableStream<identityAuthStructs.FindUserIDResponse>;

  getDeviceListForUser(
    request: identityAuthStructs.GetDeviceListRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityAuthStructs.GetDeviceListResponse) => void
  ): grpcWeb.ClientReadableStream<identityAuthStructs.GetDeviceListResponse>;

  updateDeviceListForUser(
    request: identityAuthStructs.UpdateDeviceListRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.Empty) => void
  ): grpcWeb.ClientReadableStream<identityStructs.Empty>;
}

declare export class IdentityClientServicePromiseClient {
  constructor (hostname: string,
               credentials?: null | { +[index: string]: string; },
               options?: null | { +[index: string]: any; }): void;

  uploadOneTimeKeys(
    request: identityAuthStructs.UploadOneTimeKeysRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.Empty>;

  refreshUserPrekeys(
    request: identityAuthStructs.RefreshUserPrekeysRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.Empty>;

  getOutboundKeysForUser(
    request: identityAuthStructs.OutboundKeysForUserRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityAuthStructs.OutboundKeysForUserResponse>;

  getInboundKeysForUser(
    request: identityAuthStructs.InboundKeysForUserRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityAuthStructs.InboundKeysForUserResponse>;

  updateUserPasswordStart(
    request: identityAuthStructs.UpdateUserPasswordStartRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityAuthStructs.UpdateUserPasswordStartResponse>;

  updateUserPasswordFinish(
    request: identityAuthStructs.UpdateUserPasswordFinishRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.Empty>;

  logOutUser(
    request: identityStructs.Empty,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.Empty>;

  deleteUser(
    request: identityStructs.Empty,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.Empty>;

  getKeyserverKeys(
    request: identityAuthStructs.OutboundKeysForUserRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityAuthStructs.KeyserverKeysResponse>;

  findUserID(
    request: identityAuthStructs.FindUserIDRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityAuthStructs.FindUserIDResponse>;

  getDeviceListForUser(
    request: identityAuthStructs.GetDeviceListRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityAuthStructs.GetDeviceListResponse>;

  updateDeviceListForUser(
    request: identityAuthStructs.UpdateDeviceListRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.Empty>;
}
