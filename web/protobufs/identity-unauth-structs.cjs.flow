// @flow

import {
  Message,
  BinaryWriter,
  BinaryReader,
  Map as ProtoMap,
} from 'google-protobuf';

declare export class Empty extends Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): {};
  static toObject(includeInstance: boolean, msg: Empty): {};
  static serializeBinaryToWriter(message: Empty, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Empty;
  static deserializeBinaryFromReader(message: Empty, reader: BinaryReader): Empty;
}

export type PrekeyObject = {
  prekey: string,
  prekeySignature: string,
}

declare export class Prekey extends Message {
  getPrekey(): string;
  setPrekey(value: string): Prekey;

  getPrekeySignature(): string;
  setPrekeySignature(value: string): Prekey;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PrekeyObject;
  static toObject(includeInstance: boolean, msg: Prekey): PrekeyObject;
  static serializeBinaryToWriter(message: Prekey, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Prekey;
  static deserializeBinaryFromReader(message: Prekey, reader: BinaryReader): Prekey;
}

export type IdentityKeyInfoObject = {
  payload: string,
  payloadSignature: string,
  socialProof?: string,
};

declare export class IdentityKeyInfo extends Message {
  getPayload(): string;
  setPayload(value: string): IdentityKeyInfo;

  getPayloadSignature(): string;
  setPayloadSignature(value: string): IdentityKeyInfo;

  getSocialProof(): string;
  setSocialProof(value: string): IdentityKeyInfo;
  hasSocialProof(): boolean;
  clearSocialProof(): IdentityKeyInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): IdentityKeyInfoObject;
  static toObject(includeInstance: boolean, msg: IdentityKeyInfo): IdentityKeyInfoObject;
  static serializeBinaryToWriter(message: IdentityKeyInfo, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): IdentityKeyInfo;
  static deserializeBinaryFromReader(message: IdentityKeyInfo, reader: BinaryReader): IdentityKeyInfo;
}

declare export class DeviceKeyUpload extends Message {
  getDeviceKeyInfo(): IdentityKeyInfo | void;
  setDeviceKeyInfo(value?: IdentityKeyInfo): DeviceKeyUpload;
  hasDeviceKeyInfo(): boolean;
  clearDeviceKeyInfo(): DeviceKeyUpload;

  getContentUpload(): Prekey | void;
  setContentUpload(value?: Prekey): DeviceKeyUpload;
  hasContentUpload(): boolean;
  clearContentUpload(): DeviceKeyUpload;

  getNotifUpload(): Prekey | void;
  setNotifUpload(value?: Prekey): DeviceKeyUpload;
  hasNotifUpload(): boolean;
  clearNotifUpload(): DeviceKeyUpload;

  getOneTimeContentPrekeysList(): Array<string>;
  setOneTimeContentPrekeysList(value: Array<string>): DeviceKeyUpload;
  clearOneTimeContentPrekeysList(): DeviceKeyUpload;
  addOneTimeContentPrekeys(value: string, index?: number): DeviceKeyUpload;

  getOneTimeNotifPrekeysList(): Array<string>;
  setOneTimeNotifPrekeysList(value: Array<string>): DeviceKeyUpload;
  clearOneTimeNotifPrekeysList(): DeviceKeyUpload;
  addOneTimeNotifPrekeys(value: string, index?: number): DeviceKeyUpload;

  getDeviceType(): DeviceType;
  setDeviceType(value: DeviceType): DeviceKeyUpload;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeviceKeyUploadObject;
  static toObject(includeInstance: boolean, msg: DeviceKeyUpload): DeviceKeyUploadObject;
  static serializeBinaryToWriter(message: DeviceKeyUpload, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeviceKeyUpload;
  static deserializeBinaryFromReader(message: DeviceKeyUpload, reader: BinaryReader): DeviceKeyUpload;
}

export type DeviceKeyUploadObject = {
  deviceKeyInfo?: IdentityKeyInfoObject,
  contentUpload?: PrekeyObject,
  notifUpload?: PrekeyObject,
  oneTimeContentPrekeysList: Array<string>,
  oneTimeNotifPrekeysList: Array<string>,
  deviceType: DeviceType,
};

declare export class RegistrationStartRequest extends Message {
  getOpaqueRegistrationRequest(): Uint8Array | string;
  getOpaqueRegistrationRequest_asU8(): Uint8Array;
  getOpaqueRegistrationRequest_asB64(): string;
  setOpaqueRegistrationRequest(value: Uint8Array | string): RegistrationStartRequest;

  getUsername(): string;
  setUsername(value: string): RegistrationStartRequest;

  getDeviceKeyUpload(): DeviceKeyUpload | void;
  setDeviceKeyUpload(value?: DeviceKeyUpload): RegistrationStartRequest;
  hasDeviceKeyUpload(): boolean;
  clearDeviceKeyUpload(): RegistrationStartRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RegistrationStartRequestObject;
  static toObject(includeInstance: boolean, msg: RegistrationStartRequest): RegistrationStartRequestObject;
  static serializeBinaryToWriter(message: RegistrationStartRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RegistrationStartRequest;
  static deserializeBinaryFromReader(message: RegistrationStartRequest, reader: BinaryReader): RegistrationStartRequest;
}

export type RegistrationStartRequestObject = {
  opaqueRegistrationRequest: Uint8Array | string,
  username: string,
  deviceKeyUpload?: DeviceKeyUploadObject,
};

declare export class ReservedRegistrationStartRequest extends Message {
  getOpaqueRegistrationRequest(): Uint8Array | string;
  getOpaqueRegistrationRequest_asU8(): Uint8Array;
  getOpaqueRegistrationRequest_asB64(): string;
  setOpaqueRegistrationRequest(value: Uint8Array | string): ReservedRegistrationStartRequest;

  getUsername(): string;
  setUsername(value: string): ReservedRegistrationStartRequest;

  getDeviceKeyUpload(): DeviceKeyUpload | void;
  setDeviceKeyUpload(value?: DeviceKeyUpload): ReservedRegistrationStartRequest;
  hasDeviceKeyUpload(): boolean;
  clearDeviceKeyUpload(): ReservedRegistrationStartRequest;

  getKeyserverMessage(): string;
  setKeyserverMessage(value: string): ReservedRegistrationStartRequest;

  getKeyserverSignature(): string;
  setKeyserverSignature(value: string): ReservedRegistrationStartRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ReservedRegistrationStartRequestObject;
  static toObject(includeInstance: boolean, msg: ReservedRegistrationStartRequest): ReservedRegistrationStartRequestObject;
  static serializeBinaryToWriter(message: ReservedRegistrationStartRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ReservedRegistrationStartRequest;
  static deserializeBinaryFromReader(message: ReservedRegistrationStartRequest, reader: BinaryReader): ReservedRegistrationStartRequest;
}

export type ReservedRegistrationStartRequestObject = {
  opaqueRegistrationRequest: Uint8Array | string,
  username: string,
  deviceKeyUpload?: DeviceKeyUploadObject,
  keyserverMessage: string,
  keyserverSignature: string,
};

declare export class RegistrationFinishRequest extends Message {
  getSessionid(): string;
  setSessionid(value: string): RegistrationFinishRequest;

  getOpaqueregistrationupload(): Uint8Array | string;
  getOpaqueregistrationupload_asU8(): Uint8Array;
  getOpaqueregistrationupload_asB64(): string;
  setOpaqueregistrationupload(value: Uint8Array | string): RegistrationFinishRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RegistrationFinishRequestObject;
  static toObject(includeInstance: boolean, msg: RegistrationFinishRequest): RegistrationFinishRequestObject;
  static serializeBinaryToWriter(message: RegistrationFinishRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RegistrationFinishRequest;
  static deserializeBinaryFromReader(message: RegistrationFinishRequest, reader: BinaryReader): RegistrationFinishRequest;
}

export type RegistrationFinishRequestObject = {
  sessionid: string,
  opaqueregistrationupload: Uint8Array | string,
};

declare export class RegistrationStartResponse extends Message {
  getSessionId(): string;
  setSessionId(value: string): RegistrationStartResponse;

  getOpaqueRegistrationResponse(): Uint8Array | string;
  getOpaqueRegistrationResponse_asU8(): Uint8Array;
  getOpaqueRegistrationResponse_asB64(): string;
  setOpaqueRegistrationResponse(value: Uint8Array | string): RegistrationStartResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RegistrationStartResponseObject;
  static toObject(includeInstance: boolean, msg: RegistrationStartResponse): RegistrationStartResponseObject;
  static serializeBinaryToWriter(message: RegistrationStartResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RegistrationStartResponse;
  static deserializeBinaryFromReader(message: RegistrationStartResponse, reader: BinaryReader): RegistrationStartResponse;
}

export type RegistrationStartResponseObject = {
  sessionId: string,
  opaqueRegistrationResponse: Uint8Array | string,
};

declare export class RegistrationFinishResponse extends Message {
  getUserId(): string;
  setUserId(value: string): RegistrationFinishResponse;

  getAccessToken(): string;
  setAccessToken(value: string): RegistrationFinishResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RegistrationFinishResponseObject;
  static toObject(includeInstance: boolean, msg: RegistrationFinishResponse): RegistrationFinishResponseObject;
  static serializeBinaryToWriter(message: RegistrationFinishResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RegistrationFinishResponse;
  static deserializeBinaryFromReader(message: RegistrationFinishResponse, reader: BinaryReader): RegistrationFinishResponse;
}

export type RegistrationFinishResponseObject = {
  userId: string,
  accessToken: string,
};

declare export class OpaqueLoginStartRequest extends Message {
  getUsername(): string;
  setUsername(value: string): OpaqueLoginStartRequest;

  getOpaqueLoginRequest(): Uint8Array | string;
  getOpaqueLoginRequest_asU8(): Uint8Array;
  getOpaqueLoginRequest_asB64(): string;
  setOpaqueLoginRequest(value: Uint8Array | string): OpaqueLoginStartRequest;

  getDeviceKeyUpload(): DeviceKeyUpload | void;
  setDeviceKeyUpload(value?: DeviceKeyUpload): OpaqueLoginStartRequest;
  hasDeviceKeyUpload(): boolean;
  clearDeviceKeyUpload(): OpaqueLoginStartRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OpaqueLoginStartRequestObject;
  static toObject(includeInstance: boolean, msg: OpaqueLoginStartRequest): OpaqueLoginStartRequestObject;
  static serializeBinaryToWriter(message: OpaqueLoginStartRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OpaqueLoginStartRequest;
  static deserializeBinaryFromReader(message: OpaqueLoginStartRequest, reader: BinaryReader): OpaqueLoginStartRequest;
}

export type OpaqueLoginStartRequestObject = {
  username: string,
  opaqueLoginRequest: Uint8Array | string,
  deviceKeyUpload?: DeviceKeyUploadObject,
};

declare export class OpaqueLoginFinishRequest extends Message {
  getSessionId(): string;
  setSessionId(value: string): OpaqueLoginFinishRequest;

  getOpaqueLoginUpload(): Uint8Array | string;
  getOpaqueLoginUpload_asU8(): Uint8Array;
  getOpaqueLoginUpload_asB64(): string;
  setOpaqueLoginUpload(value: Uint8Array | string): OpaqueLoginFinishRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OpaqueLoginFinishRequestObject;
  static toObject(includeInstance: boolean, msg: OpaqueLoginFinishRequest): OpaqueLoginFinishRequestObject;
  static serializeBinaryToWriter(message: OpaqueLoginFinishRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OpaqueLoginFinishRequest;
  static deserializeBinaryFromReader(message: OpaqueLoginFinishRequest, reader: BinaryReader): OpaqueLoginFinishRequest;
}

export type OpaqueLoginFinishRequestObject = {
  sessionId: string,
  opaqueLoginUpload: Uint8Array | string,
};

declare export class OpaqueLoginStartResponse extends Message {
  getSessionId(): string;
  setSessionId(value: string): OpaqueLoginStartResponse;

  getOpaqueLoginResponse(): Uint8Array | string;
  getOpaqueLoginResponse_asU8(): Uint8Array;
  getOpaqueLoginResponse_asB64(): string;
  setOpaqueLoginResponse(value: Uint8Array | string): OpaqueLoginStartResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OpaqueLoginStartResponseObject;
  static toObject(includeInstance: boolean, msg: OpaqueLoginStartResponse): OpaqueLoginStartResponseObject;
  static serializeBinaryToWriter(message: OpaqueLoginStartResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OpaqueLoginStartResponse;
  static deserializeBinaryFromReader(message: OpaqueLoginStartResponse, reader: BinaryReader): OpaqueLoginStartResponse;
}

export type OpaqueLoginStartResponseObject = {
  sessionId: string,
  opaqueLoginResponse: Uint8Array | string,
};

declare export class OpaqueLoginFinishResponse extends Message {
  getUserId(): string;
  setUserId(value: string): OpaqueLoginFinishResponse;

  getAccessToken(): string;
  setAccessToken(value: string): OpaqueLoginFinishResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OpaqueLoginFinishResponseObject;
  static toObject(includeInstance: boolean, msg: OpaqueLoginFinishResponse): OpaqueLoginFinishResponseObject;
  static serializeBinaryToWriter(message: OpaqueLoginFinishResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OpaqueLoginFinishResponse;
  static deserializeBinaryFromReader(message: OpaqueLoginFinishResponse, reader: BinaryReader): OpaqueLoginFinishResponse;
}

export type OpaqueLoginFinishResponseObject = {
  userId: string,
  accessToken: string,
};

declare export class WalletLoginRequest extends Message {
  getSiweMessage(): string;
  setSiweMessage(value: string): WalletLoginRequest;

  getSiweSignature(): string;
  setSiweSignature(value: string): WalletLoginRequest;

  getDeviceKeyUpload(): DeviceKeyUpload | void;
  setDeviceKeyUpload(value?: DeviceKeyUpload): WalletLoginRequest;
  hasDeviceKeyUpload(): boolean;
  clearDeviceKeyUpload(): WalletLoginRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): WalletLoginRequestObject;
  static toObject(includeInstance: boolean, msg: WalletLoginRequest): WalletLoginRequestObject;
  static serializeBinaryToWriter(message: WalletLoginRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): WalletLoginRequest;
  static deserializeBinaryFromReader(message: WalletLoginRequest, reader: BinaryReader): WalletLoginRequest;
}

export type WalletLoginRequestObject = {
  siweMessage: string,
  siweSignature: string,
  deviceKeyUpload?: DeviceKeyUploadObject,
};

declare export class ReservedWalletLoginRequest extends Message {
  getSiweMessage(): string;
  setSiweMessage(value: string): ReservedWalletLoginRequest;

  getSiweSignature(): string;
  setSiweSignature(value: string): ReservedWalletLoginRequest;

  getDeviceKeyUpload(): DeviceKeyUpload | void;
  setDeviceKeyUpload(value?: DeviceKeyUpload): ReservedWalletLoginRequest;
  hasDeviceKeyUpload(): boolean;
  clearDeviceKeyUpload(): ReservedWalletLoginRequest;

  getKeyserverMessage(): string;
  setKeyserverMessage(value: string): ReservedWalletLoginRequest;

  getKeyserverSignature(): string;
  setKeyserverSignature(value: string): ReservedWalletLoginRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ReservedWalletLoginRequestObject;
  static toObject(includeInstance: boolean, msg: ReservedWalletLoginRequest): ReservedWalletLoginRequestObject;
  static serializeBinaryToWriter(message: ReservedWalletLoginRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ReservedWalletLoginRequest;
  static deserializeBinaryFromReader(message: ReservedWalletLoginRequest, reader: BinaryReader): ReservedWalletLoginRequest;
}

export type ReservedWalletLoginRequestObject = {
  siweMessage: string,
  siweSignature: string,
  deviceKeyUpload?: DeviceKeyUploadObject,
  keyserverMessage: string,
  keyserverSignature: string,
};

declare export class WalletLoginResponse extends Message {
  getUserId(): string;
  setUserId(value: string): WalletLoginResponse;

  getAccessToken(): string;
  setAccessToken(value: string): WalletLoginResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): WalletLoginResponseObject;
  static toObject(includeInstance: boolean, msg: WalletLoginResponse): WalletLoginResponseObject;
  static serializeBinaryToWriter(message: WalletLoginResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): WalletLoginResponse;
  static deserializeBinaryFromReader(message: WalletLoginResponse, reader: BinaryReader): WalletLoginResponse;
}

export type WalletLoginResponseObject = {
  userId: string,
  accessToken: string,
};

declare export class SecondaryDeviceKeysUploadRequest extends Message {
  getUserId(): string;
  setUserId(value: string): SecondaryDeviceKeysUploadRequest;

  getChallengeResponse(): string;
  setChallengeResponse(value: string): SecondaryDeviceKeysUploadRequest;

  getDeviceKeyUpload(): DeviceKeyUpload | void;
  setDeviceKeyUpload(value?: DeviceKeyUpload): SecondaryDeviceKeysUploadRequest;
  hasDeviceKeyUpload(): boolean;
  clearDeviceKeyUpload(): SecondaryDeviceKeysUploadRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SecondaryDeviceKeysUploadRequestObject;
  static toObject(includeInstance: boolean, msg: SecondaryDeviceKeysUploadRequest): SecondaryDeviceKeysUploadRequestObject;
  static serializeBinaryToWriter(message: SecondaryDeviceKeysUploadRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SecondaryDeviceKeysUploadRequest;
  static deserializeBinaryFromReader(message: SecondaryDeviceKeysUploadRequest, reader: BinaryReader): SecondaryDeviceKeysUploadRequest;
}

export type SecondaryDeviceKeysUploadRequestObject = {
  userId: string,
  deviceKeyUpload?: DeviceKeyUploadObject,
}

declare export class SecondaryDeviceLoginResponse extends Message {
  getUserId(): string;
  setUserId(value: string): SecondaryDeviceLoginResponse;

  getAccessToken(): string;
  setAccessToken(value: string): SecondaryDeviceLoginResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SecondaryDeviceLoginResponseObject;
  static toObject(includeInstance: boolean, msg: SecondaryDeviceLoginResponse): SecondaryDeviceLoginResponseObject;
  static serializeBinaryToWriter(message: SecondaryDeviceLoginResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SecondaryDeviceLoginResponse;
  static deserializeBinaryFromReader(message: SecondaryDeviceLoginResponse, reader: BinaryReader): SecondaryDeviceLoginResponse;
}

export type SecondaryDeviceLoginResponseObject = {
  userId: string,
  accessToken: string,
}

declare export class GenerateNonceResponse extends Message {
  getNonce(): string;
  setNonce(value: string): GenerateNonceResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GenerateNonceResponseObject;
  static toObject(includeInstance: boolean, msg: GenerateNonceResponse): GenerateNonceResponseObject;
  static serializeBinaryToWriter(message: GenerateNonceResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GenerateNonceResponse;
  static deserializeBinaryFromReader(message: GenerateNonceResponse, reader: BinaryReader): GenerateNonceResponse;
}

export type GenerateNonceResponseObject = {
  nonce: string,
};

declare export class VerifyUserAccessTokenRequest extends Message {
  getUserId(): string;
  setUserId(value: string): VerifyUserAccessTokenRequest;

  getDeviceId(): string;
  setDeviceId(value: string): VerifyUserAccessTokenRequest;

  getAccessToken(): string;
  setAccessToken(value: string): VerifyUserAccessTokenRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VerifyUserAccessTokenRequestObject;
  static toObject(includeInstance: boolean, msg: VerifyUserAccessTokenRequest): VerifyUserAccessTokenRequestObject;
  static serializeBinaryToWriter(message: VerifyUserAccessTokenRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VerifyUserAccessTokenRequest;
  static deserializeBinaryFromReader(message: VerifyUserAccessTokenRequest, reader: BinaryReader): VerifyUserAccessTokenRequest;
}

export type VerifyUserAccessTokenRequestObject = {
  userId: string,
  deviceId: string,
  accessToken: string,
};

declare export class VerifyUserAccessTokenResponse extends Message {
  getTokenValid(): boolean;
  setTokenValid(value: boolean): VerifyUserAccessTokenResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VerifyUserAccessTokenResponseObject;
  static toObject(includeInstance: boolean, msg: VerifyUserAccessTokenResponse): VerifyUserAccessTokenResponseObject;
  static serializeBinaryToWriter(message: VerifyUserAccessTokenResponse, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VerifyUserAccessTokenResponse;
  static deserializeBinaryFromReader(message: VerifyUserAccessTokenResponse, reader: BinaryReader): VerifyUserAccessTokenResponse;
}

export type VerifyUserAccessTokenResponseObject = {
  tokenValid: boolean,
};

declare export class AddReservedUsernamesRequest extends Message {
  getMessage(): string;
  setMessage(value: string): AddReservedUsernamesRequest;

  getSignature(): string;
  setSignature(value: string): AddReservedUsernamesRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AddReservedUsernamesRequestObject;
  static toObject(includeInstance: boolean, msg: AddReservedUsernamesRequest): AddReservedUsernamesRequestObject;
  static serializeBinaryToWriter(message: AddReservedUsernamesRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AddReservedUsernamesRequest;
  static deserializeBinaryFromReader(message: AddReservedUsernamesRequest, reader: BinaryReader): AddReservedUsernamesRequest;
}

export type AddReservedUsernamesRequestObject = {
  message: string,
  signature: string,
};

declare export class RemoveReservedUsernameRequest extends Message {
  getMessage(): string;
  setMessage(value: string): RemoveReservedUsernameRequest;

  getSignature(): string;
  setSignature(value: string): RemoveReservedUsernameRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RemoveReservedUsernameRequestObject;
  static toObject(includeInstance: boolean, msg: RemoveReservedUsernameRequest): RemoveReservedUsernameRequestObject;
  static serializeBinaryToWriter(message: RemoveReservedUsernameRequest, writer: BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RemoveReservedUsernameRequest;
  static deserializeBinaryFromReader(message: RemoveReservedUsernameRequest, reader: BinaryReader): RemoveReservedUsernameRequest;
}

export type RemoveReservedUsernameRequestObject = {
  message: string,
  signature: string,
};

export type DeviceType = 0 | 1 | 2 | 3 | 4 | 5;
