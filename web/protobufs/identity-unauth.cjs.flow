// @flow

import * as grpcWeb from 'grpc-web';

import * as identityStructs from './identity-unauth-structs.cjs';

declare export class IdentityClientServiceClient {
  constructor (hostname: string,
               credentials?: null | { +[index: string]: string },
               options?: null | { +[index: string]: any }): void;

  registerPasswordUserStart(
    request: identityStructs.RegistrationStartRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.RegistrationStartResponse) => void
  ): grpcWeb.ClientReadableStream<identityStructs.RegistrationStartResponse>;

  registerReservedPasswordUserStart(
    request: identityStructs.ReservedRegistrationStartRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.RegistrationStartResponse) => void
  ): grpcWeb.ClientReadableStream<identityStructs.RegistrationStartResponse>;

  registerPasswordUserFinish(
    request: identityStructs.RegistrationFinishRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.AuthResponse) => void
  ): grpcWeb.ClientReadableStream<identityStructs.AuthResponse>;

  logInPasswordUserStart(
    request: identityStructs.OpaqueLoginStartRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.OpaqueLoginStartResponse) => void
  ): grpcWeb.ClientReadableStream<identityStructs.OpaqueLoginStartResponse>;

  logInPasswordUserFinish(
    request: identityStructs.OpaqueLoginFinishRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.AuthResponse) => void
  ): grpcWeb.ClientReadableStream<identityStructs.AuthResponse>;

  logInWalletUser(
    request: identityStructs.WalletAuthRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.AuthResponse) => void
  ): grpcWeb.ClientReadableStream<identityStructs.AuthResponse>;

  registerWalletUser(
    request: identityStructs.WalletAuthRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.AuthResponse) => void
  ): grpcWeb.ClientReadableStream<identityStructs.AuthResponse>;

  registerReservedWalletUser(
    request: identityStructs.ReservedWalletRegistrationRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.AuthResponse) => void
  ): grpcWeb.ClientReadableStream<identityStructs.AuthResponse>;

  uploadKeysForRegisteredDeviceAndLogIn(
    request: identityStructs.SecondaryDeviceKeysUploadRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.AuthResponse) => void
  ): grpcWeb.ClientReadableStream<identityStructs.AuthResponse>;

  generateNonce(
    request: identityStructs.Empty,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.GenerateNonceResponse) => void
  ): grpcWeb.ClientReadableStream<identityStructs.GenerateNonceResponse>;

  verifyUserAccessToken(
    request: identityStructs.VerifyUserAccessTokenRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.VerifyUserAccessTokenResponse) => void
  ): grpcWeb.ClientReadableStream<identityStructs.VerifyUserAccessTokenResponse>;

  addReservedUsernames(
    request: identityStructs.AddReservedUsernamesRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.Empty) => void
  ): grpcWeb.ClientReadableStream<identityStructs.Empty>;

  removeReservedUsername(
    request: identityStructs.RemoveReservedUsernameRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.Empty) => void
  ): grpcWeb.ClientReadableStream<identityStructs.Empty>;

  ping(
    request: identityStructs.Empty,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.Empty) => void
  ): grpcWeb.ClientReadableStream<identityStructs.Empty>;

  findUserID(
    request: identityStructs.FindUserIDRequest,
    metadata: grpcWeb.Metadata | void,
    callback: (err: grpcWeb.RpcError,
               response: identityStructs.FindUserIDResponse) => void
  ): grpcWeb.ClientReadableStream<identityStructs.FindUserIDResponse>;

}

declare export class IdentityClientServicePromiseClient {
  constructor (hostname: string,
               credentials?: null | { +[index: string]: string },
               options?: null | { +[index: string]: any }): void;

  registerPasswordUserStart(
    request: identityStructs.RegistrationStartRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.RegistrationStartResponse>;

  registerReservedPasswordUserStart(
    request: identityStructs.ReservedRegistrationStartRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.RegistrationStartResponse>;
registerPasswordUserFinish(
    request: identityStructs.RegistrationFinishRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.AuthResponse>;

  logInPasswordUserStart(
    request: identityStructs.OpaqueLoginStartRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.OpaqueLoginStartResponse>;

  logInPasswordUserFinish(
    request: identityStructs.OpaqueLoginFinishRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.AuthResponse>;

  logInWalletUser(
    request: identityStructs.WalletAuthRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.AuthResponse>;

  registerWalletUser(
    request: identityStructs.WalletAuthRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.AuthResponse>;

  registerReservedWalletUser(
    request: identityStructs.ReservedWalletRegistrationRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.AuthResponse>;

  uploadKeysForRegisteredDeviceAndLogIn(
    request: identityStructs.SecondaryDeviceKeysUploadRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.AuthResponse>;

  generateNonce(
    request: identityStructs.Empty,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.GenerateNonceResponse>;

  verifyUserAccessToken(
    request: identityStructs.VerifyUserAccessTokenRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.VerifyUserAccessTokenResponse>;

  addReservedUsernames(
    request: identityStructs.AddReservedUsernamesRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.Empty>;

  removeReservedUsername(
    request: identityStructs.RemoveReservedUsernameRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.Empty>;

  ping(
    request: identityStructs.Empty,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.Empty>;

  findUserID(
    request: identityStructs.FindUserIDRequest,
    metadata?: grpcWeb.Metadata
  ): Promise<identityStructs.FindUserIDResponse>;

}
