"use strict";(self.webpackChunkcomm_docs=self.webpackChunkcomm_docs||[]).push([[662],{4599:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var n=a(7462),o=a(3366),l=(a(7294),a(3905)),r=["components"],i={sidebar_position:2},s="Configuration",c={unversionedId:"dev_environment_mac/configuration",id:"dev_environment_mac/configuration",isDocsHomePage:!1,title:"Configuration",description:"Apache",source:"@site/docs/dev_environment_mac/configuration.md",sourceDirName:"dev_environment_mac",slug:"/dev_environment_mac/configuration",permalink:"/dev_environment_mac/configuration",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Prerequisites",permalink:"/dev_environment_mac/prerequisites"},next:{title:"Development",permalink:"/dev_environment_mac/development/development"}},p=[{value:"Apache",id:"apache",children:[],level:2},{value:"MySQL",id:"mysql",children:[],level:2},{value:"TablePlus",id:"tableplus",children:[],level:2},{value:"Android Emulator",id:"android-emulator",children:[],level:2},{value:"Git repo",id:"git-repo",children:[{value:"Clone from GitHub",id:"clone-from-github",children:[],level:3}],level:2},{value:"URLs",id:"urls",children:[],level:2},{value:"MySQL",id:"mysql-1",children:[],level:2},{value:"Olm",id:"olm",children:[],level:2},{value:"Phabricator",id:"phabricator",children:[],level:2}],u={toc:p};function d(e){var t=e.components,a=(0,o.Z)(e,r);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"configuration"},"Configuration"),(0,l.kt)("h2",{id:"apache"},"Apache"),(0,l.kt)("p",null,"In both dev and prod environments we have Node configured to run on port 3000, with Apache proxying it across to port 80. The reason for Apache is so that we can use other tech stacks alongside Node."),(0,l.kt)("p",null,"macOS comes with an Apache installation built in. We just need to configure it a little bit."),(0,l.kt)("p",null,"First, we\u2019ll edit the main Apache configuration file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-conf"},"sudo vim /private/etc/apache2/httpd.conf\n")),(0,l.kt)("p",null,"The following individual lines each need to be uncommented:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"LoadModule proxy_module libexec/apache2/mod_proxy.so\nLoadModule proxy_http_module libexec/apache2/mod_proxy_http.so\nLoadModule proxy_wstunnel_module libexec/apache2/mod_proxy_wstunnel.so\nLoadModule userdir_module libexec/apache2/mod_userdir.so\nInclude /private/etc/apache2/extra/httpd-userdir.conf\n")),(0,l.kt)("p",null,"Next, we\u2019ll edit the ",(0,l.kt)("inlineCode",{parentName:"p"},"http-userdir.conf")," file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"sudo vim /private/etc/apache2/extra/httpd-userdir.conf\n")),(0,l.kt)("p",null,"The following line needs to be uncommented:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"Include /private/etc/apache2/users/*.conf\n")),(0,l.kt)("p",null,"Now for the main course. We need to set up a configuration file for the current user."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"sudo vim /private/etc/apache2/users/$USER.conf\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'<VirtualHost *:80>\n  ProxyRequests on\n  ProxyPass /comm/ws ws://localhost:3000/ws\n  ProxyPass /comm/ http://localhost:3000/\n  ProxyPass /commlanding/ http://localhost:3000/commlanding/\n\n  RequestHeader set "X-Forwarded-Proto" expr=%{REQUEST_SCHEME}\n  RequestHeader set "X-Forwarded-SSL" expr=%{HTTPS}\n</VirtualHost>\n')),(0,l.kt)("p",null,"You\u2019ll want to make sure that Apache can read your new file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"sudo chmod 644 /private/etc/apache2/users/$USER.conf\n")),(0,l.kt)("p",null,"Finally, let\u2019s restart Apache so it picks up the changes."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apachectl restart\n")),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"  If you end up installing a macOS update you should go through the Apache configuration section again, as your Apache config in ",(0,l.kt)("inlineCode",{parentName:"p"},"httpd.conf")," may have been restored to the default."))),(0,l.kt)("h2",{id:"mysql"},"MySQL"),(0,l.kt)("p",null,"Next we\u2019ll set up a MySQL user and a fresh database. We\u2019ll start by opening up a MySQL console."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"mysql -u root -p\n")),(0,l.kt)("p",null,"Type in the MySQL root password you set up previously when prompted. Then, we\u2019ll go ahead and create an empty database."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"CREATE DATABASE comm;\n")),(0,l.kt)("p",null,"Now we need to create a user that can access this database. For the following command, replace \u201cpassword\u201d with a unique password."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"CREATE USER comm@localhost IDENTIFIED BY 'password';\n")),(0,l.kt)("p",null,"Finally, we will give permissions to this user to access this database."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"GRANT ALL ON comm.* TO comm@localhost;\n")),(0,l.kt)("p",null,"You can now exit the MySQL console using Ctrl+D."),(0,l.kt)("h2",{id:"tableplus"},"TablePlus"),(0,l.kt)("p",null,"Feel free to use a MySQL administration platform that you\u2019re comfortable with. PHP was deprecated in macOS 12 (Monterey), leading many of us to switch to ",(0,l.kt)("a",{parentName:"p",href:"https://tableplus.com/"},"TablePlus"),"."),(0,l.kt)("p",null,"After installing TablePlus, you need to open a new connection. After opening TablePlus, click the \u201cCreate a new connection\u201d text at the bottom of the window that appears."),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Alternatively, you can navigate through Connection \u2192 New... in the menu at the top of the display."))),(0,l.kt)("p",null,"Choose MySQL from the database options that appear. You\u2019ll be prompted for:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Name (Comm)"),(0,l.kt)("li",{parentName:"ul"},"Host (localhost)"),(0,l.kt)("li",{parentName:"ul"},"Port (3306 by default)"),(0,l.kt)("li",{parentName:"ul"},"User (comm)"),(0,l.kt)("li",{parentName:"ul"},"Password (the one you made when initializing the MySQL server in the previous step)")),(0,l.kt)("h2",{id:"android-emulator"},"Android Emulator"),(0,l.kt)("p",null,"In order to test the Android app on your computer you\u2019ll need to set up an Android Emulator. To do this we\u2019ll need to open up the AVD Manager in Android Studio. AVD stands for \u201cAndroid Virtual Device\u201d. You can access the AVD Manager from the \u201cWelcome to Android Studio\u201d screen that pops up when you first open the application, under \u201cConfigure\u201d. If you already have a project open, you can access it from Tools \u2192 AVD Manager."),(0,l.kt)("p",null,"With the AVD Manager open, select \u201cCreate Virtual Device\u201d on the bottom row. Feel free to select any \u201cdevice definition\u201d that includes Play Store support."),(0,l.kt)("p",null,"On the next screen you\u2019ll be asked to select a system image. Go for the latest version of Android that\u2019s been released."),(0,l.kt)("p",null,"From there you can just hit Next and then Finish. You should then be able to start your new AVD from the AVD Manager."),(0,l.kt)("h2",{id:"git-repo"},"Git repo"),(0,l.kt)("h3",{id:"clone-from-github"},"Clone from GitHub"),(0,l.kt)("p",null,"Finally! It\u2019s time to clone the repo from GitHub."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"git clone git@github.com:CommE2E/comm.git\n")),(0,l.kt)("p",null,"Once you have the repo cloned, you can run this command to pull in dependencies."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cd comm\nyarn cleaninstall\n")),(0,l.kt)("h2",{id:"urls"},"URLs"),(0,l.kt)("p",null,"The server needs to know some info about paths in order to properly construct URLs."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir -p server/facts\nvim server/facts/url.json\n")),(0,l.kt)("p",null,"Your ",(0,l.kt)("inlineCode",{parentName:"p"},"url.json")," file should look like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "baseRoutePath": "/"\n}\n')),(0,l.kt)("p",null,"Next, we\u2019ll create a file for constructing URLs for the main app."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"vim server/facts/app_url.json\n")),(0,l.kt)("p",null,"Your ",(0,l.kt)("inlineCode",{parentName:"p"},"app_url.json")," file should look like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "baseDomain": "http://localhost",\n  "basePath": "/comm/",\n  "https": false\n}\n')),(0,l.kt)("p",null,"Finally, we\u2019ll create a file for the URLs in the landing page."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"vim server/facts/landing_url.json\n")),(0,l.kt)("p",null,"Your ",(0,l.kt)("inlineCode",{parentName:"p"},"landing_url.json")," file should look like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "baseDomain": "http://localhost",\n  "basePath": "/commlanding/",\n  "baseRoutePath": "/commlanding/",\n  "https": false\n}\n')),(0,l.kt)("h2",{id:"mysql-1"},"MySQL"),(0,l.kt)("p",null,"The server side needs to see some config files before things can work. The first is a config file with MySQL details."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cd server\nmkdir secrets\nvim secrets/db_config.json\n")),(0,l.kt)("p",null,"The DB config file should look like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "host": "localhost",\n  "user": "comm",\n  "password": "password",\n  "database": "comm"\n}\n')),(0,l.kt)("p",null,"Make sure to replace the password with the one you set up for your ",(0,l.kt)("inlineCode",{parentName:"p"},"comm")," MySQL user earlier."),(0,l.kt)("p",null,"New let\u2019s run a script to setup the database. Before we can run the script, we\u2019ll have to use Babel to transpile our source files into something Node can interpret. Babel will transpile the files in ",(0,l.kt)("inlineCode",{parentName:"p"},"src")," into a new directory called ",(0,l.kt)("inlineCode",{parentName:"p"},"dist"),". We also use ",(0,l.kt)("inlineCode",{parentName:"p"},"rsync")," to copy over files that don\u2019t need transpilation."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"yarn babel-build\nyarn rsync\nyarn script dist/scripts/create-db.js\n")),(0,l.kt)("h2",{id:"olm"},"Olm"),(0,l.kt)("p",null,"The second config file contains some details that the keyserver needs in order to launch Olm sessions to provide E2E encryption."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cd server\nvim secrets/olm_config.json\n")),(0,l.kt)("p",null,"The Olm config file should look like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "privateKey": "privateKey"\n}\n')),(0,l.kt)("h2",{id:"phabricator"},"Phabricator"),(0,l.kt)("p",null,"The last configuration step is to set up an account on Phabricator, where we handle code review. Start by ",(0,l.kt)("a",{parentName:"p",href:"https://phabricator.ashoat.com"},"logging in to Phabricator")," using your GitHub account."),(0,l.kt)("p",null,"Next, make sure you\u2019re inside the directory containing the Comm Git repository, and run the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"arc install-certificate\n")),(0,l.kt)("p",null,"This command will help you connect your Phabricator account with the local Arcanist instance, allowing you to run ",(0,l.kt)("inlineCode",{parentName:"p"},"arc diff")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"arc land")," commands."))}d.isMDXComponent=!0}}]);