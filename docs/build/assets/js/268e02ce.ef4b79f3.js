"use strict";(self.webpackChunkcomm_docs=self.webpackChunkcomm_docs||[]).push([[411],{8215:function(e,n,t){var a=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:o},n)}},6396:function(e,n,t){t.d(n,{Z:function(){return c}});var a=t(7462),o=t(7294),i=t(2389),l=t(9443);var r=function(){var e=(0,o.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=t(9521),d=t(6010),u="tabItem_vU9c";function p(e){var n,t,a,i=e.lazy,l=e.block,p=e.defaultValue,c=e.values,m=e.groupId,h=e.className,v=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=c?c:v.map((function(e){var n=e.props;return{value:n.value,label:n.label}})),g=(0,s.lx)(k,(function(e,n){return e.value===n.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===p?p:null!=(n=null!=p?p:null==(t=v.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(a=v[0])?void 0:a.props.value;if(null!==f&&!k.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=r(),y=b.tabGroupChoices,w=b.setTabGroupChoices,N=(0,o.useState)(f),C=N[0],T=N[1],I=[],x=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var S=y[m];null!=S&&S!==C&&k.some((function(e){return e.value===S}))&&T(S)}var P=function(e){var n=e.currentTarget,t=I.indexOf(n),a=k[t].value;a!==C&&(x(n),T(a),null!=m&&w(m,a))},R=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=I.indexOf(e.currentTarget)+1;t=I[a]||I[0];break;case"ArrowLeft":var o=I.indexOf(e.currentTarget)-1;t=I[o]||I[I.length-1]}null==(n=t)||n.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,d.Z)("tabs",{"tabs--block":l},h)},k.map((function(e){var n=e.value,t=e.label;return o.createElement("li",{role:"tab",tabIndex:C===n?0:-1,"aria-selected":C===n,className:(0,d.Z)("tabs__item",u,{"tabs__item--active":C===n}),key:n,ref:function(e){return I.push(e)},onKeyDown:R,onFocus:P,onClick:P},null!=t?t:n)}))),i?(0,o.cloneElement)(v.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},v.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==C})}))))}function c(e){var n=(0,i.Z)();return o.createElement(p,(0,a.Z)({key:String(n)},e))}},6440:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return d},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return c},default:function(){return h}});var a=t(7462),o=t(3366),i=(t(7294),t(3905)),l=t(6396),r=t(8215),s=["components"],d={sidebar_position:1},u="Development",p={unversionedId:"dev_environment_mac/development/development",id:"dev_environment_mac/development/development",isDocsHomePage:!1,title:"Development",description:"Flow typechecker",source:"@site/docs/dev_environment_mac/development/development.mdx",sourceDirName:"dev_environment_mac/development",slug:"/dev_environment_mac/development/development",permalink:"/dev_environment_mac/development/development",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/dev_environment_mac/configuration"},next:{title:"Debugging",permalink:"/dev_environment_mac/development/debugging"}},c=[{value:"Flow typechecker",id:"flow-typechecker",children:[],level:2},{value:"Running web app",id:"running-web-app",children:[],level:2},{value:"Running landing page",id:"running-landing-page",children:[],level:2},{value:"Running server",id:"running-server",children:[],level:2},{value:"Running mobile app on iOS Simulator",id:"running-mobile-app-on-ios-simulator",children:[],level:2},{value:"Running mobile app on Android Emulator",id:"running-mobile-app-on-android-emulator",children:[],level:2},{value:"Running mobile app on physical iOS devices",id:"running-mobile-app-on-physical-ios-devices",children:[{value:"Xcode settings",id:"xcode-settings",children:[],level:3},{value:"Building and deploying the app",id:"building-and-deploying-the-app",children:[],level:3},{value:"Connecting to local server",id:"connecting-to-local-server",children:[],level:3}],level:2},{value:"Running Node scripts",id:"running-node-scripts",children:[],level:2},{value:"Codegen",id:"codegen",children:[{value:"Codegen for JSI",id:"codegen-for-jsi",children:[],level:3}],level:2}],m={toc:c};function h(e){var n=e.components,t=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"development"},"Development"),(0,i.kt)("h2",{id:"flow-typechecker"},"Flow typechecker"),(0,i.kt)("p",null,"It\u2019s good to run the ",(0,i.kt)("inlineCode",{parentName:"p"},"flow")," typechecker frequently to make sure you\u2019re not introducing any type errors. Flow treats each Yarn Workspace as a separate environment, and as such runs a separate type-checking server for each. This server is started when you first run ",(0,i.kt)("inlineCode",{parentName:"p"},"node_modules/.bin/flow")," in each of the four Yarn Workspace folders."),(0,i.kt)("p",null,"To make sure Flow runs from the command-line, you can edit your ",(0,i.kt)("inlineCode",{parentName:"p"},"$PATH")," environmental variable in your ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bash_profile")," file (or desired shell configuration file) to always include ",(0,i.kt)("inlineCode",{parentName:"p"},"./node_modules/.bin"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"export PATH=$PATH:./node_modules/.bin\n")),(0,i.kt)("p",null,"As always, make sure you reload the ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bash_profile")," after editing it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"source ~/.bash_profile\n")),(0,i.kt)("p",null,"You should now be able to run ",(0,i.kt)("inlineCode",{parentName:"p"},"flow")," in any of the Yarn workspaces:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cd lib\nflow\n")),(0,i.kt)("h2",{id:"running-web-app"},"Running web app"),(0,i.kt)("p",null,"Open a new terminal and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cd web\nyarn dev\n")),(0,i.kt)("p",null,"This will start two processes. One is ",(0,i.kt)("inlineCode",{parentName:"p"},"webpack-dev-server"),", which will serve the JS files. ",(0,i.kt)("inlineCode",{parentName:"p"},"webpack-dev-server")," also makes sure the website automatically hot-reloads whenever any of the source files change. The other process is ",(0,i.kt)("inlineCode",{parentName:"p"},"webpack --watch"),", which will build the ",(0,i.kt)("inlineCode",{parentName:"p"},"app.build.cjs")," file, as well as rebuilding it whenever any of the source files change. The ",(0,i.kt)("inlineCode",{parentName:"p"},"app.build.cjs")," file is consumed by the Node server in order to pre-render the initial HTML from the web source (\u201cServer-Side Rendering\u201d)."),(0,i.kt)("h2",{id:"running-landing-page"},"Running landing page"),(0,i.kt)("p",null,"Open a new terminal and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cd landing\nyarn dev\n")),(0,i.kt)("p",null,"This runs the same two processes as the web app, but for the landing page."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"  The ",(0,i.kt)("inlineCode",{parentName:"p"},"landing.build.cjs")," file (similar to the web app\u2019s ",(0,i.kt)("inlineCode",{parentName:"p"},"app.build.cjs")," file) is consumed by the Node server."))),(0,i.kt)("h2",{id:"running-server"},"Running server"),(0,i.kt)("p",null,"Open a new terminal and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cd server\nyarn dev\n")),(0,i.kt)("p",null,"You should now be able to load the web app in your web browser at ",(0,i.kt)("a",{parentName:"p",href:"http://localhost/comm/"},"http://localhost/comm/"),", and the landing page at ",(0,i.kt)("a",{parentName:"p",href:"http://localhost/commlanding/"},"http://localhost/commlanding/"),"."),(0,i.kt)("p",null,"This command runs three processes. The first two are to keep the ",(0,i.kt)("inlineCode",{parentName:"p"},"dist")," folder updated whenever the ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," folder changes. They are \u201cwatch\u201d versions of the same Babel and ",(0,i.kt)("inlineCode",{parentName:"p"},"rsync")," commands we used to initially create the ",(0,i.kt)("inlineCode",{parentName:"p"},"dist")," folder (before running the ",(0,i.kt)("inlineCode",{parentName:"p"},"create-db.js")," script above). The final process is ",(0,i.kt)("inlineCode",{parentName:"p"},"nodemon"),", which is similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"node")," except that it restarts whenever any of its source files (in the ",(0,i.kt)("inlineCode",{parentName:"p"},"dist")," directory) changes."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"  If you run ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn dev")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"server")," right after ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn cleaninstall"),", before Webpack is given a chance to build ",(0,i.kt)("inlineCode",{parentName:"p"},"app.build.cjs"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"landing.build.cjs")," files, then Node will crash when it attempts to import those files. Just make sure to run ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn dev")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn prod"),") in ",(0,i.kt)("inlineCode",{parentName:"p"},"web")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"landing")," before attempting to load the corresponding webpages."))),(0,i.kt)("h2",{id:"running-mobile-app-on-ios-simulator"},"Running mobile app on iOS Simulator"),(0,i.kt)("p",null,"First, make sure that the Metro bundler is running. If you haven\u2019t already, open a new terminal and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cd native\nyarn dev\n")),(0,i.kt)("p",null,"This command runs two processes. The first is the Metro bundler, which handles bundling our app\u2019s JavaScript code and communicating with the debug build of the app running on either a physical or virtual device. The second is the ",(0,i.kt)("inlineCode",{parentName:"p"},"remotedev-server")," for Redux, which is a proxy of sorts through which the Redux monitor (running in the Chrome extension) can communicate with the debug build of the app."),(0,i.kt)("p",null,"Next, open ",(0,i.kt)("inlineCode",{parentName:"p"},"native/ios/Comm.xcworkspace")," in Xcode. Select a Simulator from the Scheme menu in the Workspace Toolbar. Then hit the Run button to build and run the project."),(0,i.kt)("h2",{id:"running-mobile-app-on-android-emulator"},"Running mobile app on Android Emulator"),(0,i.kt)("p",null,"First, make sure that the Metro bundler is running. If you haven\u2019t already, open a new terminal and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cd native\nyarn dev\n")),(0,i.kt)("p",null,"This command runs two processes (see previous section for details)."),(0,i.kt)("p",null,"Next, boot up an Android Emulator using Android Studio\u2019s AVD Manager. You should have a single Android Emulator (or plugged-in device) running at one time."),(0,i.kt)("p",null,"Finally, use this command to build and run the Android app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cd native\nyarn react-native run-android\n")),(0,i.kt)("h2",{id:"running-mobile-app-on-physical-ios-devices"},"Running mobile app on physical iOS devices"),(0,i.kt)("p",null,"There are a few things you\u2019ll need to do before you can deploy the app to a physical iOS device."),(0,i.kt)("h3",{id:"xcode-settings"},"Xcode settings"),(0,i.kt)("p",null,"First, in Xcode, open the Comm workspace ",(0,i.kt)("inlineCode",{parentName:"p"},"native/ios/Comm.xcworkspace"),". Make sure that you\u2019re signed into Xcode with an Apple Developer account (either the Comm developer team\u2019s or your own). You can see any accounts currently associated with Xcode by navigating to Xcode \u2192 Preferences \u2192 Accounts."),(0,i.kt)("p",null,"Next, you\u2019ll want to ensure that the Comm project is configured with a valid Team, Bundle Identifier, and Provisioning Profile. To access these settings, navigate to View \u2192 Navigators \u2192 Project, and select the \u201cComm\u201d project in the left sidebar. Then, select \u201cComm\u201d from the \u201cTARGETS\u201d list, and navigate to the \u201cSigning & Capabilities\u201d tab. You should verify the following settings:"),(0,i.kt)(l.Z,{groupId:"account-type",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"comm-dev",label:"Using a Comm development team Apple Developer account",mdxType:"TabItem"},(0,i.kt)("ul",null,(0,i.kt)("li",null," Team "),(0,i.kt)("ul",null,(0,i.kt)("li",null," Comm Technologies, Inc. ")),(0,i.kt)("li",null," Bundle Identifier "),(0,i.kt)("ul",null,(0,i.kt)("li",null," app.comm ")),(0,i.kt)("li",null," Provisioning Profile "),(0,i.kt)("ul",null,(0,i.kt)("li",null," Make sure that the Provisioning Profile exists ")))),(0,i.kt)(r.Z,{value:"personal",label:"Using a Personal Apple Developer account",mdxType:"TabItem"},(0,i.kt)("ul",null,(0,i.kt)("li",null," Team "),(0,i.kt)("ul",null,(0,i.kt)("li",null," Set this to a valid \u201cTeam\u201d, which can just be your personal Apple Developer account. \u201cComm Technologies, Inc.\u201d may be chosen by default, but it\u2019s not valid if you\u2019re using a personal Apple Developer account ")),(0,i.kt)("li",null," Bundle Identifier "),(0,i.kt)("ul",null,(0,i.kt)("li",null," Pick a unique",(0,i.kt)("a",{href:"https://developer.apple.com/documentation/xcode/preparing-your-app-for-distribution"}," Bundle Identifier"))),(0,i.kt)("li",null," Provisioning Profile "),(0,i.kt)("ul",null,(0,i.kt)("li",null," Make sure that the Provisioning Profile exists "))))),(0,i.kt)("h3",{id:"building-and-deploying-the-app"},"Building and deploying the app"),(0,i.kt)("p",null,"When you plug your iOS device into your machine for the first time, you\u2019ll be prompted to enter your device passcode to enable debugging and deployment. Click the \u201dRegister\u201d button in the dialog that Xcode displays if your device needs to be added to your Provisioning Profile."),(0,i.kt)("p",null,"Make sure to pull the latest changes and clean the build folder before trying to deploy a build to your device. In Xcode, run Product \u2192 Clean Build Folder."),(0,i.kt)("p",null,"If you\u2019re running a debug build, you\u2019ll need to check that the Metro bundler is running. If you haven\u2019t already, open a new terminal and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cd native\nyarn dev\n")),(0,i.kt)("p",null,"This command runs the Metro bundler and ",(0,i.kt)("inlineCode",{parentName:"p"},"remotedev-server")," for Redux (see the \u201cRunning mobile app on iOS simulator\u201d section for more details)."),(0,i.kt)("p",null,"You should finally be ready to build and deploy the app in Xcode! Select your physical device from \u201drun destinations\u201d in the Workspace Toolbar. Then hit the Run button to build and run the project."),(0,i.kt)("p",null,"If you\u2019re connecting to a local server instance, you\u2019ll want to \u201cAllow Comm to Access\u201d the \u201cLocal Network\u201d in your device Settings. This toggle can be found from Settings \u2192 Comm. Note that this setting is not enabled by default, and you may have to re-enable it on subsequent build deployments."),(0,i.kt)("h3",{id:"connecting-to-local-server"},"Connecting to local server"),(0,i.kt)("p",null,"If you want your custom build of the app to connect to your local instance of the Node.js server (the ",(0,i.kt)("inlineCode",{parentName:"p"},"server")," subdirectory of the repo), you\u2019ll need to do some additional work. First, confirm that your computer and physical iOS device are on the same network. If you\u2019re running a local server instance, you\u2019ll need to be able to reach it with your device. Local servers run on the local IP address at port 8043."),(0,i.kt)("p",null,"To find your machine\u2019s local IP address, navigate to System Preferences \u2192 Network, and select the hardware interface you\u2019re currently using to connect to the internet (Wi-Fi, or potentially a Thunderbolt port for ethernet connections). Next, click \u201cAdvanced\u201d and go to the \u201cTCP/IP\u201d tab. Your local IP address is listed as the \u201cIPv4 Address\u201d. Try visiting this IP address using a browser on your device. It should display an \u201cIt works!\u201d message if your iOS device can reach your machine."),(0,i.kt)("p",null,"Finally, we need to direct the mobile app to use your local server instance. There are a few different ways to do this, depending on your situation:"),(0,i.kt)(l.Z,{groupId:"deployment-type",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"debug",label:"Deploying a debug build",mdxType:"TabItem"},"Create a `network.json` file in `native/facts` that will override the default.",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir -p native/facts\nvim native/facts/network.json\n")),(0,i.kt)("p",null,"Your ",(0,i.kt)("inlineCode",{parentName:"p"},"network.json")," file should look like the following, where ",(0,i.kt)("inlineCode",{parentName:"p"},"w.x.y.z")," is the local IP address you found earlier:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "natDevHostname": "w.x.y.z"\n}\n')),(0,i.kt)("p",null,"You\u2019ll need to delete and reinstall the app for changes to ",(0,i.kt)("inlineCode",{parentName:"p"},"native/facts/network.json")," to take effect, as the default production URL is persisted in Redux.")),(0,i.kt)(r.Z,{value:"release",label:"Deploying a release build",mdxType:"TabItem"},(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If you\u2019re deploying a release build, your best bet to override the server URL is to get to the secret \u201cDeveloper tools\u201d menu option in the app."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You may need to use a real production account for this, since the server address will default to the production server if this is the first build you've deployed to the target device.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Next, in order for the \u201cDeveloper tools\u201d menu option to appear, you\u2019ll need to add your user ID to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CommE2E/comm/blob/master/lib/facts/staff.json"},"the list of user IDs in ",(0,i.kt)("inlineCode",{parentName:"a"},"staff.json")),". A good way to figure out your user ID is to use the Chrome Redux debugger to inspect the ",(0,i.kt)("inlineCode",{parentName:"p"},"currentUserInfo")," property when logged into the web app.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Finally, you should be able to navigate to Profile \u2192 Developer tools in the app and set the address of the local server. It should look something like the following, where ",(0,i.kt)("inlineCode",{parentName:"p"},"w.x.y.z")," is the local IP address you found earlier."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"http://w.x.y.z/comm\n")))))))),(0,i.kt)("h2",{id:"running-node-scripts"},"Running Node scripts"),(0,i.kt)("p",null,"To run one of the scripts in ",(0,i.kt)("inlineCode",{parentName:"p"},"server/src/scripts"),", you should start by making sure that the Node server is running. If you haven\u2019t already, open a new terminal and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cd native\nyarn dev\n")),(0,i.kt)("p",null,"Then, from the ",(0,i.kt)("inlineCode",{parentName:"p"},"server")," directory, run ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn script dist/scripts/name.js"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"name.js")," is the file containing the script."),(0,i.kt)("h2",{id:"codegen"},"Codegen"),(0,i.kt)("p",null,"We use a couple of tools that automatically generate code."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"  There is always a source of truth \u2013 usually some file(s) with schemas."))),(0,i.kt)("h3",{id:"codegen-for-jsi"},"Codegen for JSI"),(0,i.kt)("p",null,"JSI is a framework in React Native that allows C++ and JS to communicate synchronously and directly. The codegen for JSI takes a Flow schema and generates C++ files that enable communication between JS and C++ in ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native")," apps."),(0,i.kt)("p",null,"The script to generate this code is written in JavaScript and is included as a npm package so no additional software is needed to use it. The schema has to be defined in Flow as an interface, and that interface must inherit from react-native\u2019s ",(0,i.kt)("inlineCode",{parentName:"p"},"TurboModule")," interface."),(0,i.kt)("p",null,"To run the JSI codegen, just run ",(0,i.kt)("inlineCode",{parentName:"p"},"cd native && yarn codegen-jsi"),". The input Flow schemas are located in ",(0,i.kt)("inlineCode",{parentName:"p"},"native/schema"),"."))}h.isMDXComponent=!0}}]);