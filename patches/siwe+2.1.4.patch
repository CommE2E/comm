diff --git a/node_modules/siwe/dist/utils.js b/node_modules/siwe/dist/utils.js
index 6f6e67b..c57fb16 100644
--- a/node_modules/siwe/dist/utils.js
+++ b/node_modules/siwe/dist/utils.js
@@ -15,7 +15,7 @@ const ethers_1 = require("ethers");
 const ethersCompat_1 = require("./ethersCompat");
 const EIP1271_ABI = ["function isValidSignature(bytes32 _message, bytes _signature) public view returns (bytes4)"];
 const EIP1271_MAGICVALUE = "0x1626ba7e";
-const ISO8601 = /^(?<date>[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(.[0-9]+)?(([Zz])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;
+const ISO8601 = /^([0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(.[0-9]+)?(([Zz])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;
 /**
  * This method calls the EIP-1271 method for Smart Contract wallets
  * @param message The EIP-4361 parsed message
@@ -62,15 +62,15 @@ const isValidISO8601Date = (inputDate) => {
     /* Split groups and make sure inputDate is in ISO8601 format */
     const inputMatch = ISO8601.exec(inputDate);
     /* if inputMatch is null the date is not ISO-8601 */
-    if (!inputDate) {
+    if (!inputMatch) {
         return false;
     }
     /* Creates a date object with input date to parse for invalid days e.g. Feb, 30 -> Mar, 01 */
-    const inputDateParsed = new Date(inputMatch.groups.date).toISOString();
+    const inputDateParsed = new Date(inputMatch[1]).toISOString();
     /* Get groups from new parsed date to compare with the original input */
     const parsedInputMatch = ISO8601.exec(inputDateParsed);
     /* Compare remaining fields */
-    return inputMatch.groups.date === parsedInputMatch.groups.date;
+    return inputMatch[1] === parsedInputMatch[1];
 };
 exports.isValidISO8601Date = isValidISO8601Date;
 const checkInvalidKeys = (obj, keys) => {
