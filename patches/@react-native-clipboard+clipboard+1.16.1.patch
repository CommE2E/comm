diff --git a/node_modules/@react-native-clipboard/clipboard/RNCClipboard.podspec b/node_modules/@react-native-clipboard/clipboard/RNCClipboard.podspec
index 2e47ccf..506a669 100644
--- a/node_modules/@react-native-clipboard/clipboard/RNCClipboard.podspec
+++ b/node_modules/@react-native-clipboard/clipboard/RNCClipboard.podspec
@@ -33,5 +33,6 @@ Pod::Spec.new do |s|
     s.platforms = { :ios => "9.0", :tvos => "9.0", :osx => "10.14", :visionos => "1.0" }
 
     s.dependency "React-Core"
+    s.dependency "SDWebImage", '~> 5.8'
   end
 end
diff --git a/node_modules/@react-native-clipboard/clipboard/dist/Clipboard.js b/node_modules/@react-native-clipboard/clipboard/dist/Clipboard.js
index ccdf309..6315195 100644
--- a/node_modules/@react-native-clipboard/clipboard/dist/Clipboard.js
+++ b/node_modules/@react-native-clipboard/clipboard/dist/Clipboard.js
@@ -115,6 +115,83 @@ exports.Clipboard = {
     setString(content) {
         NativeClipboardModule_1.default.setString(content);
     },
+    +    /**
+    * (IOS Only)
+    * Set clipboard image from Base64 image representation.
+    * You can use following code to set clipboard content
+    * ```javascript
+    * _setContent() {
+    *   Clipboard.setImageFromBase64('data:image/png;base64,....');
+    * }
+    * ```
+    * @param image the image to be stored in the clipboard.
+    */
+   setImageFromBase64: function (image) {
+       NativeClipboard_1.default.setImageFromBase64(image);
+   },
+   /**
+    * (IOS Only)
+    * Set clipboard image from URL.
+    * @param image the image to be stored in the clipboard.
+    * @param callback fn to handle success boolean
+    */
+   setImageFromURL: function (url, callback) {
+       NativeClipboard_1.default.setImageFromURL(url, callback);
+   },
+   /**
+    * (IOS Only)
+    * Get PNG image from clipboard in Base64.
+    * This method returns a `Promise`, so you can use following code to get clipboard content:
+    * ```javascript
+    * async _getContent() {
+    *   var content = await Clipboard.getPNGImageData();
+    * }
+    * ```
+    */
+   getPNGImageData: function () {
+       return NativeClipboard_1.default.getPNGImageData();
+   },
+   /**
+    * (IOS Only)
+    * Get JPG image from clipboard in Base64.
+    * This method returns a `Promise`, so you can use following code to get clipboard content:
+    * ```javascript
+    * async _getContent() {
+    *   var content = await Clipboard.getJPGImageData();
+    * }
+    * ```
+    */
+   getJPGImageData: function () {
+       return NativeClipboard_1.default.getJPGImageData();
+   },
+   /**
+    * (IOS Only)
+    * Get clipboard image data of unknown type.
+    * The image format can't be determined by MIME-type, but can be found via magic numbers.
+    * This method returns a `Promise`, so you can use following code to get clipboard content:
+    * ```javascript
+    * async _getContent() {
+    *   var content = await Clipboard.getImageData();
+    * }
+    * ```
+    */
+   getImageData: function () {
+       return NativeClipboard_1.default.getImageData();
+   },
+   /**
+    * (IOS Only)
+    * Get filepath (in tmp directory) of clipboard image.
+    * The image format can't be determined by MIME-type or extension, but can via magic numbers.
+    * This method returns a `Promise`, so you can use following code to get clipboard content:
+    * ```javascript
+    * async _getContent() {
+    *   var content = await Clipboard.getImageFilePath();
+    * }
+    * ```
+    */
+   getImageFilePath: function () {
+       return NativeClipboard_1.default.getImageFilePath();
+   },
     /**
      * Set content of string array type. You can use following code to set clipboard content
      * ```javascript
diff --git a/node_modules/@react-native-clipboard/clipboard/ios/RNCClipboard.mm b/node_modules/@react-native-clipboard/clipboard/ios/RNCClipboard.mm
index 3ee5caa..ab879a6 100644
--- a/node_modules/@react-native-clipboard/clipboard/ios/RNCClipboard.mm
+++ b/node_modules/@react-native-clipboard/clipboard/ios/RNCClipboard.mm
@@ -5,6 +5,8 @@
 #import <UIKit/UIKit.h>
 #import <React/RCTBridge.h>
 #import <React/RCTEventDispatcher.h>
+#import <MobileCoreServices/MobileCoreServices.h>
+#import <SDWebImage/SDWebImageManager.h>
 
 
 @implementation RNCClipboard {
@@ -51,6 +53,101 @@ - (void) listener:(NSNotification *) notification
     }
 }
 
+RCT_EXPORT_METHOD(setImageFromBase64:(NSString *)image)
+{
+  NSString *strippedBase64 = [image copy];
+  NSString *pngPrefix = @"data:image/png;base64,";
+  NSString *jpgPrefix = @"data:image/jpeg;base64";
+  
+  if ([image hasPrefix: pngPrefix]) {
+    NSInteger offset = [pngPrefix length];
+    strippedBase64 = [image substringFromIndex: offset];
+  } else if ([image hasPrefix: jpgPrefix]) {
+    NSInteger offset = [jpgPrefix length];
+    strippedBase64 = [image substringFromIndex: offset];
+  }
+  
+  NSData *imageData = [[NSData alloc]initWithBase64EncodedString: strippedBase64 options: NSDataBase64DecodingIgnoreUnknownCharacters];
+  UIImage *uiImage = [UIImage imageWithData: imageData];
+  UIPasteboard *clipboard = [UIPasteboard generalPasteboard];
+  clipboard.image = (uiImage ?: NULL);
+}
+
+
+RCT_EXPORT_METHOD(setImageFromURL: (NSString *)url
+                  success:(RCTResponseSenderBlock)success)
+{
+  [SDWebImageManager.sharedManager loadImageWithURL:[NSURL URLWithString: url] options:0 progress:NULL completed:^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, SDImageCacheType cacheType, BOOL finished, NSURL * _Nullable imageURL) {
+    
+    if (error || !finished) {
+      success(@[@NO]);
+      return;
+    }
+    
+    UIPasteboard *clipboard = [UIPasteboard generalPasteboard];
+    clipboard.image = image;
+    success(@[@YES]);
+  }];
+}
+
+RCT_EXPORT_METHOD(getPNGImageData : (RCTPromiseResolveBlock)resolve reject : (__unused RCTPromiseRejectBlock)reject)
+{
+  NSString *pngPrefix = @"data:image/png;base64,";
+  UIPasteboard *clipboard = [UIPasteboard generalPasteboard];
+  UIImage *pastedImage = clipboard.image;
+  
+  if (!pastedImage) {
+    resolve(NULL);
+    return;
+  }
+  
+  NSString *imageDataBase64 = [UIImagePNGRepresentation(pastedImage) base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];
+  NSString* withPrefix = [pngPrefix stringByAppendingString:imageDataBase64];
+  resolve((withPrefix ?: NULL));
+}
+
+RCT_EXPORT_METHOD(getJPGImageData : (RCTPromiseResolveBlock)resolve reject : (__unused RCTPromiseRejectBlock)reject)
+{
+  NSString *jpgPrefix = @"data:image/jpeg;base64,";
+  UIPasteboard *clipboard = [UIPasteboard generalPasteboard];
+  UIImage *pastedImage = clipboard.image;
+  
+  if (!pastedImage) {
+    resolve(NULL);
+    return;
+  }
+  
+  NSString *imageDataBase64 = [UIImageJPEGRepresentation(pastedImage, 1.0) base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];
+  NSString* withPrefix = [jpgPrefix stringByAppendingString:imageDataBase64];
+  resolve((withPrefix ?: NULL));
+}
+
+RCT_EXPORT_METHOD(getImageData: (RCTPromiseResolveBlock)resolve reject : (__unused RCTPromiseRejectBlock)reject)
+{
+  NSData *pastedImageData = [[UIPasteboard generalPasteboard] dataForPasteboardType:(NSString*)kUTTypeImage];
+  NSString *base64 = [pastedImageData base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];
+  resolve((base64 ?: NULL));
+}
+
+RCT_EXPORT_METHOD(getImageFilePath : (RCTPromiseResolveBlock)resolve reject : (__unused RCTPromiseRejectBlock)reject)
+{
+  NSFileManager *fileManager = [NSFileManager defaultManager];
+  NSData *pastedImageData = [[UIPasteboard generalPasteboard] dataForPasteboardType:(NSString*)kUTTypeImage];
+  
+  if (!pastedImageData) {
+    resolve(NULL);
+    return;
+  }
+
+  NSString *fileName = [@([pastedImageData hash]) stringValue];
+  NSString *dest = [NSTemporaryDirectory() stringByAppendingPathComponent:fileName];
+  if ([fileManager fileExistsAtPath:dest]){
+    [pastedImageData writeToFile:dest atomically:true];
+  }
+  resolve((dest ?: NULL));
+}
+
+
 RCT_EXPORT_METHOD(setListener)
 {
     [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(listener:) name:UIPasteboardChangedNotification object:nil];
