syntax = "proto3";

package identity.unauth;

// RPCs from a client (iOS, Android, or web) to identity service
service IdentityClientService {

  /* Account actions */

  // Called by user to register with the Identity Service (PAKE only)
  // Due to limitations of grpc-web, the Opaque challenge+response
  // needs to be split up over two unary requests
  // Start/Finish is used here to align with opaque protocol
  rpc RegisterPasswordUserStart(RegistrationStartRequest) returns (
    RegistrationStartResponse) {}
  rpc RegisterReservedPasswordUserStart(ReservedRegistrationStartRequest)
    returns (RegistrationStartResponse) {}
  rpc RegisterPasswordUserFinish(RegistrationFinishRequest) returns (
    AuthResponse) {}
  // Called by user to register device and get an access token
  rpc LogInPasswordUserStart(OpaqueLoginStartRequest) returns
    (OpaqueLoginStartResponse) {}
  rpc LogInPasswordUserFinish(OpaqueLoginFinishRequest) returns
    (AuthResponse) {}

  rpc LogInWalletUser(WalletAuthRequest) returns (AuthResponse) {}
  rpc RegisterWalletUser(WalletAuthRequest) returns (AuthResponse) {}
  rpc RegisterReservedWalletUser(ReservedWalletRegistrationRequest) returns
    (AuthResponse) {}

  rpc UploadKeysForRegisteredDeviceAndLogIn(SecondaryDeviceKeysUploadRequest)
    returns (AuthResponse) {}
  rpc LogInExistingDevice(ExistingDeviceLoginRequest) returns (AuthResponse) {}

  /* Service actions */

  // Called by other services to verify a user's access token
  rpc VerifyUserAccessToken(VerifyUserAccessTokenRequest) returns
    (VerifyUserAccessTokenResponse) {}

  /* Ashoat's keyserver actions */

  // Called by Ashoat's keyserver to add usernames to the Identity service's
  // reserved list
  rpc AddReservedUsernames(AddReservedUsernamesRequest) returns (Empty) {}
  // Called by Ashoat's keyserver to remove usernames from the Identity
  // service's reserved list
  rpc RemoveReservedUsername(RemoveReservedUsernameRequest) returns (Empty) {}

  /* Miscellaneous actions */

  // Called by users periodically to check if their code version is supported
  rpc Ping(Empty) returns (Empty) {}

  // Returns userID for given username or wallet address
  rpc FindUserID(FindUserIDRequest) returns (FindUserIDResponse) {}

  // Called by clients to get a nonce for a Sign-In with Ethereum message
  // or RPCs requiring challenge-response actions
  rpc GenerateNonce(Empty) returns (GenerateNonceResponse) {}

}

// Helper types

message Empty {}

message Prekey {
  string prekey = 1;
  string prekey_signature = 2;
}

// Key information needed for starting a X3DH session
message IdentityKeyInfo {
  // JSON payload containing Olm keys
  // Sessions for users will contain both ContentKeys and NotifKeys
  // For keyservers, this will only contain ContentKeys
  string payload = 1;
  // Payload signed with the signing ed25519 key
  string payload_signature = 2;
  // Signed message used for SIWE
  // This correlates a given wallet with a device's content key
  optional string social_proof = 3;
}

// RegisterUser

// Ephemeral information provided so others can create initial message
// to this device
//
// Prekeys are generally rotated periodically
// One-time Prekeys are "consumed" after first use, so many need to
// be provide to avoid exhausting them.

enum DeviceType {
  KEYSERVER = 0;
  WEB = 1;
  // iOS doesn't leave a good option for title to camel case renaming
  IOS = 2;
  ANDROID = 3;
  WINDOWS = 4;
  MAC_OS = 5;
}

// Bundle of information needed for creating an initial message using X3DH
message DeviceKeyUpload {
  IdentityKeyInfo device_key_info = 1;
  Prekey content_upload = 2;
  Prekey notif_upload = 3;
  repeated string one_time_content_prekeys = 4;
  repeated string one_time_notif_prekeys = 5;
  DeviceType device_type = 6;
}

// Request for registering a new user
message RegistrationStartRequest {
  // Message sent to initiate PAKE registration (step 1)
  bytes opaque_registration_request = 1;
  string username = 2;
  // Information needed to open a new channel to current user's device
  DeviceKeyUpload device_key_upload = 3;
}

message ReservedRegistrationStartRequest {
  // Message sent to initiate PAKE registration (step 1)
  bytes opaque_registration_request = 1;
  string username = 2;
  // Information needed to open a new channel to current user's device
  DeviceKeyUpload device_key_upload = 3;
  // Message from Ashoat's keyserver attesting that a given user has ownership
  // of a given username
  string keyserver_message = 4;
  // Above message signed with Ashoat's keyserver's signing ed25519 key
  string keyserver_signature = 5;
}

// Messages sent from a client to Identity Service
message RegistrationFinishRequest {
  // Identifier to correlate RegisterStart session
  string session_id = 1;
  // Final message in PAKE registration
  bytes opaque_registration_upload = 2;
}

// Messages sent from Identity Service to client
message RegistrationStartResponse {
  // Identifier used to correlate start request with finish request
  string session_id = 1;
  // sent to the user upon reception of the PAKE registration attempt
  // (step 2)
  bytes opaque_registration_response = 2;
}

message AuthResponse {
  // Unique identifier for user
  string user_id = 1;
  string access_token = 2;
}

// LoginUser

message OpaqueLoginStartRequest {
  string username = 1;
  // Message sent to initiate PAKE login (step 1)
  bytes opaque_login_request = 2;
  // Information specific to a user's device needed to open a new channel of
  // communication with this user
  DeviceKeyUpload device_key_upload = 3;
  // If set to true, the user's existing keyserver will be deleted from the
  // identity service and replaced with this one. This field has no effect if
  // the device is not a keyserver
  optional bool force = 4;
}

message OpaqueLoginFinishRequest {
  // Identifier used to correlate start request with finish request
  string session_id = 1;
  // Message containing client's reponse to server challenge.
  // Used to verify that client holds password secret (Step 3)
  bytes opaque_login_upload = 2;
}

message OpaqueLoginStartResponse {
  // Identifier used to correlate start request with finish request
  string session_id = 1;
  // Opaque challenge sent from server to client attempting to login (Step 2)
  bytes opaque_login_response = 2;
}

message WalletAuthRequest {
  string siwe_message = 1;
  string siwe_signature = 2;
  // Information specific to a user's device needed to open a new channel of
  // communication with this user
  DeviceKeyUpload device_key_upload = 3;
}

message ReservedWalletRegistrationRequest {
  string siwe_message = 1;
  string siwe_signature = 2;
  // Information specific to a user's device needed to open a new channel of
  // communication with this user
  DeviceKeyUpload device_key_upload = 3;
  // Message from Ashoat's keyserver attesting that a given user has ownership
  // of a given wallet address
  string keyserver_message = 4;
  // Above message signed with Ashoat's keyserver's signing ed25519 key
  string keyserver_signature = 5;
}

// UploadKeysForRegisteredDeviceAndLogIn

message SecondaryDeviceKeysUploadRequest {
  string user_id = 1;
  string challenge_response = 2;
  // Information specific to a user's device needed to open a new channel of
  // communication with this user
  DeviceKeyUpload device_key_upload = 3;
}

// LogInExistingDevice

message ExistingDeviceLoginRequest {
  string user_id = 1;
  string device_id = 2;
  string challenge_response = 3;
}

// GenerateNonce

message GenerateNonceResponse{
  string nonce = 1;
}

// VerifyUserAccessToken

message VerifyUserAccessTokenRequest {
  string user_id = 1;
  // signing ed25519 key for the given user's device
  string device_id = 2;
  string access_token = 3;
}

message VerifyUserAccessTokenResponse {
  bool token_valid = 1;
}

// AddReservedUsernames

message AddReservedUsernamesRequest {
  // Message from Ashoat's keyserver containing the username to be added
  string message = 1;
  // Above message signed with Ashoat's keyserver's signing ed25519 key
  string signature = 2;
}

// RemoveReservedUsername

message RemoveReservedUsernameRequest {
  // Message from Ashoat's keyserver containing the username to be removed
  string message = 1;
  // Above message signed with Ashoat's keyserver's signing ed25519 key
  string signature = 2;
}

// FindUserID

message FindUserIDRequest {
  oneof identifier {
    string username = 1;
    string wallet_address = 2;
  }
}

message FindUserIDResponse {
  // userID if the user is registered with Identity Service, null otherwise
  optional string user_id = 1;
  // true if the identifier (username or wallet address) exists in the
  // reserved usernames list, false otherwise. It doesn't take into account
  // whether the user is registered with Identity Service (userID != null).
  bool is_reserved = 2;
}
