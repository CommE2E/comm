syntax = "proto3";

package identity.client;

// RPCs from a client (iOS, Android, or web) to identity service
service IdentityClientService {

  // Account actions

  // Called by user to register with the Identity Service (PAKE only)
  // Due to limitations of grpc-web, the Opaque challenge+response
  // needs to be split up over two unary requests
  // Start/Finish is used here to align with opaque protocol
  rpc RegisterPasswordUserStart(RegistrationStartRequest) returns (
    RegistrationStartResponse) {}
  rpc RegisterReservedPasswordUserStart(ReservedRegistrationStartRequest)
    returns (RegistrationStartResponse) {}
  rpc RegisterPasswordUserFinish(RegistrationFinishRequest) returns (
    RegistrationFinishResponse) {}
  // Called by user to register device and get an access token
  rpc LoginPasswordUserStart(OpaqueLoginStartRequest) returns
    (OpaqueLoginStartResponse) {}
  rpc LoginPasswordUserFinish(OpaqueLoginFinishRequest) returns
    (OpaqueLoginFinishResponse) {}
  rpc LoginWalletUser(WalletLoginRequest) returns (WalletLoginResponse) {}
  rpc LoginReservedWalletUser(ReservedWalletLoginRequest) returns
    (WalletLoginResponse) {}

  // Sign-In with Ethereum actions

  // Called by clients to get a nonce for a Sign-In with Ethereum message
  rpc GenerateNonce(Empty) returns (GenerateNonceResponse) {}

  // Service actions

  // Called by other services to verify a user's access token
  rpc VerifyUserAccessToken(VerifyUserAccessTokenRequest) returns
    (VerifyUserAccessTokenResponse) {}

  // Ashoat's keyserver actions

  // Called by Ashoat's keyserver to add usernames to the Identity service's
  // reserved list
  rpc AddReservedUsernames(AddReservedUsernamesRequest) returns (Empty) {}
  // Called by Ashoat's keyserver to remove usernames from the Identity
  // service's reserved list
  rpc RemoveReservedUsername(RemoveReservedUsernameRequest) returns (Empty) {}

  // Miscellaneous actions

  // Called by users periodically to check if their code version is supported
  rpc Ping(Empty) returns (Empty) {}
}

// Helper types

message Empty {}

message PreKey {
  string preKey = 1;
  string preKeySignature = 2;
}

// Key information needed for starting a X3DH session
message IdentityKeyInfo {
  // JSON payload containing Olm keys
  // Sessions for users will contain both ContentKeys and NotifKeys
  // For keyservers, this will only contain ContentKeys
  string payload = 1;
  // Payload signed with the signing ed25519 key
  string payloadSignature = 2;
  // Signed message used for SIWE
  // This correlates a given wallet with a device's content key
  optional string socialProof = 3;
}

// RegisterUser

// Ephemeral information provided so others can create initial message
// to this device
//
// Prekeys are generally rotated periodically
// One-time Prekeys are "consumed" after first use, so many need to
// be provide to avoid exhausting them.

enum DeviceType {
  Keyserver = 0;
  Web = 1;
  // iOS doesn't leave a good option for title to camel case renaming
  Ios = 2;
  Android = 3;
  Windows = 4;
  MacOS = 5;
}

// Bundle of information needed for creating an initial message using X3DH
message DeviceKeyUpload {
  IdentityKeyInfo deviceKeyInfo = 1;
  PreKey contentUpload = 2;
  PreKey notifUpload = 3;
  repeated string oneTimeContentPrekeys = 4;
  repeated string oneTimeNotifPrekeys = 5;
  DeviceType deviceType = 6;
}

// Request for registering a new user
message RegistrationStartRequest {
  // Message sent to initiate PAKE registration (step 1)
  bytes opaqueRegistrationRequest = 1;
  string username = 2;
  // Information needed to open a new channel to current user's device
  DeviceKeyUpload deviceKeyUpload = 3;
}

message ReservedRegistrationStartRequest {
  // Message sent to initiate PAKE registration (step 1)
  bytes opaqueRegistrationRequest = 1;
  string username = 2;
  // Information needed to open a new channel to current user's device
  DeviceKeyUpload deviceKeyUpload = 3;
  // Message from Ashoat's keyserver attesting that a given user has ownership
  // of a given username
  string keyserverMessage = 4;
  // Above message signed with Ashoat's keyserver's signing ed25519 key
  string keyserverSignature = 5;
}

// Messages sent from a client to Identity Service
message RegistrationFinishRequest {
  // Identifier to correlate RegisterStart session
  string sessionID = 1;
  // Final message in PAKE registration
  bytes opaqueRegistrationUpload = 2;
}

// Messages sent from Identity Service to client
message RegistrationStartResponse {
  // Identifier used to correlate start request with finish request
  string sessionID = 1;
  // sent to the user upon reception of the PAKE registration attempt
  // (step 2)
  bytes opaqueRegistrationResponse = 2;
}

message RegistrationFinishResponse {
  // Unique identifier for newly registered user
  string userID = 1;
  // After successful unpacking of user credentials, return token
  string accessToken = 2;
}

// LoginUser

message OpaqueLoginStartRequest {
  string username = 1;
  // Message sent to initiate PAKE login (step 1)
  bytes opaqueLoginRequest = 2;
  // Information specific to a user's device needed to open a new channel of
  // communication with this user
  DeviceKeyUpload deviceKeyUpload = 3;
}

message OpaqueLoginFinishRequest {
  // Identifier used to correlate start request with finish request
  string sessionID = 1;
  // Message containing client's reponse to server challenge.
  // Used to verify that client holds password secret (Step 3)
  bytes opaqueLoginUpload = 2;
}

message OpaqueLoginStartResponse {
  // Identifier used to correlate start request with finish request
  string sessionID = 1;
  // Opaque challenge sent from server to client attempting to login (Step 2)
  bytes opaqueLoginResponse = 2;
}

message OpaqueLoginFinishResponse {
  string userID = 1;
  // Mint and return a new access token upon successful login
  string accessToken = 2;

}

message WalletLoginRequest {
  string siweMessage = 1;
  string siweSignature = 2;
  // Information specific to a user's device needed to open a new channel of
  // communication with this user
  DeviceKeyUpload deviceKeyUpload = 3;
}

message ReservedWalletLoginRequest {
  string siweMessage = 1;
  string siweSignature = 2;
  // Information specific to a user's device needed to open a new channel of
  // communication with this user
  DeviceKeyUpload deviceKeyUpload = 3;
  // Message from Ashoat's keyserver attesting that a given user has ownership
  // of a given wallet address
  string keyserverMessage = 4;
  // Above message signed with Ashoat's keyserver's signing ed25519 key
  string keyserverSignature = 5;
}

message WalletLoginResponse {
  string userID = 1;
  string accessToken = 2;
}

// GenerateNonce

message GenerateNonceResponse{
  string nonce = 1;
}

// VerifyUserAccessToken

message VerifyUserAccessTokenRequest {
  string userID = 1;
  // signing ed25519 key for the given user's device
  string signingPublicKey = 2;
  string accessToken = 3;
}

message VerifyUserAccessTokenResponse {
  bool tokenValid = 1;
}

// AddReservedUsernames

message AddReservedUsernamesRequest {
  // Message from Ashoat's keyserver containing the username to be added
  string message = 1;
  // Above message signed with Ashoat's keyserver's signing ed25519 key
  string signature = 2;
}

// RemoveReservedUsername

message RemoveReservedUsernameRequest {
  // Message from Ashoat's keyserver containing the username to be removed
  string message = 1;
  // Above message signed with Ashoat's keyserver's signing ed25519 key
  string signature = 2;
}
