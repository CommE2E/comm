syntax = "proto3";

package identity.client;

// RPCs from a client (iOS, Android, or web) to identity service
service IdentityClientService {

  // Account actions

  // Called by user to register with the Identity Service (PAKE only)
  // Due to limitations of grpc-web, the Opaque challenge+response
  // needs to be split up over two unary requests
  // Start/Finish is used here to align with opaque protocol
  rpc RegisterPasswordUserStart(RegistrationStartRequest) returns (
    RegistrationStartResponse) {}
  rpc RegisterReservedPasswordUserStart(ReservedRegistrationStartRequest)
    returns (RegistrationStartResponse) {}
  rpc RegisterPasswordUserFinish(RegistrationFinishRequest) returns (
    RegistrationFinishResponse) {}
  // Called by user to update password and receive new access token
  rpc UpdateUserPasswordStart(UpdateUserPasswordStartRequest) returns
    (UpdateUserPasswordStartResponse) {}
  rpc UpdateUserPasswordFinish(UpdateUserPasswordFinishRequest) returns
    (Empty) {}
  // Called by user to register device and get an access token
  rpc LoginPasswordUserStart(OpaqueLoginStartRequest) returns
    (OpaqueLoginStartResponse) {}
  rpc LoginPasswordUserFinish(OpaqueLoginFinishRequest) returns
    (OpaqueLoginFinishResponse) {}
  rpc LoginWalletUser(WalletLoginRequest) returns (WalletLoginResponse) {}
  // Called by a user to delete their own account
  rpc DeleteUser(DeleteUserRequest) returns (Empty) {}

  // Sign-In with Ethereum actions

  // Called by clients to get a nonce for a Sign-In with Ethereum message
  rpc GenerateNonce(Empty) returns (GenerateNonceResponse) {}

  // X3DH actions

  // Called by clients to get all device keys associated with a user in order
  // to open a new channel of communication on any of their devices.
  // Specially, this will return the following per device:
  //   - Identity keys (both Content and Notif Keys)
  //   - PreKey (including preKey signature)
  //   - One-time PreKey
  rpc GetOutboundKeysForUser(OutboundKeysForUserRequest) returns
    (OutboundKeysForUserResponse) {}
  // Called by receivers of a communication request. The reponse will only
  // return identity keys (both content and notif keys) and related prekeys per
  // device, but will not contain one-time keys.
  rpc GetInboundKeysForUser(InboundKeysForUserRequest) returns
    (InboundKeysForUserResponse) {}
  // Called by clients to get required keys for opening a connection
  // to a user's keyserver
  rpc GetKeyserverKeys(OutboundKeysForUserRequest) returns
    (OutboundKeyserverResponse) {}
  // Replenish one-time preKeys
  rpc UploadOneTimeKeys(UploadOneTimeKeysRequest) returns (Empty) {}
  // Rotate a devices preKey and preKey signature
  // Rotated for deniability of older messages
  rpc RefreshUserPreKeys(RefreshUserPreKeysRequest) returns (Empty) {}

  // Service actions

  // Called by other services to verify a user's access token
  rpc VerifyUserAccessToken(VerifyUserAccessTokenRequest) returns
    (VerifyUserAccessTokenResponse) {}
}

// Helper types

message Empty {}

message PreKey {
  string preKey = 1;
  string preKeySignature = 2;
}

// Key information needed for starting a X3DH session
message IdentityKeyInfo {
  // JSON payload containing Olm keys
  // Sessions for users will contain both ContentKeys and NotifKeys
  // For keyservers, this will only contain ContentKeys
  string payload = 1;
  // Payload signed with the signing ed25519 key
  string payloadSignature = 2;
  // Signed message used for SIWE
  // This correlates a given wallet with a device's content key
  optional string socialProof = 3;
}

// RegisterUser

// Ephemeral information provided so others can create initial message
// to this device
//
// Prekeys are generally rotated periodically
// One-time Prekeys are "consumed" after first use, so many need to
// be provide to avoid exhausting them.

// Bundle of information needed for creating an initial message using X3DH
message DeviceKeyUpload {
  IdentityKeyInfo deviceKeyInfo = 1;
  PreKey contentUpload = 2;
  PreKey notifUpload = 3;
  repeated string onetimeContentPrekeys = 4;
  repeated string onetimeNotifPrekeys = 5;
}

// Request for registering a new user
message RegistrationStartRequest {
  // Message sent to initiate PAKE registration (step 1)
  bytes opaqueRegistrationRequest = 1;
  string username = 2;
  // Information needed to open a new channel to current user's device
  DeviceKeyUpload deviceKeyUpload = 3;
}

message ReservedRegistrationStartRequest {
  // Message sent to initiate PAKE registration (step 1)
  bytes opaqueRegistrationRequest = 1;
  string username = 2;
  // Information needed to open a new channel to current user's device
  DeviceKeyUpload deviceKeyUpload = 3;
  // Message from Ashoat's keyserver attesting that a given user has ownership
  // of a given username
  string keyserverMessage = 4;
  // Above message signed with Ashoat's keyserver's signing ed25519 key
  string keyserverSignature = 5;
}

// Messages sent from a client to Identity Service
message RegistrationFinishRequest {
  // Identifier to correlate RegisterStart session
  string sessionID = 1;
  // Final message in PAKE registration
  bytes opaqueRegistrationUpload = 2;
}

// Messages sent from Identity Service to client
message RegistrationStartResponse {
  // Identifier used to correlate start request with finish request
  string sessionID = 1;
  // sent to the user upon reception of the PAKE registration attempt
  // (step 2)
  bytes opaqueRegistrationResponse = 2;
}

message RegistrationFinishResponse {
  // Unique identifier for newly registered user
  string userID = 1;
  // After successful unpacking of user credentials, return token
  string accessToken = 2;
}

// UpdateUserPassword

// Request for updating a user, similar to registration but need a
// access token to validate user before updating password
message UpdateUserPasswordStartRequest {
  // Message sent to initiate PAKE registration (step 1)
  bytes opaqueRegistrationRequest = 1;
  // Used to validate user, before attempting to update password
  string accessToken = 2;
  string userID = 3;
  // Public ed25519 key used for signing. We need this to look up a device's
  // access token
  string deviceIDKey = 4;
}

// Do a user registration, but overwrite the existing credentials
// after validation of user
message UpdateUserPasswordFinishRequest {
  // Identifier used to correlate start and finish request
  string sessionID = 1;
  // Opaque client registration upload (step 3)
  bytes opaqueRegistrationUpload = 2;
}

message UpdateUserPasswordStartResponse {
  // Identifier used to correlate start request with finish request
  string sessionID = 1;
  bytes opaqueRegistrationResponse = 2;
}

// LoginUser

message OpaqueLoginStartRequest {
  string username = 1;
  // Message sent to initiate PAKE login (step 1)
  bytes opaqueLoginRequest = 2;
  // Information specific to a user's device needed to open a new channel of
  // communication with this user
  DeviceKeyUpload deviceKeyUpload = 3;
}

message OpaqueLoginFinishRequest {
  // Identifier used to correlate start request with finish request
  string sessionID = 1;
  // Message containing client's reponse to server challenge.
  // Used to verify that client holds password secret (Step 3)
  bytes opaqueLoginUpload = 2;
}

message OpaqueLoginStartResponse {
  // Identifier used to correlate start request with finish request
  string sessionID = 1;
  // Opaque challenge sent from server to client attempting to login (Step 2)
  bytes opaqueLoginResponse = 2;
}

message OpaqueLoginFinishResponse {
  string userID = 1;
  // Mint and return a new access token upon successful login
  string accessToken = 2;

}

message WalletLoginRequest {
  string siweMessage = 1;
  string siweSignature = 2;
  // Information specific to a user's device needed to open a new channel of
  // communication with this user
  DeviceKeyUpload deviceKeyUpload = 3;
}

message WalletLoginResponse {
  string userID = 1;
  string accessToken = 2;
}

// DeleteUser

message DeleteUserRequest {
  string accessToken = 1;
  string userID = 2;
  // Public ed25519 key used for signing. We need this to look up a device's
  // access token
  string deviceIDKey = 3;
}

// GenerateNonce

message GenerateNonceResponse{
  string nonce = 1;
}

// GetOutboundKeysForUser

// Information needed when establishing communication to someone else's device
message OutboundKeyInfo {
  IdentityKeyInfo identityInfo = 1;
  PreKey contentPrekey = 2;
  PreKey notifPrekey = 3;
  optional string onetimeContentPrekey = 4;
  optional string onetimeNotifPrekey = 5;
}

// Information needed by a device to establish communcation when responding
// to a request.
// The device receiving a request only needs the content key and prekey.
message OutboundKeysForUserRequest {
  oneof identifier {
    string username = 1;
    string walletAddress = 2;
  }
}

message OutboundKeysForUserResponse {
  // Map is keyed on devices' public ed25519 key used for signing
  map<string, OutboundKeyInfo> devices = 1;
}

// GetInboundKeysForUser

message InboundKeyInfo {
  IdentityKeyInfo identityInfo = 1;
  PreKey contentPrekey = 2;
  PreKey notifPrekey = 3;
}

message InboundKeysForUserRequest {
  oneof identifier {
    string username = 1;
    string walletAddress = 2;
  }
}

message InboundKeysForUserResponse {
  // Map is keyed on devices' public ed25519 key used for signing
  map<string, InboundKeyInfo> devices = 1;
}

// GetKeyserverKeys

// If a user owns a keyserver, return the information needed to initiate a
// connection.
message OutboundKeyserverResponse {
  optional OutboundKeyInfo keyserverInfo = 1;
}

// UploadOneTimeKeys

// As OPKs get exhausted, they need to be refreshed
message UploadOneTimeKeysRequest {
  string userID = 1;
  string deviceID = 2;
  string accessToken = 3;
  repeated string contentOneTimePreKeys = 4;
  repeated string notifOneTimePreKeys = 5;
}

// RefreshUserPreKeys

message RefreshUserPreKeysRequest {
  string accessToken = 1;
  PreKey newPreKeys = 2;
}

// VerifyUserAccessToken

message VerifyUserAccessTokenRequest {
  string userID = 1;
  // signing ed25519 key for the given user's device
  string signingPublicKey = 2;
  string accessToken = 3;
}

message VerifyUserAccessTokenResponse {
  bool tokenValid = 1;
}
