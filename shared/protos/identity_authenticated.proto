syntax = "proto3";

import "identity_client.proto";

package identity.authenticated;

// RPCs from a client (iOS, Android, or web) to identity service
//
// This service will assert authenticity of a device by verifying the access
// token through an interceptor, thus avoiding the need to explicitly pass
// the credentials on every request
service IdentityClientService {

  // Replenish one-time preKeys
  rpc UploadOneTimeKeys(UploadOneTimeKeysRequest)
    returns (identity.client.Empty) {}
  // Rotate a devices preKey and preKey signature
  // Rotated for deniability of older messages
  rpc RefreshUserPreKeys(RefreshUserPreKeysRequest)
    returns (identity.client.Empty) {}

  // Called by clients to get required keys for opening a connection
  // to a user's keyserver
  rpc GetKeyserverKeys(OutboundKeysForUserRequest) returns
    (KeyserverKeysResponse) {}
}

// Helper types

// UploadOneTimeKeys

// As OPKs get exhausted, they need to be refreshed
message UploadOneTimeKeysRequest {
  repeated string contentOneTimePreKeys = 1;
  repeated string notifOneTimePreKeys = 2;
}


// RefreshUserPreKeys

message RefreshUserPreKeysRequest {
  identity.client.PreKey newContentPreKeys = 1;
  identity.client.PreKey newNotifPreKeys = 2;
}

// Information needed when establishing communication to someone else's device
message OutboundKeyInfo {
  identity.client.IdentityKeyInfo identityInfo = 1;
  identity.client.PreKey contentPrekey = 2;
  identity.client.PreKey notifPrekey = 3;
  optional string oneTimeContentPrekey = 4;
  optional string oneTimeNotifPrekey = 5;
}

message KeyserverKeysResponse {
  optional OutboundKeyInfo keyserverInfo = 1;
}

// Information needed by a device to establish communcation when responding
// to a request.
// The device receiving a request only needs the content key and prekey.
message OutboundKeysForUserRequest {
  string userID = 1;
}


