syntax = "proto3";

import "identity_client.proto";

package identity.authenticated;

// RPCs from a client (iOS, Android, or web) to identity service
//
// This service will assert authenticity of a device by verifying the access
// token through an interceptor, thus avoiding the need to explicitly pass
// the credentials on every request
service IdentityClientService {
  // X3DH actions

  // Replenish one-time preKeys
  rpc UploadOneTimeKeys(UploadOneTimeKeysRequest)
    returns (identity.client.Empty) {}
  // Rotate a device's preKey and preKey signature
  // Rotated for deniability of older messages
  rpc RefreshUserPreKeys(RefreshUserPreKeysRequest)
    returns (identity.client.Empty) {}

  // Called by clients to get all device keys associated with a user in order
  // to open a new channel of communication on any of their devices.
  // Specially, this will return the following per device:
  //   - Identity keys (both Content and Notif Keys)
  //   - PreKey (including preKey signature)
  //   - One-time PreKey
  rpc GetOutboundKeysForUser(OutboundKeysForUserRequest) returns
    (OutboundKeysForUserResponse) {}
  // Called by receivers of a communication request. The reponse will only
  // return identity keys (both content and notif keys) and related prekeys per
  // device, but will not contain one-time keys.
  rpc GetInboundKeysForUser(InboundKeysForUserRequest) returns
    (InboundKeysForUserResponse) {}

  // Called by user to update password and receive new access token
  rpc UpdateUserPasswordStart(UpdateUserPasswordStartRequest) returns
    (UpdateUserPasswordStartResponse) {}
  rpc UpdateUserPasswordFinish(UpdateUserPasswordFinishRequest) returns
    (identity.client.Empty) {}

  // Called by user to log out (clears device's keys and access token)
  rpc LogOutUser(identity.client.Empty) returns (identity.client.Empty) {}
  // Called by a user to delete their own account
  rpc DeleteUser(identity.client.Empty) returns (identity.client.Empty) {}

  // Called by clients to get required keys for opening a connection
  // to a user's keyserver
  rpc GetKeyserverKeys(OutboundKeysForUserRequest) returns
    (KeyserverKeysResponse) {}

  // Returns userID for given username or wallet address
  rpc FindUserID(FindUserIDRequest) returns (FindUserIDResponse) {}
}

// Helper types

// UploadOneTimeKeys

// As OPKs get exhausted, they need to be refreshed
message UploadOneTimeKeysRequest {
  repeated string content_one_time_pre_keys = 1;
  repeated string notif_one_time_pre_keys = 2;
}


// RefreshUserPreKeys

message RefreshUserPreKeysRequest {
  identity.client.PreKey new_content_pre_keys = 1;
  identity.client.PreKey new_notif_pre_keys = 2;
}

// Information needed when establishing communication to someone else's device
message OutboundKeyInfo {
  identity.client.IdentityKeyInfo identity_info = 1;
  identity.client.PreKey content_prekey = 2;
  identity.client.PreKey notif_prekey = 3;
  optional string one_time_content_prekey = 4;
  optional string one_time_notif_prekey = 5;
}

message KeyserverKeysResponse {
  optional OutboundKeyInfo keyserver_info = 1;
}

// GetOutboundKeysForUser

message OutboundKeysForUserResponse {
  // Map is keyed on devices' public ed25519 key used for signing
  map<string, OutboundKeyInfo> devices = 1;
}

// Information needed by a device to establish communcation when responding
// to a request.
// The device receiving a request only needs the content key and prekey.
message OutboundKeysForUserRequest {
  string user_id = 1;
}

// GetInboundKeysForUser

message InboundKeyInfo {
  identity.client.IdentityKeyInfo identity_info = 1;
  identity.client.PreKey content_prekey = 2;
  identity.client.PreKey notif_prekey = 3;
}

message InboundKeysForUserResponse {
  // Map is keyed on devices' public ed25519 key used for signing
  map<string, InboundKeyInfo> devices = 1;
}

message InboundKeysForUserRequest {
  string user_id = 1;
}

// FindUserID

message FindUserIDRequest {
  oneof identifier {
    string username = 1;
    string wallet_address = 2;
  }
}

message FindUserIDResponse {
  // userID if the user is registered with Identity Service, null otherwise
  optional string user_id = 1;
  // true if the identifier (username or wallet address) exists in the
  // reserved usernames list, false otherwise. It doesn't take into account
  // whether the user is registered with Identity Service (userID != null).
  bool is_reserved = 2;
}

// UpdateUserPassword

// Request for updating a user, similar to registration but need a
// access token to validate user before updating password
message UpdateUserPasswordStartRequest {
  // Message sent to initiate PAKE registration (step 1)
  bytes opaque_registration_request = 1;
}

// Do a user registration, but overwrite the existing credentials
// after validation of user
message UpdateUserPasswordFinishRequest {
  // Identifier used to correlate start and finish request
  string session_id = 1;
  // Opaque client registration upload (step 3)
  bytes opaque_registration_upload = 2;
}

message UpdateUserPasswordStartResponse {
  // Identifier used to correlate start request with finish request
  string session_id = 1;
  bytes opaque_registration_response = 2;
}
