// @generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tunnelbroker.proto

#include "tunnelbroker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tunnelbroker {
PROTOBUF_CONSTEXPR SessionSignatureRequest::SessionSignatureRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionSignatureRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionSignatureRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionSignatureRequestDefaultTypeInternal() {}
  union {
    SessionSignatureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionSignatureRequestDefaultTypeInternal _SessionSignatureRequest_default_instance_;
PROTOBUF_CONSTEXPR SessionSignatureResponse::SessionSignatureResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tosign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionSignatureResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionSignatureResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionSignatureResponseDefaultTypeInternal() {}
  union {
    SessionSignatureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionSignatureResponseDefaultTypeInternal _SessionSignatureResponse_default_instance_;
PROTOBUF_CONSTEXPR NewSessionRequest::NewSessionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.publickey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notifytoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceappversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceos_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicetype_)*/0} {}
struct NewSessionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewSessionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewSessionRequestDefaultTypeInternal() {}
  union {
    NewSessionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewSessionRequestDefaultTypeInternal _NewSessionRequest_default_instance_;
PROTOBUF_CONSTEXPR NewSessionResponse::NewSessionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NewSessionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewSessionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewSessionResponseDefaultTypeInternal() {}
  union {
    NewSessionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewSessionResponseDefaultTypeInternal _NewSessionResponse_default_instance_;
PROTOBUF_CONSTEXPR SendRequest::SendRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blobhashes_)*/{}
  , /*decltype(_impl_.sessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.todeviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendRequestDefaultTypeInternal() {}
  union {
    SendRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendRequestDefaultTypeInternal _SendRequest_default_instance_;
PROTOBUF_CONSTEXPR GetRequest::GetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newnotifytoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRequestDefaultTypeInternal() {}
  union {
    GetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRequestDefaultTypeInternal _GetRequest_default_instance_;
PROTOBUF_CONSTEXPR GetResponseMessage::GetResponseMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blobhashes_)*/{}
  , /*decltype(_impl_.fromdeviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetResponseMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetResponseMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetResponseMessageDefaultTypeInternal() {}
  union {
    GetResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetResponseMessageDefaultTypeInternal _GetResponseMessage_default_instance_;
PROTOBUF_CONSTEXPR GetResponse::GetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetResponseDefaultTypeInternal() {}
  union {
    GetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetResponseDefaultTypeInternal _GetResponse_default_instance_;
PROTOBUF_CONSTEXPR ProcessedMessages::ProcessedMessages(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messageid_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessedMessagesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessedMessagesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessedMessagesDefaultTypeInternal() {}
  union {
    ProcessedMessages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessedMessagesDefaultTypeInternal _ProcessedMessages_default_instance_;
PROTOBUF_CONSTEXPR MessageToTunnelbrokerStruct::MessageToTunnelbrokerStruct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blobhashes_)*/{}
  , /*decltype(_impl_.messageid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.todeviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageToTunnelbrokerStructDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageToTunnelbrokerStructDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageToTunnelbrokerStructDefaultTypeInternal() {}
  union {
    MessageToTunnelbrokerStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageToTunnelbrokerStructDefaultTypeInternal _MessageToTunnelbrokerStruct_default_instance_;
PROTOBUF_CONSTEXPR MessagesToSend::MessagesToSend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessagesToSendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessagesToSendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessagesToSendDefaultTypeInternal() {}
  union {
    MessagesToSend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessagesToSendDefaultTypeInternal _MessagesToSend_default_instance_;
PROTOBUF_CONSTEXPR MessageToTunnelbroker::MessageToTunnelbroker(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageToTunnelbrokerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageToTunnelbrokerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageToTunnelbrokerDefaultTypeInternal() {}
  union {
    MessageToTunnelbroker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageToTunnelbrokerDefaultTypeInternal _MessageToTunnelbroker_default_instance_;
PROTOBUF_CONSTEXPR MessageToClientStruct::MessageToClientStruct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blobhashes_)*/{}
  , /*decltype(_impl_.messageid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fromdeviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageToClientStructDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageToClientStructDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageToClientStructDefaultTypeInternal() {}
  union {
    MessageToClientStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageToClientStructDefaultTypeInternal _MessageToClientStruct_default_instance_;
PROTOBUF_CONSTEXPR MessagesToDeliver::MessagesToDeliver(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessagesToDeliverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessagesToDeliverDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessagesToDeliverDefaultTypeInternal() {}
  union {
    MessagesToDeliver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessagesToDeliverDefaultTypeInternal _MessagesToDeliver_default_instance_;
PROTOBUF_CONSTEXPR MessageToClient::MessageToClient(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageToClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageToClientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageToClientDefaultTypeInternal() {}
  union {
    MessageToClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageToClientDefaultTypeInternal _MessageToClient_default_instance_;
PROTOBUF_CONSTEXPR CheckRequest::CheckRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicetoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckRequestDefaultTypeInternal() {}
  union {
    CheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckRequestDefaultTypeInternal _CheckRequest_default_instance_;
PROTOBUF_CONSTEXPR CheckResponse::CheckResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.checkresponsetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckResponseDefaultTypeInternal() {}
  union {
    CheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckResponseDefaultTypeInternal _CheckResponse_default_instance_;
PROTOBUF_CONSTEXPR NewPrimaryRequest::NewPrimaryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicetoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NewPrimaryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewPrimaryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewPrimaryRequestDefaultTypeInternal() {}
  union {
    NewPrimaryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewPrimaryRequestDefaultTypeInternal _NewPrimaryRequest_default_instance_;
PROTOBUF_CONSTEXPR NewPrimaryResponse::NewPrimaryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NewPrimaryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewPrimaryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewPrimaryResponseDefaultTypeInternal() {}
  union {
    NewPrimaryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewPrimaryResponseDefaultTypeInternal _NewPrimaryResponse_default_instance_;
PROTOBUF_CONSTEXPR PongRequest::PongRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicetoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PongRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PongRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PongRequestDefaultTypeInternal() {}
  union {
    PongRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PongRequestDefaultTypeInternal _PongRequest_default_instance_;
}  // namespace tunnelbroker
static ::_pb::Metadata file_level_metadata_tunnelbroker_2eproto[20];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tunnelbroker_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tunnelbroker_2eproto = nullptr;

const uint32_t TableStruct_tunnelbroker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::SessionSignatureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::SessionSignatureRequest, _impl_.deviceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::SessionSignatureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::SessionSignatureResponse, _impl_.tosign_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, _impl_.publickey_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, _impl_.notifytoken_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, _impl_.devicetype_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, _impl_.deviceappversion_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, _impl_.deviceos_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionResponse, _impl_.sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::SendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::SendRequest, _impl_.sessionid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::SendRequest, _impl_.todeviceid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::SendRequest, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::SendRequest, _impl_.blobhashes_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::GetRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::GetRequest, _impl_.sessionid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::GetRequest, _impl_.newnotifytoken_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::GetResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::GetResponseMessage, _impl_.fromdeviceid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::GetResponseMessage, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::GetResponseMessage, _impl_.blobhashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::GetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::GetResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::GetResponse, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::ProcessedMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::ProcessedMessages, _impl_.messageid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbrokerStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbrokerStruct, _impl_.messageid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbrokerStruct, _impl_.todeviceid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbrokerStruct, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbrokerStruct, _impl_.blobhashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessagesToSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessagesToSend, _impl_.messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbroker, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbroker, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbroker, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClientStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClientStruct, _impl_.messageid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClientStruct, _impl_.fromdeviceid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClientStruct, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClientStruct, _impl_.blobhashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessagesToDeliver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessagesToDeliver, _impl_.messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClient, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClient, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::CheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::CheckRequest, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::CheckRequest, _impl_.devicetoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::CheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::CheckResponse, _impl_.checkresponsetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewPrimaryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewPrimaryRequest, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewPrimaryRequest, _impl_.devicetoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewPrimaryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewPrimaryResponse, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::PongRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::PongRequest, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::PongRequest, _impl_.devicetoken_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tunnelbroker::SessionSignatureRequest)},
  { 7, -1, -1, sizeof(::tunnelbroker::SessionSignatureResponse)},
  { 14, 27, -1, sizeof(::tunnelbroker::NewSessionRequest)},
  { 34, -1, -1, sizeof(::tunnelbroker::NewSessionResponse)},
  { 41, -1, -1, sizeof(::tunnelbroker::SendRequest)},
  { 51, 59, -1, sizeof(::tunnelbroker::GetRequest)},
  { 61, -1, -1, sizeof(::tunnelbroker::GetResponseMessage)},
  { 70, -1, -1, sizeof(::tunnelbroker::GetResponse)},
  { 80, -1, -1, sizeof(::tunnelbroker::ProcessedMessages)},
  { 87, -1, -1, sizeof(::tunnelbroker::MessageToTunnelbrokerStruct)},
  { 97, -1, -1, sizeof(::tunnelbroker::MessagesToSend)},
  { 104, -1, -1, sizeof(::tunnelbroker::MessageToTunnelbroker)},
  { 114, -1, -1, sizeof(::tunnelbroker::MessageToClientStruct)},
  { 124, -1, -1, sizeof(::tunnelbroker::MessagesToDeliver)},
  { 131, -1, -1, sizeof(::tunnelbroker::MessageToClient)},
  { 142, -1, -1, sizeof(::tunnelbroker::CheckRequest)},
  { 150, -1, -1, sizeof(::tunnelbroker::CheckResponse)},
  { 157, -1, -1, sizeof(::tunnelbroker::NewPrimaryRequest)},
  { 165, -1, -1, sizeof(::tunnelbroker::NewPrimaryResponse)},
  { 172, -1, -1, sizeof(::tunnelbroker::PongRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tunnelbroker::_SessionSignatureRequest_default_instance_._instance,
  &::tunnelbroker::_SessionSignatureResponse_default_instance_._instance,
  &::tunnelbroker::_NewSessionRequest_default_instance_._instance,
  &::tunnelbroker::_NewSessionResponse_default_instance_._instance,
  &::tunnelbroker::_SendRequest_default_instance_._instance,
  &::tunnelbroker::_GetRequest_default_instance_._instance,
  &::tunnelbroker::_GetResponseMessage_default_instance_._instance,
  &::tunnelbroker::_GetResponse_default_instance_._instance,
  &::tunnelbroker::_ProcessedMessages_default_instance_._instance,
  &::tunnelbroker::_MessageToTunnelbrokerStruct_default_instance_._instance,
  &::tunnelbroker::_MessagesToSend_default_instance_._instance,
  &::tunnelbroker::_MessageToTunnelbroker_default_instance_._instance,
  &::tunnelbroker::_MessageToClientStruct_default_instance_._instance,
  &::tunnelbroker::_MessagesToDeliver_default_instance_._instance,
  &::tunnelbroker::_MessageToClient_default_instance_._instance,
  &::tunnelbroker::_CheckRequest_default_instance_._instance,
  &::tunnelbroker::_CheckResponse_default_instance_._instance,
  &::tunnelbroker::_NewPrimaryRequest_default_instance_._instance,
  &::tunnelbroker::_NewPrimaryResponse_default_instance_._instance,
  &::tunnelbroker::_PongRequest_default_instance_._instance,
};

const char descriptor_table_protodef_tunnelbroker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022tunnelbroker.proto\022\014tunnelbroker\032\033goog"
  "le/protobuf/empty.proto\"+\n\027SessionSignat"
  "ureRequest\022\020\n\010deviceID\030\001 \001(\t\"*\n\030SessionS"
  "ignatureResponse\022\016\n\006toSign\030\001 \001(\t\"\225\002\n\021New"
  "SessionRequest\022\020\n\010deviceID\030\001 \001(\t\022\021\n\tpubl"
  "icKey\030\002 \001(\t\022\021\n\tsignature\030\003 \001(\t\022\030\n\013notify"
  "Token\030\004 \001(\tH\000\210\001\001\022\?\n\ndeviceType\030\005 \001(\0162+.t"
  "unnelbroker.NewSessionRequest.DeviceType"
  "s\022\030\n\020deviceAppVersion\030\006 \001(\t\022\020\n\010deviceOS\030"
  "\007 \001(\t\"1\n\013DeviceTypes\022\n\n\006MOBILE\020\000\022\007\n\003WEB\020"
  "\001\022\r\n\tKEYSERVER\020\002B\016\n\014_notifyToken\"\'\n\022NewS"
  "essionResponse\022\021\n\tsessionID\030\001 \001(\t\"Y\n\013Sen"
  "dRequest\022\021\n\tsessionID\030\001 \001(\t\022\022\n\ntoDeviceI"
  "D\030\002 \001(\t\022\017\n\007payload\030\003 \001(\014\022\022\n\nblobHashes\030\004"
  " \003(\t\"O\n\nGetRequest\022\021\n\tsessionID\030\001 \001(\t\022\033\n"
  "\016newNotifyToken\030\002 \001(\tH\000\210\001\001B\021\n\017_newNotify"
  "Token\"O\n\022GetResponseMessage\022\024\n\014fromDevic"
  "eID\030\001 \001(\t\022\017\n\007payload\030\002 \001(\014\022\022\n\nblobHashes"
  "\030\003 \003(\t\"\264\001\n\013GetResponse\022;\n\017responseMessag"
  "e\030\001 \001(\0132 .tunnelbroker.GetResponseMessag"
  "eH\000\022&\n\004ping\030\002 \001(\0132\026.google.protobuf.Empt"
  "yH\000\0228\n\026newNotifyTokenRequired\030\003 \001(\0132\026.go"
  "ogle.protobuf.EmptyH\000B\006\n\004data\"&\n\021Process"
  "edMessages\022\021\n\tmessageID\030\001 \003(\t\"i\n\033Message"
  "ToTunnelbrokerStruct\022\021\n\tmessageID\030\001 \001(\t\022"
  "\022\n\ntoDeviceID\030\002 \001(\t\022\017\n\007payload\030\003 \001(\t\022\022\n\n"
  "blobHashes\030\004 \003(\t\"M\n\016MessagesToSend\022;\n\010me"
  "ssages\030\001 \003(\0132).tunnelbroker.MessageToTun"
  "nelbrokerStruct\"\257\001\n\025MessageToTunnelbroke"
  "r\0226\n\016messagesToSend\030\001 \001(\0132\034.tunnelbroker"
  ".MessagesToSendH\000\022<\n\021processedMessages\030\002"
  " \001(\0132\037.tunnelbroker.ProcessedMessagesH\000\022"
  "\030\n\016newNotifyToken\030\003 \001(\tH\000B\006\n\004data\"e\n\025Mes"
  "sageToClientStruct\022\021\n\tmessageID\030\001 \001(\t\022\024\n"
  "\014fromDeviceID\030\002 \001(\t\022\017\n\007payload\030\003 \001(\t\022\022\n\n"
  "blobHashes\030\004 \003(\t\"J\n\021MessagesToDeliver\0225\n"
  "\010messages\030\001 \003(\0132#.tunnelbroker.MessageTo"
  "ClientStruct\"\367\001\n\017MessageToClient\022<\n\021mess"
  "agesToDeliver\030\001 \001(\0132\037.tunnelbroker.Messa"
  "gesToDeliverH\000\022<\n\021processedMessages\030\002 \001("
  "\0132\037.tunnelbroker.ProcessedMessagesH\000\0228\n\026"
  "newNotifyTokenRequired\030\003 \001(\0132\026.google.pr"
  "otobuf.EmptyH\000\022&\n\004ping\030\004 \001(\0132\026.google.pr"
  "otobuf.EmptyH\000B\006\n\004data\"3\n\014CheckRequest\022\016"
  "\n\006userId\030\001 \001(\t\022\023\n\013deviceToken\030\002 \001(\t\"K\n\rC"
  "heckResponse\022:\n\021checkResponseType\030\001 \001(\0162"
  "\037.tunnelbroker.CheckResponseType\"8\n\021NewP"
  "rimaryRequest\022\016\n\006userId\030\001 \001(\t\022\023\n\013deviceT"
  "oken\030\002 \001(\t\"%\n\022NewPrimaryResponse\022\017\n\007succ"
  "ess\030\001 \001(\010\"2\n\013PongRequest\022\016\n\006userId\030\001 \001(\t"
  "\022\023\n\013deviceToken\030\002 \001(\t*n\n\021CheckResponseTy"
  "pe\022\030\n\024PRIMARY_DOESNT_EXIST\020\000\022\022\n\016PRIMARY_"
  "ONLINE\020\001\022\023\n\017PRIMARY_OFFLINE\020\002\022\026\n\022CURRENT"
  "_IS_PRIMARY\020\0032\237\005\n\023TunnelbrokerService\022W\n"
  "\032CheckIfPrimaryDeviceOnline\022\032.tunnelbrok"
  "er.CheckRequest\032\033.tunnelbroker.CheckResp"
  "onse\"\000\022]\n\026BecomeNewPrimaryDevice\022\037.tunne"
  "lbroker.NewPrimaryRequest\032 .tunnelbroker"
  ".NewPrimaryResponse\"\000\022\?\n\010SendPong\022\031.tunn"
  "elbroker.PongRequest\032\026.google.protobuf.E"
  "mpty\"\000\022c\n\020SessionSignature\022%.tunnelbroke"
  "r.SessionSignatureRequest\032&.tunnelbroker"
  ".SessionSignatureResponse\"\000\022Q\n\nNewSessio"
  "n\022\037.tunnelbroker.NewSessionRequest\032 .tun"
  "nelbroker.NewSessionResponse\"\000\022;\n\004Send\022\031"
  ".tunnelbroker.SendRequest\032\026.google.proto"
  "buf.Empty\"\000\022>\n\003Get\022\030.tunnelbroker.GetReq"
  "uest\032\031.tunnelbroker.GetResponse\"\0000\001\022Z\n\016M"
  "essagesStream\022#.tunnelbroker.MessageToTu"
  "nnelbroker\032\035.tunnelbroker.MessageToClien"
  "t\"\000(\0010\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tunnelbroker_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_tunnelbroker_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tunnelbroker_2eproto = {
    false, false, 2815, descriptor_table_protodef_tunnelbroker_2eproto,
    "tunnelbroker.proto",
    &descriptor_table_tunnelbroker_2eproto_once, descriptor_table_tunnelbroker_2eproto_deps, 1, 20,
    schemas, file_default_instances, TableStruct_tunnelbroker_2eproto::offsets,
    file_level_metadata_tunnelbroker_2eproto, file_level_enum_descriptors_tunnelbroker_2eproto,
    file_level_service_descriptors_tunnelbroker_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tunnelbroker_2eproto_getter() {
  return &descriptor_table_tunnelbroker_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tunnelbroker_2eproto(&descriptor_table_tunnelbroker_2eproto);
namespace tunnelbroker {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NewSessionRequest_DeviceTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tunnelbroker_2eproto);
  return file_level_enum_descriptors_tunnelbroker_2eproto[0];
}
bool NewSessionRequest_DeviceTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NewSessionRequest_DeviceTypes NewSessionRequest::MOBILE;
constexpr NewSessionRequest_DeviceTypes NewSessionRequest::WEB;
constexpr NewSessionRequest_DeviceTypes NewSessionRequest::KEYSERVER;
constexpr NewSessionRequest_DeviceTypes NewSessionRequest::DeviceTypes_MIN;
constexpr NewSessionRequest_DeviceTypes NewSessionRequest::DeviceTypes_MAX;
constexpr int NewSessionRequest::DeviceTypes_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckResponseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tunnelbroker_2eproto);
  return file_level_enum_descriptors_tunnelbroker_2eproto[1];
}
bool CheckResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SessionSignatureRequest::_Internal {
 public:
};

SessionSignatureRequest::SessionSignatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.SessionSignatureRequest)
}
SessionSignatureRequest::SessionSignatureRequest(const SessionSignatureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionSignatureRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.SessionSignatureRequest)
}

inline void SessionSignatureRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionSignatureRequest::~SessionSignatureRequest() {
  // @@protoc_insertion_point(destructor:tunnelbroker.SessionSignatureRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionSignatureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
}

void SessionSignatureRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionSignatureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.SessionSignatureRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deviceid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionSignatureRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.SessionSignatureRequest.deviceID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionSignatureRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.SessionSignatureRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceID = 1;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.SessionSignatureRequest.deviceID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.SessionSignatureRequest)
  return target;
}

size_t SessionSignatureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.SessionSignatureRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceID = 1;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionSignatureRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionSignatureRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionSignatureRequest::GetClassData() const { return &_class_data_; }


void SessionSignatureRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionSignatureRequest*>(&to_msg);
  auto& from = static_cast<const SessionSignatureRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.SessionSignatureRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deviceid().empty()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionSignatureRequest::CopyFrom(const SessionSignatureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.SessionSignatureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionSignatureRequest::IsInitialized() const {
  return true;
}

void SessionSignatureRequest::InternalSwap(SessionSignatureRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionSignatureRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[0]);
}

// ===================================================================

class SessionSignatureResponse::_Internal {
 public:
};

SessionSignatureResponse::SessionSignatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.SessionSignatureResponse)
}
SessionSignatureResponse::SessionSignatureResponse(const SessionSignatureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionSignatureResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tosign_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tosign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tosign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tosign().empty()) {
    _this->_impl_.tosign_.Set(from._internal_tosign(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.SessionSignatureResponse)
}

inline void SessionSignatureResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tosign_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tosign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tosign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionSignatureResponse::~SessionSignatureResponse() {
  // @@protoc_insertion_point(destructor:tunnelbroker.SessionSignatureResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionSignatureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tosign_.Destroy();
}

void SessionSignatureResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionSignatureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.SessionSignatureResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tosign_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionSignatureResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string toSign = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tosign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.SessionSignatureResponse.toSign"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionSignatureResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.SessionSignatureResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string toSign = 1;
  if (!this->_internal_tosign().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tosign().data(), static_cast<int>(this->_internal_tosign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.SessionSignatureResponse.toSign");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tosign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.SessionSignatureResponse)
  return target;
}

size_t SessionSignatureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.SessionSignatureResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string toSign = 1;
  if (!this->_internal_tosign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tosign());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionSignatureResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionSignatureResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionSignatureResponse::GetClassData() const { return &_class_data_; }


void SessionSignatureResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionSignatureResponse*>(&to_msg);
  auto& from = static_cast<const SessionSignatureResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.SessionSignatureResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tosign().empty()) {
    _this->_internal_set_tosign(from._internal_tosign());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionSignatureResponse::CopyFrom(const SessionSignatureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.SessionSignatureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionSignatureResponse::IsInitialized() const {
  return true;
}

void SessionSignatureResponse::InternalSwap(SessionSignatureResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tosign_, lhs_arena,
      &other->_impl_.tosign_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionSignatureResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[1]);
}

// ===================================================================

class NewSessionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<NewSessionRequest>()._impl_._has_bits_);
  static void set_has_notifytoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NewSessionRequest::NewSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.NewSessionRequest)
}
NewSessionRequest::NewSessionRequest(const NewSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewSessionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.publickey_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.notifytoken_){}
    , decltype(_impl_.deviceappversion_){}
    , decltype(_impl_.deviceos_){}
    , decltype(_impl_.devicetype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.publickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_publickey().empty()) {
    _this->_impl_.publickey_.Set(from._internal_publickey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notifytoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notifytoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_notifytoken()) {
    _this->_impl_.notifytoken_.Set(from._internal_notifytoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deviceappversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceappversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceappversion().empty()) {
    _this->_impl_.deviceappversion_.Set(from._internal_deviceappversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deviceos_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceos_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceos().empty()) {
    _this->_impl_.deviceos_.Set(from._internal_deviceos(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.devicetype_ = from._impl_.devicetype_;
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.NewSessionRequest)
}

inline void NewSessionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.publickey_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.notifytoken_){}
    , decltype(_impl_.deviceappversion_){}
    , decltype(_impl_.deviceos_){}
    , decltype(_impl_.devicetype_){0}
  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.publickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notifytoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notifytoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceappversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceappversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceos_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceos_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewSessionRequest::~NewSessionRequest() {
  // @@protoc_insertion_point(destructor:tunnelbroker.NewSessionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
  _impl_.publickey_.Destroy();
  _impl_.signature_.Destroy();
  _impl_.notifytoken_.Destroy();
  _impl_.deviceappversion_.Destroy();
  _impl_.deviceos_.Destroy();
}

void NewSessionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.NewSessionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deviceid_.ClearToEmpty();
  _impl_.publickey_.ClearToEmpty();
  _impl_.signature_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.notifytoken_.ClearNonDefaultToEmpty();
  }
  _impl_.deviceappversion_.ClearToEmpty();
  _impl_.deviceos_.ClearToEmpty();
  _impl_.devicetype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewSessionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.NewSessionRequest.deviceID"));
        } else
          goto handle_unusual;
        continue;
      // string publicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_publickey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.NewSessionRequest.publicKey"));
        } else
          goto handle_unusual;
        continue;
      // string signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.NewSessionRequest.signature"));
        } else
          goto handle_unusual;
        continue;
      // optional string notifyToken = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_notifytoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.NewSessionRequest.notifyToken"));
        } else
          goto handle_unusual;
        continue;
      // .tunnelbroker.NewSessionRequest.DeviceTypes deviceType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_devicetype(static_cast<::tunnelbroker::NewSessionRequest_DeviceTypes>(val));
        } else
          goto handle_unusual;
        continue;
      // string deviceAppVersion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_deviceappversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.NewSessionRequest.deviceAppVersion"));
        } else
          goto handle_unusual;
        continue;
      // string deviceOS = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_deviceos();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.NewSessionRequest.deviceOS"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewSessionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.NewSessionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceID = 1;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewSessionRequest.deviceID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // string publicKey = 2;
  if (!this->_internal_publickey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publickey().data(), static_cast<int>(this->_internal_publickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewSessionRequest.publicKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_publickey(), target);
  }

  // string signature = 3;
  if (!this->_internal_signature().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewSessionRequest.signature");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_signature(), target);
  }

  // optional string notifyToken = 4;
  if (_internal_has_notifytoken()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notifytoken().data(), static_cast<int>(this->_internal_notifytoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewSessionRequest.notifyToken");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notifytoken(), target);
  }

  // .tunnelbroker.NewSessionRequest.DeviceTypes deviceType = 5;
  if (this->_internal_devicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_devicetype(), target);
  }

  // string deviceAppVersion = 6;
  if (!this->_internal_deviceappversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceappversion().data(), static_cast<int>(this->_internal_deviceappversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewSessionRequest.deviceAppVersion");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_deviceappversion(), target);
  }

  // string deviceOS = 7;
  if (!this->_internal_deviceos().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceos().data(), static_cast<int>(this->_internal_deviceos().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewSessionRequest.deviceOS");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_deviceos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.NewSessionRequest)
  return target;
}

size_t NewSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.NewSessionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceID = 1;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string publicKey = 2;
  if (!this->_internal_publickey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publickey());
  }

  // string signature = 3;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  // optional string notifyToken = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notifytoken());
  }

  // string deviceAppVersion = 6;
  if (!this->_internal_deviceappversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceappversion());
  }

  // string deviceOS = 7;
  if (!this->_internal_deviceos().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceos());
  }

  // .tunnelbroker.NewSessionRequest.DeviceTypes deviceType = 5;
  if (this->_internal_devicetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_devicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewSessionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewSessionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewSessionRequest::GetClassData() const { return &_class_data_; }


void NewSessionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewSessionRequest*>(&to_msg);
  auto& from = static_cast<const NewSessionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.NewSessionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deviceid().empty()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_publickey().empty()) {
    _this->_internal_set_publickey(from._internal_publickey());
  }
  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (from._internal_has_notifytoken()) {
    _this->_internal_set_notifytoken(from._internal_notifytoken());
  }
  if (!from._internal_deviceappversion().empty()) {
    _this->_internal_set_deviceappversion(from._internal_deviceappversion());
  }
  if (!from._internal_deviceos().empty()) {
    _this->_internal_set_deviceos(from._internal_deviceos());
  }
  if (from._internal_devicetype() != 0) {
    _this->_internal_set_devicetype(from._internal_devicetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewSessionRequest::CopyFrom(const NewSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.NewSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSessionRequest::IsInitialized() const {
  return true;
}

void NewSessionRequest::InternalSwap(NewSessionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.publickey_, lhs_arena,
      &other->_impl_.publickey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notifytoken_, lhs_arena,
      &other->_impl_.notifytoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceappversion_, lhs_arena,
      &other->_impl_.deviceappversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceos_, lhs_arena,
      &other->_impl_.deviceos_, rhs_arena
  );
  swap(_impl_.devicetype_, other->_impl_.devicetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewSessionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[2]);
}

// ===================================================================

class NewSessionResponse::_Internal {
 public:
};

NewSessionResponse::NewSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.NewSessionResponse)
}
NewSessionResponse::NewSessionResponse(const NewSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewSessionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.NewSessionResponse)
}

inline void NewSessionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewSessionResponse::~NewSessionResponse() {
  // @@protoc_insertion_point(destructor:tunnelbroker.NewSessionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewSessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessionid_.Destroy();
}

void NewSessionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.NewSessionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessionid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewSessionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sessionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.NewSessionResponse.sessionID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewSessionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.NewSessionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionID = 1;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewSessionResponse.sessionID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.NewSessionResponse)
  return target;
}

size_t NewSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.NewSessionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionID = 1;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewSessionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewSessionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewSessionResponse::GetClassData() const { return &_class_data_; }


void NewSessionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewSessionResponse*>(&to_msg);
  auto& from = static_cast<const NewSessionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.NewSessionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewSessionResponse::CopyFrom(const NewSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.NewSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSessionResponse::IsInitialized() const {
  return true;
}

void NewSessionResponse::InternalSwap(NewSessionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionid_, lhs_arena,
      &other->_impl_.sessionid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NewSessionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[3]);
}

// ===================================================================

class SendRequest::_Internal {
 public:
};

SendRequest::SendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.SendRequest)
}
SendRequest::SendRequest(const SendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blobhashes_){from._impl_.blobhashes_}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.todeviceid_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.todeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.todeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_todeviceid().empty()) {
    _this->_impl_.todeviceid_.Set(from._internal_todeviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.SendRequest)
}

inline void SendRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blobhashes_){arena}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.todeviceid_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.todeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.todeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendRequest::~SendRequest() {
  // @@protoc_insertion_point(destructor:tunnelbroker.SendRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blobhashes_.~RepeatedPtrField();
  _impl_.sessionid_.Destroy();
  _impl_.todeviceid_.Destroy();
  _impl_.payload_.Destroy();
}

void SendRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.SendRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blobhashes_.Clear();
  _impl_.sessionid_.ClearToEmpty();
  _impl_.todeviceid_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sessionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.SendRequest.sessionID"));
        } else
          goto handle_unusual;
        continue;
      // string toDeviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_todeviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.SendRequest.toDeviceID"));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string blobHashes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blobhashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.SendRequest.blobHashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.SendRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionID = 1;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.SendRequest.sessionID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  // string toDeviceID = 2;
  if (!this->_internal_todeviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_todeviceid().data(), static_cast<int>(this->_internal_todeviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.SendRequest.toDeviceID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_todeviceid(), target);
  }

  // bytes payload = 3;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // repeated string blobHashes = 4;
  for (int i = 0, n = this->_internal_blobhashes_size(); i < n; i++) {
    const auto& s = this->_internal_blobhashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.SendRequest.blobHashes");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.SendRequest)
  return target;
}

size_t SendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.SendRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string blobHashes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blobhashes_.size());
  for (int i = 0, n = _impl_.blobhashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blobhashes_.Get(i));
  }

  // string sessionID = 1;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // string toDeviceID = 2;
  if (!this->_internal_todeviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_todeviceid());
  }

  // bytes payload = 3;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendRequest::GetClassData() const { return &_class_data_; }


void SendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendRequest*>(&to_msg);
  auto& from = static_cast<const SendRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.SendRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blobhashes_.MergeFrom(from._impl_.blobhashes_);
  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (!from._internal_todeviceid().empty()) {
    _this->_internal_set_todeviceid(from._internal_todeviceid());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendRequest::CopyFrom(const SendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.SendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRequest::IsInitialized() const {
  return true;
}

void SendRequest::InternalSwap(SendRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blobhashes_.InternalSwap(&other->_impl_.blobhashes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionid_, lhs_arena,
      &other->_impl_.sessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.todeviceid_, lhs_arena,
      &other->_impl_.todeviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SendRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[4]);
}

// ===================================================================

class GetRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetRequest>()._impl_._has_bits_);
  static void set_has_newnotifytoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetRequest::GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.newnotifytoken_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.newnotifytoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newnotifytoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_newnotifytoken()) {
    _this->_impl_.newnotifytoken_.Set(from._internal_newnotifytoken(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.GetRequest)
}

inline void GetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.newnotifytoken_){}
  };
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newnotifytoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newnotifytoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:tunnelbroker.GetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessionid_.Destroy();
  _impl_.newnotifytoken_.Destroy();
}

void GetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.GetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessionid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.newnotifytoken_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sessionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.GetRequest.sessionID"));
        } else
          goto handle_unusual;
        continue;
      // optional string newNotifyToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_newnotifytoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.GetRequest.newNotifyToken"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.GetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionID = 1;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.GetRequest.sessionID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  // optional string newNotifyToken = 2;
  if (_internal_has_newnotifytoken()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newnotifytoken().data(), static_cast<int>(this->_internal_newnotifytoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.GetRequest.newNotifyToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_newnotifytoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.GetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionID = 1;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // optional string newNotifyToken = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newnotifytoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRequest::GetClassData() const { return &_class_data_; }


void GetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRequest*>(&to_msg);
  auto& from = static_cast<const GetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.GetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_has_newnotifytoken()) {
    _this->_internal_set_newnotifytoken(from._internal_newnotifytoken());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionid_, lhs_arena,
      &other->_impl_.sessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newnotifytoken_, lhs_arena,
      &other->_impl_.newnotifytoken_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[5]);
}

// ===================================================================

class GetResponseMessage::_Internal {
 public:
};

GetResponseMessage::GetResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.GetResponseMessage)
}
GetResponseMessage::GetResponseMessage(const GetResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetResponseMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blobhashes_){from._impl_.blobhashes_}
    , decltype(_impl_.fromdeviceid_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fromdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fromdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fromdeviceid().empty()) {
    _this->_impl_.fromdeviceid_.Set(from._internal_fromdeviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.GetResponseMessage)
}

inline void GetResponseMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blobhashes_){arena}
    , decltype(_impl_.fromdeviceid_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fromdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fromdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetResponseMessage::~GetResponseMessage() {
  // @@protoc_insertion_point(destructor:tunnelbroker.GetResponseMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blobhashes_.~RepeatedPtrField();
  _impl_.fromdeviceid_.Destroy();
  _impl_.payload_.Destroy();
}

void GetResponseMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.GetResponseMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blobhashes_.Clear();
  _impl_.fromdeviceid_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResponseMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fromDeviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fromdeviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.GetResponseMessage.fromDeviceID"));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string blobHashes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blobhashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.GetResponseMessage.blobHashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetResponseMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.GetResponseMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fromDeviceID = 1;
  if (!this->_internal_fromdeviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fromdeviceid().data(), static_cast<int>(this->_internal_fromdeviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.GetResponseMessage.fromDeviceID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fromdeviceid(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  // repeated string blobHashes = 3;
  for (int i = 0, n = this->_internal_blobhashes_size(); i < n; i++) {
    const auto& s = this->_internal_blobhashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.GetResponseMessage.blobHashes");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.GetResponseMessage)
  return target;
}

size_t GetResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.GetResponseMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string blobHashes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blobhashes_.size());
  for (int i = 0, n = _impl_.blobhashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blobhashes_.Get(i));
  }

  // string fromDeviceID = 1;
  if (!this->_internal_fromdeviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fromdeviceid());
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetResponseMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetResponseMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetResponseMessage::GetClassData() const { return &_class_data_; }


void GetResponseMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetResponseMessage*>(&to_msg);
  auto& from = static_cast<const GetResponseMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.GetResponseMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blobhashes_.MergeFrom(from._impl_.blobhashes_);
  if (!from._internal_fromdeviceid().empty()) {
    _this->_internal_set_fromdeviceid(from._internal_fromdeviceid());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetResponseMessage::CopyFrom(const GetResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.GetResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponseMessage::IsInitialized() const {
  return true;
}

void GetResponseMessage::InternalSwap(GetResponseMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blobhashes_.InternalSwap(&other->_impl_.blobhashes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fromdeviceid_, lhs_arena,
      &other->_impl_.fromdeviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResponseMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[6]);
}

// ===================================================================

class GetResponse::_Internal {
 public:
  static const ::tunnelbroker::GetResponseMessage& responsemessage(const GetResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Empty& ping(const GetResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Empty& newnotifytokenrequired(const GetResponse* msg);
};

const ::tunnelbroker::GetResponseMessage&
GetResponse::_Internal::responsemessage(const GetResponse* msg) {
  return *msg->_impl_.data_.responsemessage_;
}
const ::PROTOBUF_NAMESPACE_ID::Empty&
GetResponse::_Internal::ping(const GetResponse* msg) {
  return *msg->_impl_.data_.ping_;
}
const ::PROTOBUF_NAMESPACE_ID::Empty&
GetResponse::_Internal::newnotifytokenrequired(const GetResponse* msg) {
  return *msg->_impl_.data_.newnotifytokenrequired_;
}
void GetResponse::set_allocated_responsemessage(::tunnelbroker::GetResponseMessage* responsemessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (responsemessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(responsemessage);
    if (message_arena != submessage_arena) {
      responsemessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responsemessage, submessage_arena);
    }
    set_has_responsemessage();
    _impl_.data_.responsemessage_ = responsemessage;
  }
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.GetResponse.responseMessage)
}
void GetResponse::set_allocated_ping(::PROTOBUF_NAMESPACE_ID::Empty* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping));
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    _impl_.data_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.GetResponse.ping)
}
void GetResponse::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.ping_;
    }
    clear_has_data();
  }
}
void GetResponse::set_allocated_newnotifytokenrequired(::PROTOBUF_NAMESPACE_ID::Empty* newnotifytokenrequired) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (newnotifytokenrequired) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newnotifytokenrequired));
    if (message_arena != submessage_arena) {
      newnotifytokenrequired = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newnotifytokenrequired, submessage_arena);
    }
    set_has_newnotifytokenrequired();
    _impl_.data_.newnotifytokenrequired_ = newnotifytokenrequired;
  }
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.GetResponse.newNotifyTokenRequired)
}
void GetResponse::clear_newnotifytokenrequired() {
  if (_internal_has_newnotifytokenrequired()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.newnotifytokenrequired_;
    }
    clear_has_data();
  }
}
GetResponse::GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kResponseMessage: {
      _this->_internal_mutable_responsemessage()->::tunnelbroker::GetResponseMessage::MergeFrom(
          from._internal_responsemessage());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_ping());
      break;
    }
    case kNewNotifyTokenRequired: {
      _this->_internal_mutable_newnotifytokenrequired()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_newnotifytokenrequired());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.GetResponse)
}

inline void GetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:tunnelbroker.GetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void GetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetResponse::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:tunnelbroker.GetResponse)
  switch (data_case()) {
    case kResponseMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.responsemessage_;
      }
      break;
    }
    case kPing: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.ping_;
      }
      break;
    }
    case kNewNotifyTokenRequired: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.newnotifytokenrequired_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.GetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tunnelbroker.GetResponseMessage responseMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_responsemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Empty ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Empty newNotifyTokenRequired = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_newnotifytokenrequired(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.GetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tunnelbroker.GetResponseMessage responseMessage = 1;
  if (_internal_has_responsemessage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::responsemessage(this),
        _Internal::responsemessage(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Empty ping = 2;
  if (_internal_has_ping()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ping(this),
        _Internal::ping(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Empty newNotifyTokenRequired = 3;
  if (_internal_has_newnotifytokenrequired()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::newnotifytokenrequired(this),
        _Internal::newnotifytokenrequired(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.GetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .tunnelbroker.GetResponseMessage responseMessage = 1;
    case kResponseMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.responsemessage_);
      break;
    }
    // .google.protobuf.Empty ping = 2;
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.ping_);
      break;
    }
    // .google.protobuf.Empty newNotifyTokenRequired = 3;
    case kNewNotifyTokenRequired: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.newnotifytokenrequired_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetResponse::GetClassData() const { return &_class_data_; }


void GetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetResponse*>(&to_msg);
  auto& from = static_cast<const GetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.GetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kResponseMessage: {
      _this->_internal_mutable_responsemessage()->::tunnelbroker::GetResponseMessage::MergeFrom(
          from._internal_responsemessage());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_ping());
      break;
    }
    case kNewNotifyTokenRequired: {
      _this->_internal_mutable_newnotifytokenrequired()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_newnotifytokenrequired());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[7]);
}

// ===================================================================

class ProcessedMessages::_Internal {
 public:
};

ProcessedMessages::ProcessedMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.ProcessedMessages)
}
ProcessedMessages::ProcessedMessages(const ProcessedMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessedMessages* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messageid_){from._impl_.messageid_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.ProcessedMessages)
}

inline void ProcessedMessages::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messageid_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProcessedMessages::~ProcessedMessages() {
  // @@protoc_insertion_point(destructor:tunnelbroker.ProcessedMessages)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessedMessages::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messageid_.~RepeatedPtrField();
}

void ProcessedMessages::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessedMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.ProcessedMessages)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messageid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessedMessages::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string messageID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_messageid();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.ProcessedMessages.messageID"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessedMessages::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.ProcessedMessages)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string messageID = 1;
  for (int i = 0, n = this->_internal_messageid_size(); i < n; i++) {
    const auto& s = this->_internal_messageid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.ProcessedMessages.messageID");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.ProcessedMessages)
  return target;
}

size_t ProcessedMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.ProcessedMessages)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string messageID = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.messageid_.size());
  for (int i = 0, n = _impl_.messageid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.messageid_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessedMessages::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessedMessages::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessedMessages::GetClassData() const { return &_class_data_; }


void ProcessedMessages::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessedMessages*>(&to_msg);
  auto& from = static_cast<const ProcessedMessages&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.ProcessedMessages)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messageid_.MergeFrom(from._impl_.messageid_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessedMessages::CopyFrom(const ProcessedMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.ProcessedMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessedMessages::IsInitialized() const {
  return true;
}

void ProcessedMessages::InternalSwap(ProcessedMessages* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messageid_.InternalSwap(&other->_impl_.messageid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessedMessages::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[8]);
}

// ===================================================================

class MessageToTunnelbrokerStruct::_Internal {
 public:
};

MessageToTunnelbrokerStruct::MessageToTunnelbrokerStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.MessageToTunnelbrokerStruct)
}
MessageToTunnelbrokerStruct::MessageToTunnelbrokerStruct(const MessageToTunnelbrokerStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageToTunnelbrokerStruct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blobhashes_){from._impl_.blobhashes_}
    , decltype(_impl_.messageid_){}
    , decltype(_impl_.todeviceid_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_messageid().empty()) {
    _this->_impl_.messageid_.Set(from._internal_messageid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.todeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.todeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_todeviceid().empty()) {
    _this->_impl_.todeviceid_.Set(from._internal_todeviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.MessageToTunnelbrokerStruct)
}

inline void MessageToTunnelbrokerStruct::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blobhashes_){arena}
    , decltype(_impl_.messageid_){}
    , decltype(_impl_.todeviceid_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.todeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.todeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageToTunnelbrokerStruct::~MessageToTunnelbrokerStruct() {
  // @@protoc_insertion_point(destructor:tunnelbroker.MessageToTunnelbrokerStruct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageToTunnelbrokerStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blobhashes_.~RepeatedPtrField();
  _impl_.messageid_.Destroy();
  _impl_.todeviceid_.Destroy();
  _impl_.payload_.Destroy();
}

void MessageToTunnelbrokerStruct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageToTunnelbrokerStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.MessageToTunnelbrokerStruct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blobhashes_.Clear();
  _impl_.messageid_.ClearToEmpty();
  _impl_.todeviceid_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToTunnelbrokerStruct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string messageID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_messageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.MessageToTunnelbrokerStruct.messageID"));
        } else
          goto handle_unusual;
        continue;
      // string toDeviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_todeviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.MessageToTunnelbrokerStruct.toDeviceID"));
        } else
          goto handle_unusual;
        continue;
      // string payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.MessageToTunnelbrokerStruct.payload"));
        } else
          goto handle_unusual;
        continue;
      // repeated string blobHashes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blobhashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.MessageToTunnelbrokerStruct.blobHashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageToTunnelbrokerStruct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.MessageToTunnelbrokerStruct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string messageID = 1;
  if (!this->_internal_messageid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_messageid().data(), static_cast<int>(this->_internal_messageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToTunnelbrokerStruct.messageID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_messageid(), target);
  }

  // string toDeviceID = 2;
  if (!this->_internal_todeviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_todeviceid().data(), static_cast<int>(this->_internal_todeviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToTunnelbrokerStruct.toDeviceID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_todeviceid(), target);
  }

  // string payload = 3;
  if (!this->_internal_payload().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToTunnelbrokerStruct.payload");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // repeated string blobHashes = 4;
  for (int i = 0, n = this->_internal_blobhashes_size(); i < n; i++) {
    const auto& s = this->_internal_blobhashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToTunnelbrokerStruct.blobHashes");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.MessageToTunnelbrokerStruct)
  return target;
}

size_t MessageToTunnelbrokerStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.MessageToTunnelbrokerStruct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string blobHashes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blobhashes_.size());
  for (int i = 0, n = _impl_.blobhashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blobhashes_.Get(i));
  }

  // string messageID = 1;
  if (!this->_internal_messageid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_messageid());
  }

  // string toDeviceID = 2;
  if (!this->_internal_todeviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_todeviceid());
  }

  // string payload = 3;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageToTunnelbrokerStruct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageToTunnelbrokerStruct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageToTunnelbrokerStruct::GetClassData() const { return &_class_data_; }


void MessageToTunnelbrokerStruct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageToTunnelbrokerStruct*>(&to_msg);
  auto& from = static_cast<const MessageToTunnelbrokerStruct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.MessageToTunnelbrokerStruct)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blobhashes_.MergeFrom(from._impl_.blobhashes_);
  if (!from._internal_messageid().empty()) {
    _this->_internal_set_messageid(from._internal_messageid());
  }
  if (!from._internal_todeviceid().empty()) {
    _this->_internal_set_todeviceid(from._internal_todeviceid());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageToTunnelbrokerStruct::CopyFrom(const MessageToTunnelbrokerStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.MessageToTunnelbrokerStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToTunnelbrokerStruct::IsInitialized() const {
  return true;
}

void MessageToTunnelbrokerStruct::InternalSwap(MessageToTunnelbrokerStruct* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blobhashes_.InternalSwap(&other->_impl_.blobhashes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.messageid_, lhs_arena,
      &other->_impl_.messageid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.todeviceid_, lhs_arena,
      &other->_impl_.todeviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToTunnelbrokerStruct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[9]);
}

// ===================================================================

class MessagesToSend::_Internal {
 public:
};

MessagesToSend::MessagesToSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.MessagesToSend)
}
MessagesToSend::MessagesToSend(const MessagesToSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessagesToSend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.MessagesToSend)
}

inline void MessagesToSend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessagesToSend::~MessagesToSend() {
  // @@protoc_insertion_point(destructor:tunnelbroker.MessagesToSend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessagesToSend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
}

void MessagesToSend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessagesToSend::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.MessagesToSend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagesToSend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tunnelbroker.MessageToTunnelbrokerStruct messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessagesToSend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.MessagesToSend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tunnelbroker.MessageToTunnelbrokerStruct messages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.MessagesToSend)
  return target;
}

size_t MessagesToSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.MessagesToSend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tunnelbroker.MessageToTunnelbrokerStruct messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessagesToSend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessagesToSend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessagesToSend::GetClassData() const { return &_class_data_; }


void MessagesToSend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessagesToSend*>(&to_msg);
  auto& from = static_cast<const MessagesToSend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.MessagesToSend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessagesToSend::CopyFrom(const MessagesToSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.MessagesToSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagesToSend::IsInitialized() const {
  return true;
}

void MessagesToSend::InternalSwap(MessagesToSend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagesToSend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[10]);
}

// ===================================================================

class MessageToTunnelbroker::_Internal {
 public:
  static const ::tunnelbroker::MessagesToSend& messagestosend(const MessageToTunnelbroker* msg);
  static const ::tunnelbroker::ProcessedMessages& processedmessages(const MessageToTunnelbroker* msg);
};

const ::tunnelbroker::MessagesToSend&
MessageToTunnelbroker::_Internal::messagestosend(const MessageToTunnelbroker* msg) {
  return *msg->_impl_.data_.messagestosend_;
}
const ::tunnelbroker::ProcessedMessages&
MessageToTunnelbroker::_Internal::processedmessages(const MessageToTunnelbroker* msg) {
  return *msg->_impl_.data_.processedmessages_;
}
void MessageToTunnelbroker::set_allocated_messagestosend(::tunnelbroker::MessagesToSend* messagestosend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (messagestosend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(messagestosend);
    if (message_arena != submessage_arena) {
      messagestosend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messagestosend, submessage_arena);
    }
    set_has_messagestosend();
    _impl_.data_.messagestosend_ = messagestosend;
  }
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.MessageToTunnelbroker.messagesToSend)
}
void MessageToTunnelbroker::set_allocated_processedmessages(::tunnelbroker::ProcessedMessages* processedmessages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (processedmessages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(processedmessages);
    if (message_arena != submessage_arena) {
      processedmessages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processedmessages, submessage_arena);
    }
    set_has_processedmessages();
    _impl_.data_.processedmessages_ = processedmessages;
  }
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.MessageToTunnelbroker.processedMessages)
}
MessageToTunnelbroker::MessageToTunnelbroker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.MessageToTunnelbroker)
}
MessageToTunnelbroker::MessageToTunnelbroker(const MessageToTunnelbroker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageToTunnelbroker* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kMessagesToSend: {
      _this->_internal_mutable_messagestosend()->::tunnelbroker::MessagesToSend::MergeFrom(
          from._internal_messagestosend());
      break;
    }
    case kProcessedMessages: {
      _this->_internal_mutable_processedmessages()->::tunnelbroker::ProcessedMessages::MergeFrom(
          from._internal_processedmessages());
      break;
    }
    case kNewNotifyToken: {
      _this->_internal_set_newnotifytoken(from._internal_newnotifytoken());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.MessageToTunnelbroker)
}

inline void MessageToTunnelbroker::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

MessageToTunnelbroker::~MessageToTunnelbroker() {
  // @@protoc_insertion_point(destructor:tunnelbroker.MessageToTunnelbroker)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageToTunnelbroker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void MessageToTunnelbroker::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageToTunnelbroker::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:tunnelbroker.MessageToTunnelbroker)
  switch (data_case()) {
    case kMessagesToSend: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.messagestosend_;
      }
      break;
    }
    case kProcessedMessages: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.processedmessages_;
      }
      break;
    }
    case kNewNotifyToken: {
      _impl_.data_.newnotifytoken_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void MessageToTunnelbroker::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.MessageToTunnelbroker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToTunnelbroker::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tunnelbroker.MessagesToSend messagesToSend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_messagestosend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tunnelbroker.ProcessedMessages processedMessages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_processedmessages(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string newNotifyToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_newnotifytoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.MessageToTunnelbroker.newNotifyToken"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageToTunnelbroker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.MessageToTunnelbroker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tunnelbroker.MessagesToSend messagesToSend = 1;
  if (_internal_has_messagestosend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::messagestosend(this),
        _Internal::messagestosend(this).GetCachedSize(), target, stream);
  }

  // .tunnelbroker.ProcessedMessages processedMessages = 2;
  if (_internal_has_processedmessages()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::processedmessages(this),
        _Internal::processedmessages(this).GetCachedSize(), target, stream);
  }

  // string newNotifyToken = 3;
  if (_internal_has_newnotifytoken()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newnotifytoken().data(), static_cast<int>(this->_internal_newnotifytoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToTunnelbroker.newNotifyToken");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_newnotifytoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.MessageToTunnelbroker)
  return target;
}

size_t MessageToTunnelbroker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.MessageToTunnelbroker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .tunnelbroker.MessagesToSend messagesToSend = 1;
    case kMessagesToSend: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.messagestosend_);
      break;
    }
    // .tunnelbroker.ProcessedMessages processedMessages = 2;
    case kProcessedMessages: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.processedmessages_);
      break;
    }
    // string newNotifyToken = 3;
    case kNewNotifyToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_newnotifytoken());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageToTunnelbroker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageToTunnelbroker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageToTunnelbroker::GetClassData() const { return &_class_data_; }


void MessageToTunnelbroker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageToTunnelbroker*>(&to_msg);
  auto& from = static_cast<const MessageToTunnelbroker&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.MessageToTunnelbroker)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kMessagesToSend: {
      _this->_internal_mutable_messagestosend()->::tunnelbroker::MessagesToSend::MergeFrom(
          from._internal_messagestosend());
      break;
    }
    case kProcessedMessages: {
      _this->_internal_mutable_processedmessages()->::tunnelbroker::ProcessedMessages::MergeFrom(
          from._internal_processedmessages());
      break;
    }
    case kNewNotifyToken: {
      _this->_internal_set_newnotifytoken(from._internal_newnotifytoken());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageToTunnelbroker::CopyFrom(const MessageToTunnelbroker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.MessageToTunnelbroker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToTunnelbroker::IsInitialized() const {
  return true;
}

void MessageToTunnelbroker::InternalSwap(MessageToTunnelbroker* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToTunnelbroker::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[11]);
}

// ===================================================================

class MessageToClientStruct::_Internal {
 public:
};

MessageToClientStruct::MessageToClientStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.MessageToClientStruct)
}
MessageToClientStruct::MessageToClientStruct(const MessageToClientStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageToClientStruct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blobhashes_){from._impl_.blobhashes_}
    , decltype(_impl_.messageid_){}
    , decltype(_impl_.fromdeviceid_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_messageid().empty()) {
    _this->_impl_.messageid_.Set(from._internal_messageid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fromdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fromdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fromdeviceid().empty()) {
    _this->_impl_.fromdeviceid_.Set(from._internal_fromdeviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.MessageToClientStruct)
}

inline void MessageToClientStruct::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blobhashes_){arena}
    , decltype(_impl_.messageid_){}
    , decltype(_impl_.fromdeviceid_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fromdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fromdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageToClientStruct::~MessageToClientStruct() {
  // @@protoc_insertion_point(destructor:tunnelbroker.MessageToClientStruct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageToClientStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blobhashes_.~RepeatedPtrField();
  _impl_.messageid_.Destroy();
  _impl_.fromdeviceid_.Destroy();
  _impl_.payload_.Destroy();
}

void MessageToClientStruct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageToClientStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.MessageToClientStruct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blobhashes_.Clear();
  _impl_.messageid_.ClearToEmpty();
  _impl_.fromdeviceid_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToClientStruct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string messageID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_messageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.MessageToClientStruct.messageID"));
        } else
          goto handle_unusual;
        continue;
      // string fromDeviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fromdeviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.MessageToClientStruct.fromDeviceID"));
        } else
          goto handle_unusual;
        continue;
      // string payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.MessageToClientStruct.payload"));
        } else
          goto handle_unusual;
        continue;
      // repeated string blobHashes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blobhashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.MessageToClientStruct.blobHashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageToClientStruct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.MessageToClientStruct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string messageID = 1;
  if (!this->_internal_messageid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_messageid().data(), static_cast<int>(this->_internal_messageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToClientStruct.messageID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_messageid(), target);
  }

  // string fromDeviceID = 2;
  if (!this->_internal_fromdeviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fromdeviceid().data(), static_cast<int>(this->_internal_fromdeviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToClientStruct.fromDeviceID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fromdeviceid(), target);
  }

  // string payload = 3;
  if (!this->_internal_payload().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToClientStruct.payload");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // repeated string blobHashes = 4;
  for (int i = 0, n = this->_internal_blobhashes_size(); i < n; i++) {
    const auto& s = this->_internal_blobhashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToClientStruct.blobHashes");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.MessageToClientStruct)
  return target;
}

size_t MessageToClientStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.MessageToClientStruct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string blobHashes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blobhashes_.size());
  for (int i = 0, n = _impl_.blobhashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blobhashes_.Get(i));
  }

  // string messageID = 1;
  if (!this->_internal_messageid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_messageid());
  }

  // string fromDeviceID = 2;
  if (!this->_internal_fromdeviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fromdeviceid());
  }

  // string payload = 3;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageToClientStruct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageToClientStruct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageToClientStruct::GetClassData() const { return &_class_data_; }


void MessageToClientStruct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageToClientStruct*>(&to_msg);
  auto& from = static_cast<const MessageToClientStruct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.MessageToClientStruct)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blobhashes_.MergeFrom(from._impl_.blobhashes_);
  if (!from._internal_messageid().empty()) {
    _this->_internal_set_messageid(from._internal_messageid());
  }
  if (!from._internal_fromdeviceid().empty()) {
    _this->_internal_set_fromdeviceid(from._internal_fromdeviceid());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageToClientStruct::CopyFrom(const MessageToClientStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.MessageToClientStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToClientStruct::IsInitialized() const {
  return true;
}

void MessageToClientStruct::InternalSwap(MessageToClientStruct* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blobhashes_.InternalSwap(&other->_impl_.blobhashes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.messageid_, lhs_arena,
      &other->_impl_.messageid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fromdeviceid_, lhs_arena,
      &other->_impl_.fromdeviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToClientStruct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[12]);
}

// ===================================================================

class MessagesToDeliver::_Internal {
 public:
};

MessagesToDeliver::MessagesToDeliver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.MessagesToDeliver)
}
MessagesToDeliver::MessagesToDeliver(const MessagesToDeliver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessagesToDeliver* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.MessagesToDeliver)
}

inline void MessagesToDeliver::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessagesToDeliver::~MessagesToDeliver() {
  // @@protoc_insertion_point(destructor:tunnelbroker.MessagesToDeliver)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessagesToDeliver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
}

void MessagesToDeliver::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessagesToDeliver::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.MessagesToDeliver)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagesToDeliver::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tunnelbroker.MessageToClientStruct messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessagesToDeliver::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.MessagesToDeliver)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tunnelbroker.MessageToClientStruct messages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.MessagesToDeliver)
  return target;
}

size_t MessagesToDeliver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.MessagesToDeliver)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tunnelbroker.MessageToClientStruct messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessagesToDeliver::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessagesToDeliver::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessagesToDeliver::GetClassData() const { return &_class_data_; }


void MessagesToDeliver::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessagesToDeliver*>(&to_msg);
  auto& from = static_cast<const MessagesToDeliver&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.MessagesToDeliver)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessagesToDeliver::CopyFrom(const MessagesToDeliver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.MessagesToDeliver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagesToDeliver::IsInitialized() const {
  return true;
}

void MessagesToDeliver::InternalSwap(MessagesToDeliver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagesToDeliver::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[13]);
}

// ===================================================================

class MessageToClient::_Internal {
 public:
  static const ::tunnelbroker::MessagesToDeliver& messagestodeliver(const MessageToClient* msg);
  static const ::tunnelbroker::ProcessedMessages& processedmessages(const MessageToClient* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Empty& newnotifytokenrequired(const MessageToClient* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Empty& ping(const MessageToClient* msg);
};

const ::tunnelbroker::MessagesToDeliver&
MessageToClient::_Internal::messagestodeliver(const MessageToClient* msg) {
  return *msg->_impl_.data_.messagestodeliver_;
}
const ::tunnelbroker::ProcessedMessages&
MessageToClient::_Internal::processedmessages(const MessageToClient* msg) {
  return *msg->_impl_.data_.processedmessages_;
}
const ::PROTOBUF_NAMESPACE_ID::Empty&
MessageToClient::_Internal::newnotifytokenrequired(const MessageToClient* msg) {
  return *msg->_impl_.data_.newnotifytokenrequired_;
}
const ::PROTOBUF_NAMESPACE_ID::Empty&
MessageToClient::_Internal::ping(const MessageToClient* msg) {
  return *msg->_impl_.data_.ping_;
}
void MessageToClient::set_allocated_messagestodeliver(::tunnelbroker::MessagesToDeliver* messagestodeliver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (messagestodeliver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(messagestodeliver);
    if (message_arena != submessage_arena) {
      messagestodeliver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messagestodeliver, submessage_arena);
    }
    set_has_messagestodeliver();
    _impl_.data_.messagestodeliver_ = messagestodeliver;
  }
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.MessageToClient.messagesToDeliver)
}
void MessageToClient::set_allocated_processedmessages(::tunnelbroker::ProcessedMessages* processedmessages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (processedmessages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(processedmessages);
    if (message_arena != submessage_arena) {
      processedmessages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processedmessages, submessage_arena);
    }
    set_has_processedmessages();
    _impl_.data_.processedmessages_ = processedmessages;
  }
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.MessageToClient.processedMessages)
}
void MessageToClient::set_allocated_newnotifytokenrequired(::PROTOBUF_NAMESPACE_ID::Empty* newnotifytokenrequired) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (newnotifytokenrequired) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newnotifytokenrequired));
    if (message_arena != submessage_arena) {
      newnotifytokenrequired = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newnotifytokenrequired, submessage_arena);
    }
    set_has_newnotifytokenrequired();
    _impl_.data_.newnotifytokenrequired_ = newnotifytokenrequired;
  }
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.MessageToClient.newNotifyTokenRequired)
}
void MessageToClient::clear_newnotifytokenrequired() {
  if (_internal_has_newnotifytokenrequired()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.newnotifytokenrequired_;
    }
    clear_has_data();
  }
}
void MessageToClient::set_allocated_ping(::PROTOBUF_NAMESPACE_ID::Empty* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping));
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    _impl_.data_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.MessageToClient.ping)
}
void MessageToClient::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.ping_;
    }
    clear_has_data();
  }
}
MessageToClient::MessageToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.MessageToClient)
}
MessageToClient::MessageToClient(const MessageToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageToClient* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kMessagesToDeliver: {
      _this->_internal_mutable_messagestodeliver()->::tunnelbroker::MessagesToDeliver::MergeFrom(
          from._internal_messagestodeliver());
      break;
    }
    case kProcessedMessages: {
      _this->_internal_mutable_processedmessages()->::tunnelbroker::ProcessedMessages::MergeFrom(
          from._internal_processedmessages());
      break;
    }
    case kNewNotifyTokenRequired: {
      _this->_internal_mutable_newnotifytokenrequired()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_newnotifytokenrequired());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_ping());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.MessageToClient)
}

inline void MessageToClient::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

MessageToClient::~MessageToClient() {
  // @@protoc_insertion_point(destructor:tunnelbroker.MessageToClient)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void MessageToClient::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageToClient::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:tunnelbroker.MessageToClient)
  switch (data_case()) {
    case kMessagesToDeliver: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.messagestodeliver_;
      }
      break;
    }
    case kProcessedMessages: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.processedmessages_;
      }
      break;
    }
    case kNewNotifyTokenRequired: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.newnotifytokenrequired_;
      }
      break;
    }
    case kPing: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.ping_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void MessageToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.MessageToClient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToClient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tunnelbroker.MessagesToDeliver messagesToDeliver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_messagestodeliver(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tunnelbroker.ProcessedMessages processedMessages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_processedmessages(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Empty newNotifyTokenRequired = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_newnotifytokenrequired(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Empty ping = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageToClient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.MessageToClient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tunnelbroker.MessagesToDeliver messagesToDeliver = 1;
  if (_internal_has_messagestodeliver()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::messagestodeliver(this),
        _Internal::messagestodeliver(this).GetCachedSize(), target, stream);
  }

  // .tunnelbroker.ProcessedMessages processedMessages = 2;
  if (_internal_has_processedmessages()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::processedmessages(this),
        _Internal::processedmessages(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Empty newNotifyTokenRequired = 3;
  if (_internal_has_newnotifytokenrequired()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::newnotifytokenrequired(this),
        _Internal::newnotifytokenrequired(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Empty ping = 4;
  if (_internal_has_ping()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ping(this),
        _Internal::ping(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.MessageToClient)
  return target;
}

size_t MessageToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.MessageToClient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .tunnelbroker.MessagesToDeliver messagesToDeliver = 1;
    case kMessagesToDeliver: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.messagestodeliver_);
      break;
    }
    // .tunnelbroker.ProcessedMessages processedMessages = 2;
    case kProcessedMessages: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.processedmessages_);
      break;
    }
    // .google.protobuf.Empty newNotifyTokenRequired = 3;
    case kNewNotifyTokenRequired: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.newnotifytokenrequired_);
      break;
    }
    // .google.protobuf.Empty ping = 4;
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.ping_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageToClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageToClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageToClient::GetClassData() const { return &_class_data_; }


void MessageToClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageToClient*>(&to_msg);
  auto& from = static_cast<const MessageToClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.MessageToClient)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kMessagesToDeliver: {
      _this->_internal_mutable_messagestodeliver()->::tunnelbroker::MessagesToDeliver::MergeFrom(
          from._internal_messagestodeliver());
      break;
    }
    case kProcessedMessages: {
      _this->_internal_mutable_processedmessages()->::tunnelbroker::ProcessedMessages::MergeFrom(
          from._internal_processedmessages());
      break;
    }
    case kNewNotifyTokenRequired: {
      _this->_internal_mutable_newnotifytokenrequired()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_newnotifytokenrequired());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_ping());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageToClient::CopyFrom(const MessageToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.MessageToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToClient::IsInitialized() const {
  return true;
}

void MessageToClient::InternalSwap(MessageToClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToClient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[14]);
}

// ===================================================================

class CheckRequest::_Internal {
 public:
};

CheckRequest::CheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.CheckRequest)
}
CheckRequest::CheckRequest(const CheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.devicetoken_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.devicetoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicetoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_devicetoken().empty()) {
    _this->_impl_.devicetoken_.Set(from._internal_devicetoken(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.CheckRequest)
}

inline void CheckRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.devicetoken_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicetoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicetoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CheckRequest::~CheckRequest() {
  // @@protoc_insertion_point(destructor:tunnelbroker.CheckRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
  _impl_.devicetoken_.Destroy();
}

void CheckRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.CheckRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _impl_.devicetoken_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.CheckRequest.userId"));
        } else
          goto handle_unusual;
        continue;
      // string deviceToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_devicetoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.CheckRequest.deviceToken"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.CheckRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userId = 1;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.CheckRequest.userId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // string deviceToken = 2;
  if (!this->_internal_devicetoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicetoken().data(), static_cast<int>(this->_internal_devicetoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.CheckRequest.deviceToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_devicetoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.CheckRequest)
  return target;
}

size_t CheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.CheckRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userId = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string deviceToken = 2;
  if (!this->_internal_devicetoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicetoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckRequest::GetClassData() const { return &_class_data_; }


void CheckRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckRequest*>(&to_msg);
  auto& from = static_cast<const CheckRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.CheckRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (!from._internal_devicetoken().empty()) {
    _this->_internal_set_devicetoken(from._internal_devicetoken());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckRequest::CopyFrom(const CheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.CheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRequest::IsInitialized() const {
  return true;
}

void CheckRequest::InternalSwap(CheckRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userid_, lhs_arena,
      &other->_impl_.userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicetoken_, lhs_arena,
      &other->_impl_.devicetoken_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[15]);
}

// ===================================================================

class CheckResponse::_Internal {
 public:
};

CheckResponse::CheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.CheckResponse)
}
CheckResponse::CheckResponse(const CheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.checkresponsetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.checkresponsetype_ = from._impl_.checkresponsetype_;
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.CheckResponse)
}

inline void CheckResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.checkresponsetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CheckResponse::~CheckResponse() {
  // @@protoc_insertion_point(destructor:tunnelbroker.CheckResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CheckResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.CheckResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.checkresponsetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tunnelbroker.CheckResponseType checkResponseType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_checkresponsetype(static_cast<::tunnelbroker::CheckResponseType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.CheckResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tunnelbroker.CheckResponseType checkResponseType = 1;
  if (this->_internal_checkresponsetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_checkresponsetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.CheckResponse)
  return target;
}

size_t CheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.CheckResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tunnelbroker.CheckResponseType checkResponseType = 1;
  if (this->_internal_checkresponsetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_checkresponsetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckResponse::GetClassData() const { return &_class_data_; }


void CheckResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckResponse*>(&to_msg);
  auto& from = static_cast<const CheckResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.CheckResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_checkresponsetype() != 0) {
    _this->_internal_set_checkresponsetype(from._internal_checkresponsetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckResponse::CopyFrom(const CheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.CheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResponse::IsInitialized() const {
  return true;
}

void CheckResponse::InternalSwap(CheckResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.checkresponsetype_, other->_impl_.checkresponsetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[16]);
}

// ===================================================================

class NewPrimaryRequest::_Internal {
 public:
};

NewPrimaryRequest::NewPrimaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.NewPrimaryRequest)
}
NewPrimaryRequest::NewPrimaryRequest(const NewPrimaryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewPrimaryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.devicetoken_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.devicetoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicetoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_devicetoken().empty()) {
    _this->_impl_.devicetoken_.Set(from._internal_devicetoken(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.NewPrimaryRequest)
}

inline void NewPrimaryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.devicetoken_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicetoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicetoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewPrimaryRequest::~NewPrimaryRequest() {
  // @@protoc_insertion_point(destructor:tunnelbroker.NewPrimaryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewPrimaryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
  _impl_.devicetoken_.Destroy();
}

void NewPrimaryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewPrimaryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.NewPrimaryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _impl_.devicetoken_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewPrimaryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.NewPrimaryRequest.userId"));
        } else
          goto handle_unusual;
        continue;
      // string deviceToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_devicetoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.NewPrimaryRequest.deviceToken"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewPrimaryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.NewPrimaryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userId = 1;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewPrimaryRequest.userId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // string deviceToken = 2;
  if (!this->_internal_devicetoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicetoken().data(), static_cast<int>(this->_internal_devicetoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewPrimaryRequest.deviceToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_devicetoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.NewPrimaryRequest)
  return target;
}

size_t NewPrimaryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.NewPrimaryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userId = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string deviceToken = 2;
  if (!this->_internal_devicetoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicetoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewPrimaryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewPrimaryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewPrimaryRequest::GetClassData() const { return &_class_data_; }


void NewPrimaryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewPrimaryRequest*>(&to_msg);
  auto& from = static_cast<const NewPrimaryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.NewPrimaryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (!from._internal_devicetoken().empty()) {
    _this->_internal_set_devicetoken(from._internal_devicetoken());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewPrimaryRequest::CopyFrom(const NewPrimaryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.NewPrimaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewPrimaryRequest::IsInitialized() const {
  return true;
}

void NewPrimaryRequest::InternalSwap(NewPrimaryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userid_, lhs_arena,
      &other->_impl_.userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicetoken_, lhs_arena,
      &other->_impl_.devicetoken_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NewPrimaryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[17]);
}

// ===================================================================

class NewPrimaryResponse::_Internal {
 public:
};

NewPrimaryResponse::NewPrimaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.NewPrimaryResponse)
}
NewPrimaryResponse::NewPrimaryResponse(const NewPrimaryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewPrimaryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.NewPrimaryResponse)
}

inline void NewPrimaryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NewPrimaryResponse::~NewPrimaryResponse() {
  // @@protoc_insertion_point(destructor:tunnelbroker.NewPrimaryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewPrimaryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NewPrimaryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewPrimaryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.NewPrimaryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewPrimaryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewPrimaryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.NewPrimaryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.NewPrimaryResponse)
  return target;
}

size_t NewPrimaryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.NewPrimaryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewPrimaryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewPrimaryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewPrimaryResponse::GetClassData() const { return &_class_data_; }


void NewPrimaryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewPrimaryResponse*>(&to_msg);
  auto& from = static_cast<const NewPrimaryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.NewPrimaryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewPrimaryResponse::CopyFrom(const NewPrimaryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.NewPrimaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewPrimaryResponse::IsInitialized() const {
  return true;
}

void NewPrimaryResponse::InternalSwap(NewPrimaryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewPrimaryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[18]);
}

// ===================================================================

class PongRequest::_Internal {
 public:
};

PongRequest::PongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.PongRequest)
}
PongRequest::PongRequest(const PongRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PongRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.devicetoken_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.devicetoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicetoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_devicetoken().empty()) {
    _this->_impl_.devicetoken_.Set(from._internal_devicetoken(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.PongRequest)
}

inline void PongRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.devicetoken_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicetoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicetoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PongRequest::~PongRequest() {
  // @@protoc_insertion_point(destructor:tunnelbroker.PongRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PongRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
  _impl_.devicetoken_.Destroy();
}

void PongRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PongRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.PongRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _impl_.devicetoken_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PongRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.PongRequest.userId"));
        } else
          goto handle_unusual;
        continue;
      // string deviceToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_devicetoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tunnelbroker.PongRequest.deviceToken"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PongRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.PongRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userId = 1;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.PongRequest.userId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // string deviceToken = 2;
  if (!this->_internal_devicetoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicetoken().data(), static_cast<int>(this->_internal_devicetoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.PongRequest.deviceToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_devicetoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.PongRequest)
  return target;
}

size_t PongRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.PongRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userId = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string deviceToken = 2;
  if (!this->_internal_devicetoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicetoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PongRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PongRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PongRequest::GetClassData() const { return &_class_data_; }


void PongRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PongRequest*>(&to_msg);
  auto& from = static_cast<const PongRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.PongRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (!from._internal_devicetoken().empty()) {
    _this->_internal_set_devicetoken(from._internal_devicetoken());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PongRequest::CopyFrom(const PongRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.PongRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PongRequest::IsInitialized() const {
  return true;
}

void PongRequest::InternalSwap(PongRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userid_, lhs_arena,
      &other->_impl_.userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicetoken_, lhs_arena,
      &other->_impl_.devicetoken_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PongRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tunnelbroker_2eproto_getter, &descriptor_table_tunnelbroker_2eproto_once,
      file_level_metadata_tunnelbroker_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tunnelbroker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tunnelbroker::SessionSignatureRequest*
Arena::CreateMaybeMessage< ::tunnelbroker::SessionSignatureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::SessionSignatureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::SessionSignatureResponse*
Arena::CreateMaybeMessage< ::tunnelbroker::SessionSignatureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::SessionSignatureResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::NewSessionRequest*
Arena::CreateMaybeMessage< ::tunnelbroker::NewSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::NewSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::NewSessionResponse*
Arena::CreateMaybeMessage< ::tunnelbroker::NewSessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::NewSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::SendRequest*
Arena::CreateMaybeMessage< ::tunnelbroker::SendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::SendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::GetRequest*
Arena::CreateMaybeMessage< ::tunnelbroker::GetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::GetResponseMessage*
Arena::CreateMaybeMessage< ::tunnelbroker::GetResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::GetResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::GetResponse*
Arena::CreateMaybeMessage< ::tunnelbroker::GetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::GetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::ProcessedMessages*
Arena::CreateMaybeMessage< ::tunnelbroker::ProcessedMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::ProcessedMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::MessageToTunnelbrokerStruct*
Arena::CreateMaybeMessage< ::tunnelbroker::MessageToTunnelbrokerStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::MessageToTunnelbrokerStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::MessagesToSend*
Arena::CreateMaybeMessage< ::tunnelbroker::MessagesToSend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::MessagesToSend >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::MessageToTunnelbroker*
Arena::CreateMaybeMessage< ::tunnelbroker::MessageToTunnelbroker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::MessageToTunnelbroker >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::MessageToClientStruct*
Arena::CreateMaybeMessage< ::tunnelbroker::MessageToClientStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::MessageToClientStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::MessagesToDeliver*
Arena::CreateMaybeMessage< ::tunnelbroker::MessagesToDeliver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::MessagesToDeliver >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::MessageToClient*
Arena::CreateMaybeMessage< ::tunnelbroker::MessageToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::MessageToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::CheckRequest*
Arena::CreateMaybeMessage< ::tunnelbroker::CheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::CheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::CheckResponse*
Arena::CreateMaybeMessage< ::tunnelbroker::CheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::CheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::NewPrimaryRequest*
Arena::CreateMaybeMessage< ::tunnelbroker::NewPrimaryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::NewPrimaryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::NewPrimaryResponse*
Arena::CreateMaybeMessage< ::tunnelbroker::NewPrimaryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::NewPrimaryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::PongRequest*
Arena::CreateMaybeMessage< ::tunnelbroker::PongRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::PongRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
