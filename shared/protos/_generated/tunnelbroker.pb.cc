// @generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tunnelbroker.proto

#include "tunnelbroker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tunnelbroker {
constexpr SessionSignatureRequest::SessionSignatureRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SessionSignatureRequestDefaultTypeInternal {
  constexpr SessionSignatureRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionSignatureRequestDefaultTypeInternal() {}
  union {
    SessionSignatureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionSignatureRequestDefaultTypeInternal _SessionSignatureRequest_default_instance_;
constexpr SessionSignatureResponse::SessionSignatureResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tosign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SessionSignatureResponseDefaultTypeInternal {
  constexpr SessionSignatureResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionSignatureResponseDefaultTypeInternal() {}
  union {
    SessionSignatureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionSignatureResponseDefaultTypeInternal _SessionSignatureResponse_default_instance_;
constexpr NewSessionRequest::NewSessionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , publickey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notifytoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviceappversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviceos_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , devicetype_(0)
{}
struct NewSessionRequestDefaultTypeInternal {
  constexpr NewSessionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewSessionRequestDefaultTypeInternal() {}
  union {
    NewSessionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewSessionRequestDefaultTypeInternal _NewSessionRequest_default_instance_;
constexpr NewSessionResponse::NewSessionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NewSessionResponseDefaultTypeInternal {
  constexpr NewSessionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewSessionResponseDefaultTypeInternal() {}
  union {
    NewSessionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewSessionResponseDefaultTypeInternal _NewSessionResponse_default_instance_;
constexpr ProcessedMessages::ProcessedMessages(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messageid_(){}
struct ProcessedMessagesDefaultTypeInternal {
  constexpr ProcessedMessagesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessedMessagesDefaultTypeInternal() {}
  union {
    ProcessedMessages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessedMessagesDefaultTypeInternal _ProcessedMessages_default_instance_;
constexpr MessageToTunnelbrokerStruct::MessageToTunnelbrokerStruct(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blobhashes_()
  , messageid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , todeviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MessageToTunnelbrokerStructDefaultTypeInternal {
  constexpr MessageToTunnelbrokerStructDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageToTunnelbrokerStructDefaultTypeInternal() {}
  union {
    MessageToTunnelbrokerStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageToTunnelbrokerStructDefaultTypeInternal _MessageToTunnelbrokerStruct_default_instance_;
constexpr MessagesToSend::MessagesToSend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_(){}
struct MessagesToSendDefaultTypeInternal {
  constexpr MessagesToSendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessagesToSendDefaultTypeInternal() {}
  union {
    MessagesToSend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessagesToSendDefaultTypeInternal _MessagesToSend_default_instance_;
constexpr MessageToTunnelbroker::MessageToTunnelbroker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MessageToTunnelbrokerDefaultTypeInternal {
  constexpr MessageToTunnelbrokerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageToTunnelbrokerDefaultTypeInternal() {}
  union {
    MessageToTunnelbroker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageToTunnelbrokerDefaultTypeInternal _MessageToTunnelbroker_default_instance_;
constexpr MessageToClientStruct::MessageToClientStruct(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blobhashes_()
  , messageid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fromdeviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MessageToClientStructDefaultTypeInternal {
  constexpr MessageToClientStructDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageToClientStructDefaultTypeInternal() {}
  union {
    MessageToClientStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageToClientStructDefaultTypeInternal _MessageToClientStruct_default_instance_;
constexpr MessagesToDeliver::MessagesToDeliver(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_(){}
struct MessagesToDeliverDefaultTypeInternal {
  constexpr MessagesToDeliverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessagesToDeliverDefaultTypeInternal() {}
  union {
    MessagesToDeliver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessagesToDeliverDefaultTypeInternal _MessagesToDeliver_default_instance_;
constexpr MessageToClient::MessageToClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MessageToClientDefaultTypeInternal {
  constexpr MessageToClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageToClientDefaultTypeInternal() {}
  union {
    MessageToClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageToClientDefaultTypeInternal _MessageToClient_default_instance_;
}  // namespace tunnelbroker
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tunnelbroker_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tunnelbroker_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tunnelbroker_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tunnelbroker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::SessionSignatureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::SessionSignatureRequest, deviceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::SessionSignatureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::SessionSignatureResponse, tosign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, deviceid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, publickey_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, signature_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, notifytoken_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, devicetype_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, deviceappversion_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionRequest, deviceos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::NewSessionResponse, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::ProcessedMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::ProcessedMessages, messageid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbrokerStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbrokerStruct, messageid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbrokerStruct, todeviceid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbrokerStruct, payload_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbrokerStruct, blobhashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessagesToSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessagesToSend, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbroker, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbroker, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToTunnelbroker, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClientStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClientStruct, messageid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClientStruct, fromdeviceid_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClientStruct, payload_),
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClientStruct, blobhashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessagesToDeliver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessagesToDeliver, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClient, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tunnelbroker::MessageToClient, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tunnelbroker::SessionSignatureRequest)},
  { 6, -1, sizeof(::tunnelbroker::SessionSignatureResponse)},
  { 12, -1, sizeof(::tunnelbroker::NewSessionRequest)},
  { 24, -1, sizeof(::tunnelbroker::NewSessionResponse)},
  { 30, -1, sizeof(::tunnelbroker::ProcessedMessages)},
  { 36, -1, sizeof(::tunnelbroker::MessageToTunnelbrokerStruct)},
  { 45, -1, sizeof(::tunnelbroker::MessagesToSend)},
  { 51, -1, sizeof(::tunnelbroker::MessageToTunnelbroker)},
  { 60, -1, sizeof(::tunnelbroker::MessageToClientStruct)},
  { 69, -1, sizeof(::tunnelbroker::MessagesToDeliver)},
  { 75, -1, sizeof(::tunnelbroker::MessageToClient)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tunnelbroker::_SessionSignatureRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tunnelbroker::_SessionSignatureResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tunnelbroker::_NewSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tunnelbroker::_NewSessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tunnelbroker::_ProcessedMessages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tunnelbroker::_MessageToTunnelbrokerStruct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tunnelbroker::_MessagesToSend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tunnelbroker::_MessageToTunnelbroker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tunnelbroker::_MessageToClientStruct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tunnelbroker::_MessagesToDeliver_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tunnelbroker::_MessageToClient_default_instance_),
};

const char descriptor_table_protodef_tunnelbroker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022tunnelbroker.proto\022\014tunnelbroker\032\033goog"
  "le/protobuf/empty.proto\"+\n\027SessionSignat"
  "ureRequest\022\020\n\010deviceID\030\001 \001(\t\"*\n\030SessionS"
  "ignatureResponse\022\016\n\006toSign\030\001 \001(\t\"\200\002\n\021New"
  "SessionRequest\022\020\n\010deviceID\030\001 \001(\t\022\021\n\tpubl"
  "icKey\030\002 \001(\t\022\021\n\tsignature\030\003 \001(\t\022\023\n\013notify"
  "Token\030\004 \001(\t\022\?\n\ndeviceType\030\005 \001(\0162+.tunnel"
  "broker.NewSessionRequest.DeviceTypes\022\030\n\020"
  "deviceAppVersion\030\006 \001(\t\022\020\n\010deviceOS\030\007 \001(\t"
  "\"1\n\013DeviceTypes\022\n\n\006MOBILE\020\000\022\007\n\003WEB\020\001\022\r\n\t"
  "KEYSERVER\020\002\"\'\n\022NewSessionResponse\022\021\n\tses"
  "sionID\030\001 \001(\t\"&\n\021ProcessedMessages\022\021\n\tmes"
  "sageID\030\001 \003(\t\"i\n\033MessageToTunnelbrokerStr"
  "uct\022\021\n\tmessageID\030\001 \001(\t\022\022\n\ntoDeviceID\030\002 \001"
  "(\t\022\017\n\007payload\030\003 \001(\t\022\022\n\nblobHashes\030\004 \003(\t\""
  "M\n\016MessagesToSend\022;\n\010messages\030\001 \003(\0132).tu"
  "nnelbroker.MessageToTunnelbrokerStruct\"\257"
  "\001\n\025MessageToTunnelbroker\0226\n\016messagesToSe"
  "nd\030\001 \001(\0132\034.tunnelbroker.MessagesToSendH\000"
  "\022<\n\021processedMessages\030\002 \001(\0132\037.tunnelbrok"
  "er.ProcessedMessagesH\000\022\030\n\016newNotifyToken"
  "\030\003 \001(\tH\000B\006\n\004data\"e\n\025MessageToClientStruc"
  "t\022\021\n\tmessageID\030\001 \001(\t\022\024\n\014fromDeviceID\030\002 \001"
  "(\t\022\017\n\007payload\030\003 \001(\t\022\022\n\nblobHashes\030\004 \003(\t\""
  "J\n\021MessagesToDeliver\0225\n\010messages\030\001 \003(\0132#"
  ".tunnelbroker.MessageToClientStruct\"\367\001\n\017"
  "MessageToClient\022<\n\021messagesToDeliver\030\001 \001"
  "(\0132\037.tunnelbroker.MessagesToDeliverH\000\022<\n"
  "\021processedMessages\030\002 \001(\0132\037.tunnelbroker."
  "ProcessedMessagesH\000\0228\n\026newNotifyTokenReq"
  "uired\030\003 \001(\0132\026.google.protobuf.EmptyH\000\022&\n"
  "\004ping\030\004 \001(\0132\026.google.protobuf.EmptyH\000B\006\n"
  "\004data2\251\002\n\023TunnelbrokerService\022c\n\020Session"
  "Signature\022%.tunnelbroker.SessionSignatur"
  "eRequest\032&.tunnelbroker.SessionSignature"
  "Response\"\000\022Q\n\nNewSession\022\037.tunnelbroker."
  "NewSessionRequest\032 .tunnelbroker.NewSess"
  "ionResponse\"\000\022Z\n\016MessagesStream\022#.tunnel"
  "broker.MessageToTunnelbroker\032\035.tunnelbro"
  "ker.MessageToClient\"\000(\0010\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tunnelbroker_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tunnelbroker_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tunnelbroker_2eproto = {
  false, false, 1593, descriptor_table_protodef_tunnelbroker_2eproto, "tunnelbroker.proto", 
  &descriptor_table_tunnelbroker_2eproto_once, descriptor_table_tunnelbroker_2eproto_deps, 1, 11,
  schemas, file_default_instances, TableStruct_tunnelbroker_2eproto::offsets,
  file_level_metadata_tunnelbroker_2eproto, file_level_enum_descriptors_tunnelbroker_2eproto, file_level_service_descriptors_tunnelbroker_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_tunnelbroker_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tunnelbroker_2eproto);
  return descriptor_table_tunnelbroker_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tunnelbroker_2eproto(&descriptor_table_tunnelbroker_2eproto);
namespace tunnelbroker {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NewSessionRequest_DeviceTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tunnelbroker_2eproto);
  return file_level_enum_descriptors_tunnelbroker_2eproto[0];
}
bool NewSessionRequest_DeviceTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NewSessionRequest_DeviceTypes NewSessionRequest::MOBILE;
constexpr NewSessionRequest_DeviceTypes NewSessionRequest::WEB;
constexpr NewSessionRequest_DeviceTypes NewSessionRequest::KEYSERVER;
constexpr NewSessionRequest_DeviceTypes NewSessionRequest::DeviceTypes_MIN;
constexpr NewSessionRequest_DeviceTypes NewSessionRequest::DeviceTypes_MAX;
constexpr int NewSessionRequest::DeviceTypes_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SessionSignatureRequest::_Internal {
 public:
};

SessionSignatureRequest::SessionSignatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.SessionSignatureRequest)
}
SessionSignatureRequest::SessionSignatureRequest(const SessionSignatureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.SessionSignatureRequest)
}

void SessionSignatureRequest::SharedCtor() {
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SessionSignatureRequest::~SessionSignatureRequest() {
  // @@protoc_insertion_point(destructor:tunnelbroker.SessionSignatureRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionSignatureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionSignatureRequest::ArenaDtor(void* object) {
  SessionSignatureRequest* _this = reinterpret_cast< SessionSignatureRequest* >(object);
  (void)_this;
}
void SessionSignatureRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionSignatureRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionSignatureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.SessionSignatureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionSignatureRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.SessionSignatureRequest.deviceID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionSignatureRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.SessionSignatureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceID = 1;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.SessionSignatureRequest.deviceID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.SessionSignatureRequest)
  return target;
}

size_t SessionSignatureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.SessionSignatureRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceID = 1;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionSignatureRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tunnelbroker.SessionSignatureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionSignatureRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionSignatureRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tunnelbroker.SessionSignatureRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tunnelbroker.SessionSignatureRequest)
    MergeFrom(*source);
  }
}

void SessionSignatureRequest::MergeFrom(const SessionSignatureRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.SessionSignatureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceid().size() > 0) {
    _internal_set_deviceid(from._internal_deviceid());
  }
}

void SessionSignatureRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tunnelbroker.SessionSignatureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionSignatureRequest::CopyFrom(const SessionSignatureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.SessionSignatureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionSignatureRequest::IsInitialized() const {
  return true;
}

void SessionSignatureRequest::InternalSwap(SessionSignatureRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionSignatureRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SessionSignatureResponse::_Internal {
 public:
};

SessionSignatureResponse::SessionSignatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.SessionSignatureResponse)
}
SessionSignatureResponse::SessionSignatureResponse(const SessionSignatureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tosign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tosign().empty()) {
    tosign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tosign(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.SessionSignatureResponse)
}

void SessionSignatureResponse::SharedCtor() {
tosign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SessionSignatureResponse::~SessionSignatureResponse() {
  // @@protoc_insertion_point(destructor:tunnelbroker.SessionSignatureResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionSignatureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tosign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionSignatureResponse::ArenaDtor(void* object) {
  SessionSignatureResponse* _this = reinterpret_cast< SessionSignatureResponse* >(object);
  (void)_this;
}
void SessionSignatureResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionSignatureResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionSignatureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.SessionSignatureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tosign_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionSignatureResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string toSign = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tosign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.SessionSignatureResponse.toSign"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionSignatureResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.SessionSignatureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string toSign = 1;
  if (this->tosign().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tosign().data(), static_cast<int>(this->_internal_tosign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.SessionSignatureResponse.toSign");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tosign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.SessionSignatureResponse)
  return target;
}

size_t SessionSignatureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.SessionSignatureResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string toSign = 1;
  if (this->tosign().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tosign());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionSignatureResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tunnelbroker.SessionSignatureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionSignatureResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionSignatureResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tunnelbroker.SessionSignatureResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tunnelbroker.SessionSignatureResponse)
    MergeFrom(*source);
  }
}

void SessionSignatureResponse::MergeFrom(const SessionSignatureResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.SessionSignatureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tosign().size() > 0) {
    _internal_set_tosign(from._internal_tosign());
  }
}

void SessionSignatureResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tunnelbroker.SessionSignatureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionSignatureResponse::CopyFrom(const SessionSignatureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.SessionSignatureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionSignatureResponse::IsInitialized() const {
  return true;
}

void SessionSignatureResponse::InternalSwap(SessionSignatureResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tosign_.Swap(&other->tosign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionSignatureResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewSessionRequest::_Internal {
 public:
};

NewSessionRequest::NewSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.NewSessionRequest)
}
NewSessionRequest::NewSessionRequest(const NewSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArena());
  }
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publickey().empty()) {
    publickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_publickey(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  notifytoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notifytoken().empty()) {
    notifytoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notifytoken(), 
      GetArena());
  }
  deviceappversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceappversion().empty()) {
    deviceappversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceappversion(), 
      GetArena());
  }
  deviceos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceos().empty()) {
    deviceos_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceos(), 
      GetArena());
  }
  devicetype_ = from.devicetype_;
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.NewSessionRequest)
}

void NewSessionRequest::SharedCtor() {
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
notifytoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
deviceappversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
deviceos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
devicetype_ = 0;
}

NewSessionRequest::~NewSessionRequest() {
  // @@protoc_insertion_point(destructor:tunnelbroker.NewSessionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notifytoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceappversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceos_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewSessionRequest::ArenaDtor(void* object) {
  NewSessionRequest* _this = reinterpret_cast< NewSessionRequest* >(object);
  (void)_this;
}
void NewSessionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.NewSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceid_.ClearToEmpty();
  publickey_.ClearToEmpty();
  signature_.ClearToEmpty();
  notifytoken_.ClearToEmpty();
  deviceappversion_.ClearToEmpty();
  deviceos_.ClearToEmpty();
  devicetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.NewSessionRequest.deviceID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string publicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_publickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.NewSessionRequest.publicKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.NewSessionRequest.signature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notifyToken = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_notifytoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.NewSessionRequest.notifyToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tunnelbroker.NewSessionRequest.DeviceTypes deviceType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_devicetype(static_cast<::tunnelbroker::NewSessionRequest_DeviceTypes>(val));
        } else goto handle_unusual;
        continue;
      // string deviceAppVersion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_deviceappversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.NewSessionRequest.deviceAppVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceOS = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_deviceos();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.NewSessionRequest.deviceOS"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.NewSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceID = 1;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewSessionRequest.deviceID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // string publicKey = 2;
  if (this->publickey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publickey().data(), static_cast<int>(this->_internal_publickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewSessionRequest.publicKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_publickey(), target);
  }

  // string signature = 3;
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewSessionRequest.signature");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_signature(), target);
  }

  // string notifyToken = 4;
  if (this->notifytoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notifytoken().data(), static_cast<int>(this->_internal_notifytoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewSessionRequest.notifyToken");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notifytoken(), target);
  }

  // .tunnelbroker.NewSessionRequest.DeviceTypes deviceType = 5;
  if (this->devicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_devicetype(), target);
  }

  // string deviceAppVersion = 6;
  if (this->deviceappversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceappversion().data(), static_cast<int>(this->_internal_deviceappversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewSessionRequest.deviceAppVersion");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_deviceappversion(), target);
  }

  // string deviceOS = 7;
  if (this->deviceos().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceos().data(), static_cast<int>(this->_internal_deviceos().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewSessionRequest.deviceOS");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_deviceos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.NewSessionRequest)
  return target;
}

size_t NewSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.NewSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceID = 1;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string publicKey = 2;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publickey());
  }

  // string signature = 3;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  // string notifyToken = 4;
  if (this->notifytoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notifytoken());
  }

  // string deviceAppVersion = 6;
  if (this->deviceappversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceappversion());
  }

  // string deviceOS = 7;
  if (this->deviceos().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceos());
  }

  // .tunnelbroker.NewSessionRequest.DeviceTypes deviceType = 5;
  if (this->devicetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_devicetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tunnelbroker.NewSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tunnelbroker.NewSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tunnelbroker.NewSessionRequest)
    MergeFrom(*source);
  }
}

void NewSessionRequest::MergeFrom(const NewSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.NewSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceid().size() > 0) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (from.publickey().size() > 0) {
    _internal_set_publickey(from._internal_publickey());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.notifytoken().size() > 0) {
    _internal_set_notifytoken(from._internal_notifytoken());
  }
  if (from.deviceappversion().size() > 0) {
    _internal_set_deviceappversion(from._internal_deviceappversion());
  }
  if (from.deviceos().size() > 0) {
    _internal_set_deviceos(from._internal_deviceos());
  }
  if (from.devicetype() != 0) {
    _internal_set_devicetype(from._internal_devicetype());
  }
}

void NewSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tunnelbroker.NewSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewSessionRequest::CopyFrom(const NewSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.NewSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSessionRequest::IsInitialized() const {
  return true;
}

void NewSessionRequest::InternalSwap(NewSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  publickey_.Swap(&other->publickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notifytoken_.Swap(&other->notifytoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  deviceappversion_.Swap(&other->deviceappversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  deviceos_.Swap(&other->deviceos_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(devicetype_, other->devicetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewSessionResponse::_Internal {
 public:
};

NewSessionResponse::NewSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.NewSessionResponse)
}
NewSessionResponse::NewSessionResponse(const NewSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sessionid().empty()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.NewSessionResponse)
}

void NewSessionResponse::SharedCtor() {
sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NewSessionResponse::~NewSessionResponse() {
  // @@protoc_insertion_point(destructor:tunnelbroker.NewSessionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewSessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewSessionResponse::ArenaDtor(void* object) {
  NewSessionResponse* _this = reinterpret_cast< NewSessionResponse* >(object);
  (void)_this;
}
void NewSessionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewSessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.NewSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewSessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sessionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.NewSessionResponse.sessionID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewSessionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.NewSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionID = 1;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.NewSessionResponse.sessionID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.NewSessionResponse)
  return target;
}

size_t NewSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.NewSessionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionID = 1;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewSessionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tunnelbroker.NewSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewSessionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewSessionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tunnelbroker.NewSessionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tunnelbroker.NewSessionResponse)
    MergeFrom(*source);
  }
}

void NewSessionResponse::MergeFrom(const NewSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.NewSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid().size() > 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
}

void NewSessionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tunnelbroker.NewSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewSessionResponse::CopyFrom(const NewSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.NewSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSessionResponse::IsInitialized() const {
  return true;
}

void NewSessionResponse::InternalSwap(NewSessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NewSessionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProcessedMessages::_Internal {
 public:
};

ProcessedMessages::ProcessedMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  messageid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.ProcessedMessages)
}
ProcessedMessages::ProcessedMessages(const ProcessedMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messageid_(from.messageid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.ProcessedMessages)
}

void ProcessedMessages::SharedCtor() {
}

ProcessedMessages::~ProcessedMessages() {
  // @@protoc_insertion_point(destructor:tunnelbroker.ProcessedMessages)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessedMessages::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProcessedMessages::ArenaDtor(void* object) {
  ProcessedMessages* _this = reinterpret_cast< ProcessedMessages* >(object);
  (void)_this;
}
void ProcessedMessages::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessedMessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessedMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.ProcessedMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messageid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessedMessages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string messageID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_messageid();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.ProcessedMessages.messageID"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessedMessages::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.ProcessedMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string messageID = 1;
  for (int i = 0, n = this->_internal_messageid_size(); i < n; i++) {
    const auto& s = this->_internal_messageid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.ProcessedMessages.messageID");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.ProcessedMessages)
  return target;
}

size_t ProcessedMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.ProcessedMessages)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string messageID = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(messageid_.size());
  for (int i = 0, n = messageid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      messageid_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessedMessages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tunnelbroker.ProcessedMessages)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessedMessages* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessedMessages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tunnelbroker.ProcessedMessages)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tunnelbroker.ProcessedMessages)
    MergeFrom(*source);
  }
}

void ProcessedMessages::MergeFrom(const ProcessedMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.ProcessedMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messageid_.MergeFrom(from.messageid_);
}

void ProcessedMessages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tunnelbroker.ProcessedMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessedMessages::CopyFrom(const ProcessedMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.ProcessedMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessedMessages::IsInitialized() const {
  return true;
}

void ProcessedMessages::InternalSwap(ProcessedMessages* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  messageid_.InternalSwap(&other->messageid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessedMessages::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageToTunnelbrokerStruct::_Internal {
 public:
};

MessageToTunnelbrokerStruct::MessageToTunnelbrokerStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blobhashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.MessageToTunnelbrokerStruct)
}
MessageToTunnelbrokerStruct::MessageToTunnelbrokerStruct(const MessageToTunnelbrokerStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blobhashes_(from.blobhashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  messageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_messageid().empty()) {
    messageid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_messageid(), 
      GetArena());
  }
  todeviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_todeviceid().empty()) {
    todeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_todeviceid(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.MessageToTunnelbrokerStruct)
}

void MessageToTunnelbrokerStruct::SharedCtor() {
messageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
todeviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MessageToTunnelbrokerStruct::~MessageToTunnelbrokerStruct() {
  // @@protoc_insertion_point(destructor:tunnelbroker.MessageToTunnelbrokerStruct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageToTunnelbrokerStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  messageid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  todeviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageToTunnelbrokerStruct::ArenaDtor(void* object) {
  MessageToTunnelbrokerStruct* _this = reinterpret_cast< MessageToTunnelbrokerStruct* >(object);
  (void)_this;
}
void MessageToTunnelbrokerStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageToTunnelbrokerStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageToTunnelbrokerStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.MessageToTunnelbrokerStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blobhashes_.Clear();
  messageid_.ClearToEmpty();
  todeviceid_.ClearToEmpty();
  payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToTunnelbrokerStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string messageID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_messageid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.MessageToTunnelbrokerStruct.messageID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string toDeviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_todeviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.MessageToTunnelbrokerStruct.toDeviceID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.MessageToTunnelbrokerStruct.payload"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string blobHashes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blobhashes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.MessageToTunnelbrokerStruct.blobHashes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageToTunnelbrokerStruct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.MessageToTunnelbrokerStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string messageID = 1;
  if (this->messageid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_messageid().data(), static_cast<int>(this->_internal_messageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToTunnelbrokerStruct.messageID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_messageid(), target);
  }

  // string toDeviceID = 2;
  if (this->todeviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_todeviceid().data(), static_cast<int>(this->_internal_todeviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToTunnelbrokerStruct.toDeviceID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_todeviceid(), target);
  }

  // string payload = 3;
  if (this->payload().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToTunnelbrokerStruct.payload");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // repeated string blobHashes = 4;
  for (int i = 0, n = this->_internal_blobhashes_size(); i < n; i++) {
    const auto& s = this->_internal_blobhashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToTunnelbrokerStruct.blobHashes");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.MessageToTunnelbrokerStruct)
  return target;
}

size_t MessageToTunnelbrokerStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.MessageToTunnelbrokerStruct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string blobHashes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(blobhashes_.size());
  for (int i = 0, n = blobhashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      blobhashes_.Get(i));
  }

  // string messageID = 1;
  if (this->messageid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_messageid());
  }

  // string toDeviceID = 2;
  if (this->todeviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_todeviceid());
  }

  // string payload = 3;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageToTunnelbrokerStruct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tunnelbroker.MessageToTunnelbrokerStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageToTunnelbrokerStruct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageToTunnelbrokerStruct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tunnelbroker.MessageToTunnelbrokerStruct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tunnelbroker.MessageToTunnelbrokerStruct)
    MergeFrom(*source);
  }
}

void MessageToTunnelbrokerStruct::MergeFrom(const MessageToTunnelbrokerStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.MessageToTunnelbrokerStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blobhashes_.MergeFrom(from.blobhashes_);
  if (from.messageid().size() > 0) {
    _internal_set_messageid(from._internal_messageid());
  }
  if (from.todeviceid().size() > 0) {
    _internal_set_todeviceid(from._internal_todeviceid());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
}

void MessageToTunnelbrokerStruct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tunnelbroker.MessageToTunnelbrokerStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageToTunnelbrokerStruct::CopyFrom(const MessageToTunnelbrokerStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.MessageToTunnelbrokerStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToTunnelbrokerStruct::IsInitialized() const {
  return true;
}

void MessageToTunnelbrokerStruct::InternalSwap(MessageToTunnelbrokerStruct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blobhashes_.InternalSwap(&other->blobhashes_);
  messageid_.Swap(&other->messageid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  todeviceid_.Swap(&other->todeviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToTunnelbrokerStruct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessagesToSend::_Internal {
 public:
};

MessagesToSend::MessagesToSend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.MessagesToSend)
}
MessagesToSend::MessagesToSend(const MessagesToSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.MessagesToSend)
}

void MessagesToSend::SharedCtor() {
}

MessagesToSend::~MessagesToSend() {
  // @@protoc_insertion_point(destructor:tunnelbroker.MessagesToSend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessagesToSend::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MessagesToSend::ArenaDtor(void* object) {
  MessagesToSend* _this = reinterpret_cast< MessagesToSend* >(object);
  (void)_this;
}
void MessagesToSend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessagesToSend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessagesToSend::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.MessagesToSend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagesToSend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tunnelbroker.MessageToTunnelbrokerStruct messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagesToSend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.MessagesToSend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tunnelbroker.MessageToTunnelbrokerStruct messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.MessagesToSend)
  return target;
}

size_t MessagesToSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.MessagesToSend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tunnelbroker.MessageToTunnelbrokerStruct messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagesToSend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tunnelbroker.MessagesToSend)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagesToSend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagesToSend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tunnelbroker.MessagesToSend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tunnelbroker.MessagesToSend)
    MergeFrom(*source);
  }
}

void MessagesToSend::MergeFrom(const MessagesToSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.MessagesToSend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void MessagesToSend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tunnelbroker.MessagesToSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagesToSend::CopyFrom(const MessagesToSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.MessagesToSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagesToSend::IsInitialized() const {
  return true;
}

void MessagesToSend::InternalSwap(MessagesToSend* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagesToSend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageToTunnelbroker::_Internal {
 public:
  static const ::tunnelbroker::MessagesToSend& messagestosend(const MessageToTunnelbroker* msg);
  static const ::tunnelbroker::ProcessedMessages& processedmessages(const MessageToTunnelbroker* msg);
};

const ::tunnelbroker::MessagesToSend&
MessageToTunnelbroker::_Internal::messagestosend(const MessageToTunnelbroker* msg) {
  return *msg->data_.messagestosend_;
}
const ::tunnelbroker::ProcessedMessages&
MessageToTunnelbroker::_Internal::processedmessages(const MessageToTunnelbroker* msg) {
  return *msg->data_.processedmessages_;
}
void MessageToTunnelbroker::set_allocated_messagestosend(::tunnelbroker::MessagesToSend* messagestosend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (messagestosend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messagestosend);
    if (message_arena != submessage_arena) {
      messagestosend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messagestosend, submessage_arena);
    }
    set_has_messagestosend();
    data_.messagestosend_ = messagestosend;
  }
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.MessageToTunnelbroker.messagesToSend)
}
void MessageToTunnelbroker::set_allocated_processedmessages(::tunnelbroker::ProcessedMessages* processedmessages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (processedmessages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(processedmessages);
    if (message_arena != submessage_arena) {
      processedmessages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processedmessages, submessage_arena);
    }
    set_has_processedmessages();
    data_.processedmessages_ = processedmessages;
  }
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.MessageToTunnelbroker.processedMessages)
}
MessageToTunnelbroker::MessageToTunnelbroker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.MessageToTunnelbroker)
}
MessageToTunnelbroker::MessageToTunnelbroker(const MessageToTunnelbroker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kMessagesToSend: {
      _internal_mutable_messagestosend()->::tunnelbroker::MessagesToSend::MergeFrom(from._internal_messagestosend());
      break;
    }
    case kProcessedMessages: {
      _internal_mutable_processedmessages()->::tunnelbroker::ProcessedMessages::MergeFrom(from._internal_processedmessages());
      break;
    }
    case kNewNotifyToken: {
      _internal_set_newnotifytoken(from._internal_newnotifytoken());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.MessageToTunnelbroker)
}

void MessageToTunnelbroker::SharedCtor() {
clear_has_data();
}

MessageToTunnelbroker::~MessageToTunnelbroker() {
  // @@protoc_insertion_point(destructor:tunnelbroker.MessageToTunnelbroker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageToTunnelbroker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void MessageToTunnelbroker::ArenaDtor(void* object) {
  MessageToTunnelbroker* _this = reinterpret_cast< MessageToTunnelbroker* >(object);
  (void)_this;
}
void MessageToTunnelbroker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageToTunnelbroker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageToTunnelbroker::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:tunnelbroker.MessageToTunnelbroker)
  switch (data_case()) {
    case kMessagesToSend: {
      if (GetArena() == nullptr) {
        delete data_.messagestosend_;
      }
      break;
    }
    case kProcessedMessages: {
      if (GetArena() == nullptr) {
        delete data_.processedmessages_;
      }
      break;
    }
    case kNewNotifyToken: {
      data_.newnotifytoken_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void MessageToTunnelbroker::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.MessageToTunnelbroker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToTunnelbroker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tunnelbroker.MessagesToSend messagesToSend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_messagestosend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tunnelbroker.ProcessedMessages processedMessages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_processedmessages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string newNotifyToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_newnotifytoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.MessageToTunnelbroker.newNotifyToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageToTunnelbroker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.MessageToTunnelbroker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tunnelbroker.MessagesToSend messagesToSend = 1;
  if (_internal_has_messagestosend()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::messagestosend(this), target, stream);
  }

  // .tunnelbroker.ProcessedMessages processedMessages = 2;
  if (_internal_has_processedmessages()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::processedmessages(this), target, stream);
  }

  // string newNotifyToken = 3;
  if (_internal_has_newnotifytoken()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newnotifytoken().data(), static_cast<int>(this->_internal_newnotifytoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToTunnelbroker.newNotifyToken");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_newnotifytoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.MessageToTunnelbroker)
  return target;
}

size_t MessageToTunnelbroker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.MessageToTunnelbroker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .tunnelbroker.MessagesToSend messagesToSend = 1;
    case kMessagesToSend: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.messagestosend_);
      break;
    }
    // .tunnelbroker.ProcessedMessages processedMessages = 2;
    case kProcessedMessages: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.processedmessages_);
      break;
    }
    // string newNotifyToken = 3;
    case kNewNotifyToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_newnotifytoken());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageToTunnelbroker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tunnelbroker.MessageToTunnelbroker)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageToTunnelbroker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageToTunnelbroker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tunnelbroker.MessageToTunnelbroker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tunnelbroker.MessageToTunnelbroker)
    MergeFrom(*source);
  }
}

void MessageToTunnelbroker::MergeFrom(const MessageToTunnelbroker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.MessageToTunnelbroker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kMessagesToSend: {
      _internal_mutable_messagestosend()->::tunnelbroker::MessagesToSend::MergeFrom(from._internal_messagestosend());
      break;
    }
    case kProcessedMessages: {
      _internal_mutable_processedmessages()->::tunnelbroker::ProcessedMessages::MergeFrom(from._internal_processedmessages());
      break;
    }
    case kNewNotifyToken: {
      _internal_set_newnotifytoken(from._internal_newnotifytoken());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void MessageToTunnelbroker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tunnelbroker.MessageToTunnelbroker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageToTunnelbroker::CopyFrom(const MessageToTunnelbroker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.MessageToTunnelbroker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToTunnelbroker::IsInitialized() const {
  return true;
}

void MessageToTunnelbroker::InternalSwap(MessageToTunnelbroker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToTunnelbroker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageToClientStruct::_Internal {
 public:
};

MessageToClientStruct::MessageToClientStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blobhashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.MessageToClientStruct)
}
MessageToClientStruct::MessageToClientStruct(const MessageToClientStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blobhashes_(from.blobhashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  messageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_messageid().empty()) {
    messageid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_messageid(), 
      GetArena());
  }
  fromdeviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fromdeviceid().empty()) {
    fromdeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fromdeviceid(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.MessageToClientStruct)
}

void MessageToClientStruct::SharedCtor() {
messageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fromdeviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MessageToClientStruct::~MessageToClientStruct() {
  // @@protoc_insertion_point(destructor:tunnelbroker.MessageToClientStruct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageToClientStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  messageid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fromdeviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageToClientStruct::ArenaDtor(void* object) {
  MessageToClientStruct* _this = reinterpret_cast< MessageToClientStruct* >(object);
  (void)_this;
}
void MessageToClientStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageToClientStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageToClientStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.MessageToClientStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blobhashes_.Clear();
  messageid_.ClearToEmpty();
  fromdeviceid_.ClearToEmpty();
  payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToClientStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string messageID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_messageid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.MessageToClientStruct.messageID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fromDeviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fromdeviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.MessageToClientStruct.fromDeviceID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.MessageToClientStruct.payload"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string blobHashes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blobhashes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tunnelbroker.MessageToClientStruct.blobHashes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageToClientStruct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.MessageToClientStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string messageID = 1;
  if (this->messageid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_messageid().data(), static_cast<int>(this->_internal_messageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToClientStruct.messageID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_messageid(), target);
  }

  // string fromDeviceID = 2;
  if (this->fromdeviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fromdeviceid().data(), static_cast<int>(this->_internal_fromdeviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToClientStruct.fromDeviceID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fromdeviceid(), target);
  }

  // string payload = 3;
  if (this->payload().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToClientStruct.payload");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // repeated string blobHashes = 4;
  for (int i = 0, n = this->_internal_blobhashes_size(); i < n; i++) {
    const auto& s = this->_internal_blobhashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tunnelbroker.MessageToClientStruct.blobHashes");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.MessageToClientStruct)
  return target;
}

size_t MessageToClientStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.MessageToClientStruct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string blobHashes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(blobhashes_.size());
  for (int i = 0, n = blobhashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      blobhashes_.Get(i));
  }

  // string messageID = 1;
  if (this->messageid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_messageid());
  }

  // string fromDeviceID = 2;
  if (this->fromdeviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fromdeviceid());
  }

  // string payload = 3;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageToClientStruct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tunnelbroker.MessageToClientStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageToClientStruct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageToClientStruct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tunnelbroker.MessageToClientStruct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tunnelbroker.MessageToClientStruct)
    MergeFrom(*source);
  }
}

void MessageToClientStruct::MergeFrom(const MessageToClientStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.MessageToClientStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blobhashes_.MergeFrom(from.blobhashes_);
  if (from.messageid().size() > 0) {
    _internal_set_messageid(from._internal_messageid());
  }
  if (from.fromdeviceid().size() > 0) {
    _internal_set_fromdeviceid(from._internal_fromdeviceid());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
}

void MessageToClientStruct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tunnelbroker.MessageToClientStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageToClientStruct::CopyFrom(const MessageToClientStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.MessageToClientStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToClientStruct::IsInitialized() const {
  return true;
}

void MessageToClientStruct::InternalSwap(MessageToClientStruct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blobhashes_.InternalSwap(&other->blobhashes_);
  messageid_.Swap(&other->messageid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fromdeviceid_.Swap(&other->fromdeviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToClientStruct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessagesToDeliver::_Internal {
 public:
};

MessagesToDeliver::MessagesToDeliver(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.MessagesToDeliver)
}
MessagesToDeliver::MessagesToDeliver(const MessagesToDeliver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.MessagesToDeliver)
}

void MessagesToDeliver::SharedCtor() {
}

MessagesToDeliver::~MessagesToDeliver() {
  // @@protoc_insertion_point(destructor:tunnelbroker.MessagesToDeliver)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessagesToDeliver::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MessagesToDeliver::ArenaDtor(void* object) {
  MessagesToDeliver* _this = reinterpret_cast< MessagesToDeliver* >(object);
  (void)_this;
}
void MessagesToDeliver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessagesToDeliver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessagesToDeliver::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.MessagesToDeliver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagesToDeliver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tunnelbroker.MessageToClientStruct messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagesToDeliver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.MessagesToDeliver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tunnelbroker.MessageToClientStruct messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.MessagesToDeliver)
  return target;
}

size_t MessagesToDeliver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.MessagesToDeliver)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tunnelbroker.MessageToClientStruct messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagesToDeliver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tunnelbroker.MessagesToDeliver)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagesToDeliver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagesToDeliver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tunnelbroker.MessagesToDeliver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tunnelbroker.MessagesToDeliver)
    MergeFrom(*source);
  }
}

void MessagesToDeliver::MergeFrom(const MessagesToDeliver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.MessagesToDeliver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void MessagesToDeliver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tunnelbroker.MessagesToDeliver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagesToDeliver::CopyFrom(const MessagesToDeliver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.MessagesToDeliver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagesToDeliver::IsInitialized() const {
  return true;
}

void MessagesToDeliver::InternalSwap(MessagesToDeliver* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagesToDeliver::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageToClient::_Internal {
 public:
  static const ::tunnelbroker::MessagesToDeliver& messagestodeliver(const MessageToClient* msg);
  static const ::tunnelbroker::ProcessedMessages& processedmessages(const MessageToClient* msg);
  static const PROTOBUF_NAMESPACE_ID::Empty& newnotifytokenrequired(const MessageToClient* msg);
  static const PROTOBUF_NAMESPACE_ID::Empty& ping(const MessageToClient* msg);
};

const ::tunnelbroker::MessagesToDeliver&
MessageToClient::_Internal::messagestodeliver(const MessageToClient* msg) {
  return *msg->data_.messagestodeliver_;
}
const ::tunnelbroker::ProcessedMessages&
MessageToClient::_Internal::processedmessages(const MessageToClient* msg) {
  return *msg->data_.processedmessages_;
}
const PROTOBUF_NAMESPACE_ID::Empty&
MessageToClient::_Internal::newnotifytokenrequired(const MessageToClient* msg) {
  return *msg->data_.newnotifytokenrequired_;
}
const PROTOBUF_NAMESPACE_ID::Empty&
MessageToClient::_Internal::ping(const MessageToClient* msg) {
  return *msg->data_.ping_;
}
void MessageToClient::set_allocated_messagestodeliver(::tunnelbroker::MessagesToDeliver* messagestodeliver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (messagestodeliver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messagestodeliver);
    if (message_arena != submessage_arena) {
      messagestodeliver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messagestodeliver, submessage_arena);
    }
    set_has_messagestodeliver();
    data_.messagestodeliver_ = messagestodeliver;
  }
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.MessageToClient.messagesToDeliver)
}
void MessageToClient::set_allocated_processedmessages(::tunnelbroker::ProcessedMessages* processedmessages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (processedmessages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(processedmessages);
    if (message_arena != submessage_arena) {
      processedmessages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processedmessages, submessage_arena);
    }
    set_has_processedmessages();
    data_.processedmessages_ = processedmessages;
  }
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.MessageToClient.processedMessages)
}
void MessageToClient::set_allocated_newnotifytokenrequired(PROTOBUF_NAMESPACE_ID::Empty* newnotifytokenrequired) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (newnotifytokenrequired) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newnotifytokenrequired)->GetArena();
    if (message_arena != submessage_arena) {
      newnotifytokenrequired = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newnotifytokenrequired, submessage_arena);
    }
    set_has_newnotifytokenrequired();
    data_.newnotifytokenrequired_ = newnotifytokenrequired;
  }
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.MessageToClient.newNotifyTokenRequired)
}
void MessageToClient::clear_newnotifytokenrequired() {
  if (_internal_has_newnotifytokenrequired()) {
    if (GetArena() == nullptr) {
      delete data_.newnotifytokenrequired_;
    }
    clear_has_data();
  }
}
void MessageToClient::set_allocated_ping(PROTOBUF_NAMESPACE_ID::Empty* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping)->GetArena();
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    data_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.MessageToClient.ping)
}
void MessageToClient::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArena() == nullptr) {
      delete data_.ping_;
    }
    clear_has_data();
  }
}
MessageToClient::MessageToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tunnelbroker.MessageToClient)
}
MessageToClient::MessageToClient(const MessageToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kMessagesToDeliver: {
      _internal_mutable_messagestodeliver()->::tunnelbroker::MessagesToDeliver::MergeFrom(from._internal_messagestodeliver());
      break;
    }
    case kProcessedMessages: {
      _internal_mutable_processedmessages()->::tunnelbroker::ProcessedMessages::MergeFrom(from._internal_processedmessages());
      break;
    }
    case kNewNotifyTokenRequired: {
      _internal_mutable_newnotifytokenrequired()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_newnotifytokenrequired());
      break;
    }
    case kPing: {
      _internal_mutable_ping()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_ping());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tunnelbroker.MessageToClient)
}

void MessageToClient::SharedCtor() {
clear_has_data();
}

MessageToClient::~MessageToClient() {
  // @@protoc_insertion_point(destructor:tunnelbroker.MessageToClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void MessageToClient::ArenaDtor(void* object) {
  MessageToClient* _this = reinterpret_cast< MessageToClient* >(object);
  (void)_this;
}
void MessageToClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageToClient::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:tunnelbroker.MessageToClient)
  switch (data_case()) {
    case kMessagesToDeliver: {
      if (GetArena() == nullptr) {
        delete data_.messagestodeliver_;
      }
      break;
    }
    case kProcessedMessages: {
      if (GetArena() == nullptr) {
        delete data_.processedmessages_;
      }
      break;
    }
    case kNewNotifyTokenRequired: {
      if (GetArena() == nullptr) {
        delete data_.newnotifytokenrequired_;
      }
      break;
    }
    case kPing: {
      if (GetArena() == nullptr) {
        delete data_.ping_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void MessageToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:tunnelbroker.MessageToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageToClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tunnelbroker.MessagesToDeliver messagesToDeliver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_messagestodeliver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tunnelbroker.ProcessedMessages processedMessages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_processedmessages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Empty newNotifyTokenRequired = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_newnotifytokenrequired(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Empty ping = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageToClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tunnelbroker.MessageToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tunnelbroker.MessagesToDeliver messagesToDeliver = 1;
  if (_internal_has_messagestodeliver()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::messagestodeliver(this), target, stream);
  }

  // .tunnelbroker.ProcessedMessages processedMessages = 2;
  if (_internal_has_processedmessages()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::processedmessages(this), target, stream);
  }

  // .google.protobuf.Empty newNotifyTokenRequired = 3;
  if (_internal_has_newnotifytokenrequired()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::newnotifytokenrequired(this), target, stream);
  }

  // .google.protobuf.Empty ping = 4;
  if (_internal_has_ping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ping(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tunnelbroker.MessageToClient)
  return target;
}

size_t MessageToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tunnelbroker.MessageToClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .tunnelbroker.MessagesToDeliver messagesToDeliver = 1;
    case kMessagesToDeliver: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.messagestodeliver_);
      break;
    }
    // .tunnelbroker.ProcessedMessages processedMessages = 2;
    case kProcessedMessages: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.processedmessages_);
      break;
    }
    // .google.protobuf.Empty newNotifyTokenRequired = 3;
    case kNewNotifyTokenRequired: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.newnotifytokenrequired_);
      break;
    }
    // .google.protobuf.Empty ping = 4;
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.ping_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageToClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tunnelbroker.MessageToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageToClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tunnelbroker.MessageToClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tunnelbroker.MessageToClient)
    MergeFrom(*source);
  }
}

void MessageToClient::MergeFrom(const MessageToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tunnelbroker.MessageToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kMessagesToDeliver: {
      _internal_mutable_messagestodeliver()->::tunnelbroker::MessagesToDeliver::MergeFrom(from._internal_messagestodeliver());
      break;
    }
    case kProcessedMessages: {
      _internal_mutable_processedmessages()->::tunnelbroker::ProcessedMessages::MergeFrom(from._internal_processedmessages());
      break;
    }
    case kNewNotifyTokenRequired: {
      _internal_mutable_newnotifytokenrequired()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_newnotifytokenrequired());
      break;
    }
    case kPing: {
      _internal_mutable_ping()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_ping());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void MessageToClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tunnelbroker.MessageToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageToClient::CopyFrom(const MessageToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tunnelbroker.MessageToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToClient::IsInitialized() const {
  return true;
}

void MessageToClient::InternalSwap(MessageToClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageToClient::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tunnelbroker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tunnelbroker::SessionSignatureRequest* Arena::CreateMaybeMessage< ::tunnelbroker::SessionSignatureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::SessionSignatureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::SessionSignatureResponse* Arena::CreateMaybeMessage< ::tunnelbroker::SessionSignatureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::SessionSignatureResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::NewSessionRequest* Arena::CreateMaybeMessage< ::tunnelbroker::NewSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::NewSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::NewSessionResponse* Arena::CreateMaybeMessage< ::tunnelbroker::NewSessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::NewSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::ProcessedMessages* Arena::CreateMaybeMessage< ::tunnelbroker::ProcessedMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::ProcessedMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::MessageToTunnelbrokerStruct* Arena::CreateMaybeMessage< ::tunnelbroker::MessageToTunnelbrokerStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::MessageToTunnelbrokerStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::MessagesToSend* Arena::CreateMaybeMessage< ::tunnelbroker::MessagesToSend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::MessagesToSend >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::MessageToTunnelbroker* Arena::CreateMaybeMessage< ::tunnelbroker::MessageToTunnelbroker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::MessageToTunnelbroker >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::MessageToClientStruct* Arena::CreateMaybeMessage< ::tunnelbroker::MessageToClientStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::MessageToClientStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::MessagesToDeliver* Arena::CreateMaybeMessage< ::tunnelbroker::MessagesToDeliver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::MessagesToDeliver >(arena);
}
template<> PROTOBUF_NOINLINE ::tunnelbroker::MessageToClient* Arena::CreateMaybeMessage< ::tunnelbroker::MessageToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tunnelbroker::MessageToClient >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
