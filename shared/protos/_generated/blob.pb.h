// @generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blob.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blob_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blob_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blob_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blob_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blob_2eproto;
namespace blob {
class GetRequest;
struct GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
struct GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class PutRequest;
struct PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class PutResponse;
struct PutResponseDefaultTypeInternal;
extern PutResponseDefaultTypeInternal _PutResponse_default_instance_;
class RemoveRequest;
struct RemoveRequestDefaultTypeInternal;
extern RemoveRequestDefaultTypeInternal _RemoveRequest_default_instance_;
}  // namespace blob
PROTOBUF_NAMESPACE_OPEN
template<> ::blob::GetRequest* Arena::CreateMaybeMessage<::blob::GetRequest>(Arena*);
template<> ::blob::GetResponse* Arena::CreateMaybeMessage<::blob::GetResponse>(Arena*);
template<> ::blob::PutRequest* Arena::CreateMaybeMessage<::blob::PutRequest>(Arena*);
template<> ::blob::PutResponse* Arena::CreateMaybeMessage<::blob::PutResponse>(Arena*);
template<> ::blob::RemoveRequest* Arena::CreateMaybeMessage<::blob::RemoveRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blob {

// ===================================================================

class PutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blob.PutRequest) */ {
 public:
  inline PutRequest() : PutRequest(nullptr) {}
  ~PutRequest() override;
  explicit PROTOBUF_CONSTEXPR PutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutRequest(const PutRequest& from);
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kHolder = 1,
    kBlobHash = 2,
    kDataChunk = 3,
    DATA_NOT_SET = 0,
  };

  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PutRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PutRequest& from) {
    PutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blob.PutRequest";
  }
  protected:
  explicit PutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHolderFieldNumber = 1,
    kBlobHashFieldNumber = 2,
    kDataChunkFieldNumber = 3,
  };
  // string holder = 1;
  bool has_holder() const;
  private:
  bool _internal_has_holder() const;
  public:
  void clear_holder();
  const std::string& holder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_holder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_holder();
  PROTOBUF_NODISCARD std::string* release_holder();
  void set_allocated_holder(std::string* holder);
  private:
  const std::string& _internal_holder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_holder(const std::string& value);
  std::string* _internal_mutable_holder();
  public:

  // string blobHash = 2;
  bool has_blobhash() const;
  private:
  bool _internal_has_blobhash() const;
  public:
  void clear_blobhash();
  const std::string& blobhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blobhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blobhash();
  PROTOBUF_NODISCARD std::string* release_blobhash();
  void set_allocated_blobhash(std::string* blobhash);
  private:
  const std::string& _internal_blobhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blobhash(const std::string& value);
  std::string* _internal_mutable_blobhash();
  public:

  // bytes dataChunk = 3;
  bool has_datachunk() const;
  private:
  bool _internal_has_datachunk() const;
  public:
  void clear_datachunk();
  const std::string& datachunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datachunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datachunk();
  PROTOBUF_NODISCARD std::string* release_datachunk();
  void set_allocated_datachunk(std::string* datachunk);
  private:
  const std::string& _internal_datachunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datachunk(const std::string& value);
  std::string* _internal_mutable_datachunk();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:blob.PutRequest)
 private:
  class _Internal;
  void set_has_holder();
  void set_has_blobhash();
  void set_has_datachunk();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr holder_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blobhash_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datachunk_;
    } data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blob_2eproto;
};
// -------------------------------------------------------------------

class PutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blob.PutResponse) */ {
 public:
  inline PutResponse() : PutResponse(nullptr) {}
  ~PutResponse() override;
  explicit PROTOBUF_CONSTEXPR PutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutResponse(const PutResponse& from);
  PutResponse(PutResponse&& from) noexcept
    : PutResponse() {
    *this = ::std::move(from);
  }

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutResponse& operator=(PutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutResponse* internal_default_instance() {
    return reinterpret_cast<const PutResponse*>(
               &_PutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PutResponse& a, PutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PutResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PutResponse& from) {
    PutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blob.PutResponse";
  }
  protected:
  explicit PutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataExistsFieldNumber = 1,
  };
  // bool dataExists = 1;
  void clear_dataexists();
  bool dataexists() const;
  void set_dataexists(bool value);
  private:
  bool _internal_dataexists() const;
  void _internal_set_dataexists(bool value);
  public:

  // @@protoc_insertion_point(class_scope:blob.PutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool dataexists_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blob_2eproto;
};
// -------------------------------------------------------------------

class GetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blob.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  ~GetRequest() override;
  explicit PROTOBUF_CONSTEXPR GetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRequest(const GetRequest& from);
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRequest& from) {
    GetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blob.GetRequest";
  }
  protected:
  explicit GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHolderFieldNumber = 1,
  };
  // string holder = 1;
  void clear_holder();
  const std::string& holder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_holder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_holder();
  PROTOBUF_NODISCARD std::string* release_holder();
  void set_allocated_holder(std::string* holder);
  private:
  const std::string& _internal_holder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_holder(const std::string& value);
  std::string* _internal_mutable_holder();
  public:

  // @@protoc_insertion_point(class_scope:blob.GetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr holder_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blob_2eproto;
};
// -------------------------------------------------------------------

class GetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blob.GetResponse) */ {
 public:
  inline GetResponse() : GetResponse(nullptr) {}
  ~GetResponse() override;
  explicit PROTOBUF_CONSTEXPR GetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetResponse(const GetResponse& from);
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetResponse& from) {
    GetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blob.GetResponse";
  }
  protected:
  explicit GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataChunkFieldNumber = 1,
  };
  // bytes dataChunk = 1;
  void clear_datachunk();
  const std::string& datachunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datachunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datachunk();
  PROTOBUF_NODISCARD std::string* release_datachunk();
  void set_allocated_datachunk(std::string* datachunk);
  private:
  const std::string& _internal_datachunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datachunk(const std::string& value);
  std::string* _internal_mutable_datachunk();
  public:

  // @@protoc_insertion_point(class_scope:blob.GetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datachunk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blob_2eproto;
};
// -------------------------------------------------------------------

class RemoveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blob.RemoveRequest) */ {
 public:
  inline RemoveRequest() : RemoveRequest(nullptr) {}
  ~RemoveRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveRequest(const RemoveRequest& from);
  RemoveRequest(RemoveRequest&& from) noexcept
    : RemoveRequest() {
    *this = ::std::move(from);
  }

  inline RemoveRequest& operator=(const RemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRequest& operator=(RemoveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveRequest*>(
               &_RemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RemoveRequest& a, RemoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveRequest& from) {
    RemoveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blob.RemoveRequest";
  }
  protected:
  explicit RemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHolderFieldNumber = 1,
  };
  // string holder = 1;
  void clear_holder();
  const std::string& holder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_holder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_holder();
  PROTOBUF_NODISCARD std::string* release_holder();
  void set_allocated_holder(std::string* holder);
  private:
  const std::string& _internal_holder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_holder(const std::string& value);
  std::string* _internal_mutable_holder();
  public:

  // @@protoc_insertion_point(class_scope:blob.RemoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr holder_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blob_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PutRequest

// string holder = 1;
inline bool PutRequest::_internal_has_holder() const {
  return data_case() == kHolder;
}
inline bool PutRequest::has_holder() const {
  return _internal_has_holder();
}
inline void PutRequest::set_has_holder() {
  _impl_._oneof_case_[0] = kHolder;
}
inline void PutRequest::clear_holder() {
  if (_internal_has_holder()) {
    _impl_.data_.holder_.Destroy();
    clear_has_data();
  }
}
inline const std::string& PutRequest::holder() const {
  // @@protoc_insertion_point(field_get:blob.PutRequest.holder)
  return _internal_holder();
}
template <typename ArgT0, typename... ArgT>
inline void PutRequest::set_holder(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_holder()) {
    clear_data();
    set_has_holder();
    _impl_.data_.holder_.InitDefault();
  }
  _impl_.data_.holder_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blob.PutRequest.holder)
}
inline std::string* PutRequest::mutable_holder() {
  std::string* _s = _internal_mutable_holder();
  // @@protoc_insertion_point(field_mutable:blob.PutRequest.holder)
  return _s;
}
inline const std::string& PutRequest::_internal_holder() const {
  if (_internal_has_holder()) {
    return _impl_.data_.holder_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PutRequest::_internal_set_holder(const std::string& value) {
  if (!_internal_has_holder()) {
    clear_data();
    set_has_holder();
    _impl_.data_.holder_.InitDefault();
  }
  _impl_.data_.holder_.Set(value, GetArenaForAllocation());
}
inline std::string* PutRequest::_internal_mutable_holder() {
  if (!_internal_has_holder()) {
    clear_data();
    set_has_holder();
    _impl_.data_.holder_.InitDefault();
  }
  return _impl_.data_.holder_.Mutable(      GetArenaForAllocation());
}
inline std::string* PutRequest::release_holder() {
  // @@protoc_insertion_point(field_release:blob.PutRequest.holder)
  if (_internal_has_holder()) {
    clear_has_data();
    return _impl_.data_.holder_.Release();
  } else {
    return nullptr;
  }
}
inline void PutRequest::set_allocated_holder(std::string* holder) {
  if (has_data()) {
    clear_data();
  }
  if (holder != nullptr) {
    set_has_holder();
    _impl_.data_.holder_.InitAllocated(holder, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:blob.PutRequest.holder)
}

// string blobHash = 2;
inline bool PutRequest::_internal_has_blobhash() const {
  return data_case() == kBlobHash;
}
inline bool PutRequest::has_blobhash() const {
  return _internal_has_blobhash();
}
inline void PutRequest::set_has_blobhash() {
  _impl_._oneof_case_[0] = kBlobHash;
}
inline void PutRequest::clear_blobhash() {
  if (_internal_has_blobhash()) {
    _impl_.data_.blobhash_.Destroy();
    clear_has_data();
  }
}
inline const std::string& PutRequest::blobhash() const {
  // @@protoc_insertion_point(field_get:blob.PutRequest.blobHash)
  return _internal_blobhash();
}
template <typename ArgT0, typename... ArgT>
inline void PutRequest::set_blobhash(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_blobhash()) {
    clear_data();
    set_has_blobhash();
    _impl_.data_.blobhash_.InitDefault();
  }
  _impl_.data_.blobhash_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blob.PutRequest.blobHash)
}
inline std::string* PutRequest::mutable_blobhash() {
  std::string* _s = _internal_mutable_blobhash();
  // @@protoc_insertion_point(field_mutable:blob.PutRequest.blobHash)
  return _s;
}
inline const std::string& PutRequest::_internal_blobhash() const {
  if (_internal_has_blobhash()) {
    return _impl_.data_.blobhash_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PutRequest::_internal_set_blobhash(const std::string& value) {
  if (!_internal_has_blobhash()) {
    clear_data();
    set_has_blobhash();
    _impl_.data_.blobhash_.InitDefault();
  }
  _impl_.data_.blobhash_.Set(value, GetArenaForAllocation());
}
inline std::string* PutRequest::_internal_mutable_blobhash() {
  if (!_internal_has_blobhash()) {
    clear_data();
    set_has_blobhash();
    _impl_.data_.blobhash_.InitDefault();
  }
  return _impl_.data_.blobhash_.Mutable(      GetArenaForAllocation());
}
inline std::string* PutRequest::release_blobhash() {
  // @@protoc_insertion_point(field_release:blob.PutRequest.blobHash)
  if (_internal_has_blobhash()) {
    clear_has_data();
    return _impl_.data_.blobhash_.Release();
  } else {
    return nullptr;
  }
}
inline void PutRequest::set_allocated_blobhash(std::string* blobhash) {
  if (has_data()) {
    clear_data();
  }
  if (blobhash != nullptr) {
    set_has_blobhash();
    _impl_.data_.blobhash_.InitAllocated(blobhash, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:blob.PutRequest.blobHash)
}

// bytes dataChunk = 3;
inline bool PutRequest::_internal_has_datachunk() const {
  return data_case() == kDataChunk;
}
inline bool PutRequest::has_datachunk() const {
  return _internal_has_datachunk();
}
inline void PutRequest::set_has_datachunk() {
  _impl_._oneof_case_[0] = kDataChunk;
}
inline void PutRequest::clear_datachunk() {
  if (_internal_has_datachunk()) {
    _impl_.data_.datachunk_.Destroy();
    clear_has_data();
  }
}
inline const std::string& PutRequest::datachunk() const {
  // @@protoc_insertion_point(field_get:blob.PutRequest.dataChunk)
  return _internal_datachunk();
}
template <typename ArgT0, typename... ArgT>
inline void PutRequest::set_datachunk(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_datachunk()) {
    clear_data();
    set_has_datachunk();
    _impl_.data_.datachunk_.InitDefault();
  }
  _impl_.data_.datachunk_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blob.PutRequest.dataChunk)
}
inline std::string* PutRequest::mutable_datachunk() {
  std::string* _s = _internal_mutable_datachunk();
  // @@protoc_insertion_point(field_mutable:blob.PutRequest.dataChunk)
  return _s;
}
inline const std::string& PutRequest::_internal_datachunk() const {
  if (_internal_has_datachunk()) {
    return _impl_.data_.datachunk_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PutRequest::_internal_set_datachunk(const std::string& value) {
  if (!_internal_has_datachunk()) {
    clear_data();
    set_has_datachunk();
    _impl_.data_.datachunk_.InitDefault();
  }
  _impl_.data_.datachunk_.Set(value, GetArenaForAllocation());
}
inline std::string* PutRequest::_internal_mutable_datachunk() {
  if (!_internal_has_datachunk()) {
    clear_data();
    set_has_datachunk();
    _impl_.data_.datachunk_.InitDefault();
  }
  return _impl_.data_.datachunk_.Mutable(      GetArenaForAllocation());
}
inline std::string* PutRequest::release_datachunk() {
  // @@protoc_insertion_point(field_release:blob.PutRequest.dataChunk)
  if (_internal_has_datachunk()) {
    clear_has_data();
    return _impl_.data_.datachunk_.Release();
  } else {
    return nullptr;
  }
}
inline void PutRequest::set_allocated_datachunk(std::string* datachunk) {
  if (has_data()) {
    clear_data();
  }
  if (datachunk != nullptr) {
    set_has_datachunk();
    _impl_.data_.datachunk_.InitAllocated(datachunk, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:blob.PutRequest.dataChunk)
}

inline bool PutRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void PutRequest::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline PutRequest::DataCase PutRequest::data_case() const {
  return PutRequest::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PutResponse

// bool dataExists = 1;
inline void PutResponse::clear_dataexists() {
  _impl_.dataexists_ = false;
}
inline bool PutResponse::_internal_dataexists() const {
  return _impl_.dataexists_;
}
inline bool PutResponse::dataexists() const {
  // @@protoc_insertion_point(field_get:blob.PutResponse.dataExists)
  return _internal_dataexists();
}
inline void PutResponse::_internal_set_dataexists(bool value) {
  
  _impl_.dataexists_ = value;
}
inline void PutResponse::set_dataexists(bool value) {
  _internal_set_dataexists(value);
  // @@protoc_insertion_point(field_set:blob.PutResponse.dataExists)
}

// -------------------------------------------------------------------

// GetRequest

// string holder = 1;
inline void GetRequest::clear_holder() {
  _impl_.holder_.ClearToEmpty();
}
inline const std::string& GetRequest::holder() const {
  // @@protoc_insertion_point(field_get:blob.GetRequest.holder)
  return _internal_holder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRequest::set_holder(ArgT0&& arg0, ArgT... args) {
 
 _impl_.holder_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blob.GetRequest.holder)
}
inline std::string* GetRequest::mutable_holder() {
  std::string* _s = _internal_mutable_holder();
  // @@protoc_insertion_point(field_mutable:blob.GetRequest.holder)
  return _s;
}
inline const std::string& GetRequest::_internal_holder() const {
  return _impl_.holder_.Get();
}
inline void GetRequest::_internal_set_holder(const std::string& value) {
  
  _impl_.holder_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRequest::_internal_mutable_holder() {
  
  return _impl_.holder_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRequest::release_holder() {
  // @@protoc_insertion_point(field_release:blob.GetRequest.holder)
  return _impl_.holder_.Release();
}
inline void GetRequest::set_allocated_holder(std::string* holder) {
  if (holder != nullptr) {
    
  } else {
    
  }
  _impl_.holder_.SetAllocated(holder, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.holder_.IsDefault()) {
    _impl_.holder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blob.GetRequest.holder)
}

// -------------------------------------------------------------------

// GetResponse

// bytes dataChunk = 1;
inline void GetResponse::clear_datachunk() {
  _impl_.datachunk_.ClearToEmpty();
}
inline const std::string& GetResponse::datachunk() const {
  // @@protoc_insertion_point(field_get:blob.GetResponse.dataChunk)
  return _internal_datachunk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetResponse::set_datachunk(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datachunk_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blob.GetResponse.dataChunk)
}
inline std::string* GetResponse::mutable_datachunk() {
  std::string* _s = _internal_mutable_datachunk();
  // @@protoc_insertion_point(field_mutable:blob.GetResponse.dataChunk)
  return _s;
}
inline const std::string& GetResponse::_internal_datachunk() const {
  return _impl_.datachunk_.Get();
}
inline void GetResponse::_internal_set_datachunk(const std::string& value) {
  
  _impl_.datachunk_.Set(value, GetArenaForAllocation());
}
inline std::string* GetResponse::_internal_mutable_datachunk() {
  
  return _impl_.datachunk_.Mutable(GetArenaForAllocation());
}
inline std::string* GetResponse::release_datachunk() {
  // @@protoc_insertion_point(field_release:blob.GetResponse.dataChunk)
  return _impl_.datachunk_.Release();
}
inline void GetResponse::set_allocated_datachunk(std::string* datachunk) {
  if (datachunk != nullptr) {
    
  } else {
    
  }
  _impl_.datachunk_.SetAllocated(datachunk, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datachunk_.IsDefault()) {
    _impl_.datachunk_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blob.GetResponse.dataChunk)
}

// -------------------------------------------------------------------

// RemoveRequest

// string holder = 1;
inline void RemoveRequest::clear_holder() {
  _impl_.holder_.ClearToEmpty();
}
inline const std::string& RemoveRequest::holder() const {
  // @@protoc_insertion_point(field_get:blob.RemoveRequest.holder)
  return _internal_holder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveRequest::set_holder(ArgT0&& arg0, ArgT... args) {
 
 _impl_.holder_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blob.RemoveRequest.holder)
}
inline std::string* RemoveRequest::mutable_holder() {
  std::string* _s = _internal_mutable_holder();
  // @@protoc_insertion_point(field_mutable:blob.RemoveRequest.holder)
  return _s;
}
inline const std::string& RemoveRequest::_internal_holder() const {
  return _impl_.holder_.Get();
}
inline void RemoveRequest::_internal_set_holder(const std::string& value) {
  
  _impl_.holder_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveRequest::_internal_mutable_holder() {
  
  return _impl_.holder_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveRequest::release_holder() {
  // @@protoc_insertion_point(field_release:blob.RemoveRequest.holder)
  return _impl_.holder_.Release();
}
inline void RemoveRequest::set_allocated_holder(std::string* holder) {
  if (holder != nullptr) {
    
  } else {
    
  }
  _impl_.holder_.SetAllocated(holder, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.holder_.IsDefault()) {
    _impl_.holder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blob.RemoveRequest.holder)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blob

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blob_2eproto
