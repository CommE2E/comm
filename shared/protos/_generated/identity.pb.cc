// @generated by the protocol buffer compiler.  DO NOT EDIT!
// source: identity.proto

#include "identity.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace identity {
PROTOBUF_CONSTEXPR PakeRegistrationRequestAndUserID::PakeRegistrationRequestAndUserID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pakeregistrationrequest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userpublickey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PakeRegistrationRequestAndUserIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PakeRegistrationRequestAndUserIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PakeRegistrationRequestAndUserIDDefaultTypeInternal() {}
  union {
    PakeRegistrationRequestAndUserID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PakeRegistrationRequestAndUserIDDefaultTypeInternal _PakeRegistrationRequestAndUserID_default_instance_;
PROTOBUF_CONSTEXPR PakeCredentialRequestAndUserID::PakeCredentialRequestAndUserID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pakecredentialrequest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userpublickey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PakeCredentialRequestAndUserIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PakeCredentialRequestAndUserIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PakeCredentialRequestAndUserIDDefaultTypeInternal() {}
  union {
    PakeCredentialRequestAndUserID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PakeCredentialRequestAndUserIDDefaultTypeInternal _PakeCredentialRequestAndUserID_default_instance_;
PROTOBUF_CONSTEXPR PakeLoginRequest::PakeLoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PakeLoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PakeLoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PakeLoginRequestDefaultTypeInternal() {}
  union {
    PakeLoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PakeLoginRequestDefaultTypeInternal _PakeLoginRequest_default_instance_;
PROTOBUF_CONSTEXPR PakeLoginResponse::PakeLoginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PakeLoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PakeLoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PakeLoginResponseDefaultTypeInternal() {}
  union {
    PakeLoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PakeLoginResponseDefaultTypeInternal _PakeLoginResponse_default_instance_;
PROTOBUF_CONSTEXPR PakeRegistrationUploadAndCredentialRequest::PakeRegistrationUploadAndCredentialRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pakeregistrationupload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pakecredentialrequest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PakeRegistrationUploadAndCredentialRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PakeRegistrationUploadAndCredentialRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PakeRegistrationUploadAndCredentialRequestDefaultTypeInternal() {}
  union {
    PakeRegistrationUploadAndCredentialRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PakeRegistrationUploadAndCredentialRequestDefaultTypeInternal _PakeRegistrationUploadAndCredentialRequest_default_instance_;
PROTOBUF_CONSTEXPR WalletLoginRequest::WalletLoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.siwemessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.siwesignature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userpublickey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WalletLoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WalletLoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WalletLoginRequestDefaultTypeInternal() {}
  union {
    WalletLoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WalletLoginRequestDefaultTypeInternal _WalletLoginRequest_default_instance_;
PROTOBUF_CONSTEXPR WalletLoginResponse::WalletLoginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WalletLoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WalletLoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WalletLoginResponseDefaultTypeInternal() {}
  union {
    WalletLoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WalletLoginResponseDefaultTypeInternal _WalletLoginResponse_default_instance_;
PROTOBUF_CONSTEXPR RegistrationRequest::RegistrationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RegistrationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistrationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistrationRequestDefaultTypeInternal() {}
  union {
    RegistrationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistrationRequestDefaultTypeInternal _RegistrationRequest_default_instance_;
PROTOBUF_CONSTEXPR RegistrationResponse::RegistrationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RegistrationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistrationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistrationResponseDefaultTypeInternal() {}
  union {
    RegistrationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistrationResponseDefaultTypeInternal _RegistrationResponse_default_instance_;
PROTOBUF_CONSTEXPR LoginRequest::LoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginRequestDefaultTypeInternal() {}
  union {
    LoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
PROTOBUF_CONSTEXPR LoginResponse::LoginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginResponseDefaultTypeInternal() {}
  union {
    LoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
PROTOBUF_CONSTEXPR VerifyUserTokenRequest::VerifyUserTokenRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VerifyUserTokenRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyUserTokenRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyUserTokenRequestDefaultTypeInternal() {}
  union {
    VerifyUserTokenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyUserTokenRequestDefaultTypeInternal _VerifyUserTokenRequest_default_instance_;
PROTOBUF_CONSTEXPR VerifyUserTokenResponse::VerifyUserTokenResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tokenvalid_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VerifyUserTokenResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyUserTokenResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyUserTokenResponseDefaultTypeInternal() {}
  union {
    VerifyUserTokenResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyUserTokenResponseDefaultTypeInternal _VerifyUserTokenResponse_default_instance_;
PROTOBUF_CONSTEXPR GetUserIDRequest::GetUserIDRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.authtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserIDRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserIDRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserIDRequestDefaultTypeInternal() {}
  union {
    GetUserIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserIDRequestDefaultTypeInternal _GetUserIDRequest_default_instance_;
PROTOBUF_CONSTEXPR GetUserIDResponse::GetUserIDResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUserIDResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserIDResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserIDResponseDefaultTypeInternal() {}
  union {
    GetUserIDResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserIDResponseDefaultTypeInternal _GetUserIDResponse_default_instance_;
}  // namespace identity
static ::_pb::Metadata file_level_metadata_identity_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_identity_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_identity_2eproto = nullptr;

const uint32_t TableStruct_identity_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::identity::PakeRegistrationRequestAndUserID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::identity::PakeRegistrationRequestAndUserID, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::identity::PakeRegistrationRequestAndUserID, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::identity::PakeRegistrationRequestAndUserID, _impl_.pakeregistrationrequest_),
  PROTOBUF_FIELD_OFFSET(::identity::PakeRegistrationRequestAndUserID, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::identity::PakeRegistrationRequestAndUserID, _impl_.userpublickey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::identity::PakeCredentialRequestAndUserID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::identity::PakeCredentialRequestAndUserID, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::identity::PakeCredentialRequestAndUserID, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::identity::PakeCredentialRequestAndUserID, _impl_.pakecredentialrequest_),
  PROTOBUF_FIELD_OFFSET(::identity::PakeCredentialRequestAndUserID, _impl_.userpublickey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::identity::PakeLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::identity::PakeLoginRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::identity::PakeLoginRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::identity::PakeLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::identity::PakeLoginResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::identity::PakeLoginResponse, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::identity::PakeRegistrationUploadAndCredentialRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::identity::PakeRegistrationUploadAndCredentialRequest, _impl_.pakeregistrationupload_),
  PROTOBUF_FIELD_OFFSET(::identity::PakeRegistrationUploadAndCredentialRequest, _impl_.pakecredentialrequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::identity::WalletLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::identity::WalletLoginRequest, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::identity::WalletLoginRequest, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::identity::WalletLoginRequest, _impl_.siwemessage_),
  PROTOBUF_FIELD_OFFSET(::identity::WalletLoginRequest, _impl_.siwesignature_),
  PROTOBUF_FIELD_OFFSET(::identity::WalletLoginRequest, _impl_.userpublickey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::identity::WalletLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::identity::WalletLoginResponse, _impl_.accesstoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::identity::RegistrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::identity::RegistrationRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::identity::RegistrationRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::identity::RegistrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::identity::RegistrationResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::identity::RegistrationResponse, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::identity::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::identity::LoginRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::identity::LoginRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::identity::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::identity::LoginResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::identity::LoginResponse, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::identity::VerifyUserTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::identity::VerifyUserTokenRequest, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::identity::VerifyUserTokenRequest, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::identity::VerifyUserTokenRequest, _impl_.accesstoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::identity::VerifyUserTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::identity::VerifyUserTokenResponse, _impl_.tokenvalid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::identity::GetUserIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::identity::GetUserIDRequest, _impl_.authtype_),
  PROTOBUF_FIELD_OFFSET(::identity::GetUserIDRequest, _impl_.userinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::identity::GetUserIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::identity::GetUserIDResponse, _impl_.userid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::identity::PakeRegistrationRequestAndUserID)},
  { 11, -1, -1, sizeof(::identity::PakeCredentialRequestAndUserID)},
  { 21, -1, -1, sizeof(::identity::PakeLoginRequest)},
  { 30, -1, -1, sizeof(::identity::PakeLoginResponse)},
  { 39, -1, -1, sizeof(::identity::PakeRegistrationUploadAndCredentialRequest)},
  { 47, -1, -1, sizeof(::identity::WalletLoginRequest)},
  { 58, -1, -1, sizeof(::identity::WalletLoginResponse)},
  { 65, -1, -1, sizeof(::identity::RegistrationRequest)},
  { 75, -1, -1, sizeof(::identity::RegistrationResponse)},
  { 84, -1, -1, sizeof(::identity::LoginRequest)},
  { 93, -1, -1, sizeof(::identity::LoginResponse)},
  { 102, -1, -1, sizeof(::identity::VerifyUserTokenRequest)},
  { 111, -1, -1, sizeof(::identity::VerifyUserTokenResponse)},
  { 118, -1, -1, sizeof(::identity::GetUserIDRequest)},
  { 126, -1, -1, sizeof(::identity::GetUserIDResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::identity::_PakeRegistrationRequestAndUserID_default_instance_._instance,
  &::identity::_PakeCredentialRequestAndUserID_default_instance_._instance,
  &::identity::_PakeLoginRequest_default_instance_._instance,
  &::identity::_PakeLoginResponse_default_instance_._instance,
  &::identity::_PakeRegistrationUploadAndCredentialRequest_default_instance_._instance,
  &::identity::_WalletLoginRequest_default_instance_._instance,
  &::identity::_WalletLoginResponse_default_instance_._instance,
  &::identity::_RegistrationRequest_default_instance_._instance,
  &::identity::_RegistrationResponse_default_instance_._instance,
  &::identity::_LoginRequest_default_instance_._instance,
  &::identity::_LoginResponse_default_instance_._instance,
  &::identity::_VerifyUserTokenRequest_default_instance_._instance,
  &::identity::_VerifyUserTokenResponse_default_instance_._instance,
  &::identity::_GetUserIDRequest_default_instance_._instance,
  &::identity::_GetUserIDResponse_default_instance_._instance,
};

const char descriptor_table_protodef_identity_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016identity.proto\022\010identity\"\216\001\n PakeRegis"
  "trationRequestAndUserID\022\016\n\006userID\030\001 \001(\t\022"
  "\020\n\010deviceID\030\002 \001(\t\022\037\n\027pakeRegistrationReq"
  "uest\030\003 \001(\014\022\020\n\010username\030\004 \001(\t\022\025\n\ruserPubl"
  "icKey\030\005 \001(\t\"x\n\036PakeCredentialRequestAndU"
  "serID\022\016\n\006userID\030\001 \001(\t\022\020\n\010deviceID\030\002 \001(\t\022"
  "\035\n\025pakeCredentialRequest\030\003 \001(\014\022\025\n\ruserPu"
  "blicKey\030\004 \001(\t\"\224\001\n\020PakeLoginRequest\022R\n\036pa"
  "keCredentialRequestAndUserID\030\001 \001(\0132(.ide"
  "ntity.PakeCredentialRequestAndUserIDH\000\022$"
  "\n\032pakeCredentialFinalization\030\002 \001(\014H\000B\006\n\004"
  "data\"T\n\021PakeLoginResponse\022 \n\026pakeCredent"
  "ialResponse\030\001 \001(\014H\000\022\025\n\013accessToken\030\002 \001(\t"
  "H\000B\006\n\004data\"k\n*PakeRegistrationUploadAndC"
  "redentialRequest\022\036\n\026pakeRegistrationUplo"
  "ad\030\001 \001(\014\022\035\n\025pakeCredentialRequest\030\002 \001(\014\""
  "y\n\022WalletLoginRequest\022\016\n\006userID\030\001 \001(\t\022\020\n"
  "\010deviceID\030\002 \001(\t\022\023\n\013siweMessage\030\003 \001(\t\022\025\n\r"
  "siweSignature\030\004 \001(\014\022\025\n\ruserPublicKey\030\005 \001"
  "(\t\"*\n\023WalletLoginResponse\022\023\n\013accessToken"
  "\030\001 \001(\t\"\207\002\n\023RegistrationRequest\022V\n pakeRe"
  "gistrationRequestAndUserID\030\001 \001(\0132*.ident"
  "ity.PakeRegistrationRequestAndUserIDH\000\022j"
  "\n*pakeRegistrationUploadAndCredentialReq"
  "uest\030\002 \001(\01324.identity.PakeRegistrationUp"
  "loadAndCredentialRequestH\000\022$\n\032pakeCreden"
  "tialFinalization\030\003 \001(\014H\000B\006\n\004data\"|\n\024Regi"
  "strationResponse\022\"\n\030pakeRegistrationResp"
  "onse\030\001 \001(\014H\000\0228\n\021pakeLoginResponse\030\002 \001(\0132"
  "\033.identity.PakeLoginResponseH\000B\006\n\004data\"\212"
  "\001\n\014LoginRequest\0226\n\020pakeLoginRequest\030\001 \001("
  "\0132\032.identity.PakeLoginRequestH\000\022:\n\022walle"
  "tLoginRequest\030\002 \001(\0132\034.identity.WalletLog"
  "inRequestH\000B\006\n\004data\"\217\001\n\rLoginResponse\0228\n"
  "\021pakeLoginResponse\030\001 \001(\0132\033.identity.Pake"
  "LoginResponseH\000\022<\n\023walletLoginResponse\030\002"
  " \001(\0132\035.identity.WalletLoginResponseH\000B\006\n"
  "\004data\"O\n\026VerifyUserTokenRequest\022\016\n\006userI"
  "D\030\001 \001(\t\022\020\n\010deviceID\030\002 \001(\t\022\023\n\013accessToken"
  "\030\003 \001(\t\"-\n\027VerifyUserTokenResponse\022\022\n\ntok"
  "enValid\030\001 \001(\010\"\201\001\n\020GetUserIDRequest\0225\n\010au"
  "thType\030\001 \001(\0162#.identity.GetUserIDRequest"
  ".AuthType\022\020\n\010userInfo\030\002 \001(\t\"$\n\010AuthType\022"
  "\014\n\010PASSWORD\020\000\022\n\n\006WALLET\020\001\"#\n\021GetUserIDRe"
  "sponse\022\016\n\006userID\030\001 \001(\t2\314\002\n\017IdentityServi"
  "ce\022S\n\014RegisterUser\022\035.identity.Registrati"
  "onRequest\032\036.identity.RegistrationRespons"
  "e\"\000(\0010\001\022B\n\tLoginUser\022\026.identity.LoginReq"
  "uest\032\027.identity.LoginResponse\"\000(\0010\001\022X\n\017V"
  "erifyUserToken\022 .identity.VerifyUserToke"
  "nRequest\032!.identity.VerifyUserTokenRespo"
  "nse\"\000\022F\n\tGetUserID\022\032.identity.GetUserIDR"
  "equest\032\033.identity.GetUserIDResponse\"\000b\006p"
  "roto3"
  ;
static ::_pbi::once_flag descriptor_table_identity_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_identity_2eproto = {
    false, false, 2125, descriptor_table_protodef_identity_2eproto,
    "identity.proto",
    &descriptor_table_identity_2eproto_once, nullptr, 0, 15,
    schemas, file_default_instances, TableStruct_identity_2eproto::offsets,
    file_level_metadata_identity_2eproto, file_level_enum_descriptors_identity_2eproto,
    file_level_service_descriptors_identity_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_identity_2eproto_getter() {
  return &descriptor_table_identity_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_identity_2eproto(&descriptor_table_identity_2eproto);
namespace identity {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetUserIDRequest_AuthType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_identity_2eproto);
  return file_level_enum_descriptors_identity_2eproto[0];
}
bool GetUserIDRequest_AuthType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetUserIDRequest_AuthType GetUserIDRequest::PASSWORD;
constexpr GetUserIDRequest_AuthType GetUserIDRequest::WALLET;
constexpr GetUserIDRequest_AuthType GetUserIDRequest::AuthType_MIN;
constexpr GetUserIDRequest_AuthType GetUserIDRequest::AuthType_MAX;
constexpr int GetUserIDRequest::AuthType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PakeRegistrationRequestAndUserID::_Internal {
 public:
};

PakeRegistrationRequestAndUserID::PakeRegistrationRequestAndUserID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:identity.PakeRegistrationRequestAndUserID)
}
PakeRegistrationRequestAndUserID::PakeRegistrationRequestAndUserID(const PakeRegistrationRequestAndUserID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PakeRegistrationRequestAndUserID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.pakeregistrationrequest_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.userpublickey_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pakeregistrationrequest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pakeregistrationrequest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pakeregistrationrequest().empty()) {
    _this->_impl_.pakeregistrationrequest_.Set(from._internal_pakeregistrationrequest(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.userpublickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userpublickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userpublickey().empty()) {
    _this->_impl_.userpublickey_.Set(from._internal_userpublickey(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:identity.PakeRegistrationRequestAndUserID)
}

inline void PakeRegistrationRequestAndUserID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.pakeregistrationrequest_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.userpublickey_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pakeregistrationrequest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pakeregistrationrequest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.userpublickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userpublickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PakeRegistrationRequestAndUserID::~PakeRegistrationRequestAndUserID() {
  // @@protoc_insertion_point(destructor:identity.PakeRegistrationRequestAndUserID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PakeRegistrationRequestAndUserID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
  _impl_.deviceid_.Destroy();
  _impl_.pakeregistrationrequest_.Destroy();
  _impl_.username_.Destroy();
  _impl_.userpublickey_.Destroy();
}

void PakeRegistrationRequestAndUserID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PakeRegistrationRequestAndUserID::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.PakeRegistrationRequestAndUserID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _impl_.deviceid_.ClearToEmpty();
  _impl_.pakeregistrationrequest_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  _impl_.userpublickey_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PakeRegistrationRequestAndUserID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.PakeRegistrationRequestAndUserID.userID"));
        } else
          goto handle_unusual;
        continue;
      // string deviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.PakeRegistrationRequestAndUserID.deviceID"));
        } else
          goto handle_unusual;
        continue;
      // bytes pakeRegistrationRequest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pakeregistrationrequest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.PakeRegistrationRequestAndUserID.username"));
        } else
          goto handle_unusual;
        continue;
      // string userPublicKey = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_userpublickey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.PakeRegistrationRequestAndUserID.userPublicKey"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PakeRegistrationRequestAndUserID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identity.PakeRegistrationRequestAndUserID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.PakeRegistrationRequestAndUserID.userID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // string deviceID = 2;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.PakeRegistrationRequestAndUserID.deviceID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  // bytes pakeRegistrationRequest = 3;
  if (!this->_internal_pakeregistrationrequest().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pakeregistrationrequest(), target);
  }

  // string username = 4;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.PakeRegistrationRequestAndUserID.username");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_username(), target);
  }

  // string userPublicKey = 5;
  if (!this->_internal_userpublickey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userpublickey().data(), static_cast<int>(this->_internal_userpublickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.PakeRegistrationRequestAndUserID.userPublicKey");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_userpublickey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identity.PakeRegistrationRequestAndUserID)
  return target;
}

size_t PakeRegistrationRequestAndUserID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identity.PakeRegistrationRequestAndUserID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string deviceID = 2;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // bytes pakeRegistrationRequest = 3;
  if (!this->_internal_pakeregistrationrequest().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pakeregistrationrequest());
  }

  // string username = 4;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string userPublicKey = 5;
  if (!this->_internal_userpublickey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userpublickey());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PakeRegistrationRequestAndUserID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PakeRegistrationRequestAndUserID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PakeRegistrationRequestAndUserID::GetClassData() const { return &_class_data_; }


void PakeRegistrationRequestAndUserID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PakeRegistrationRequestAndUserID*>(&to_msg);
  auto& from = static_cast<const PakeRegistrationRequestAndUserID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.PakeRegistrationRequestAndUserID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (!from._internal_deviceid().empty()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_pakeregistrationrequest().empty()) {
    _this->_internal_set_pakeregistrationrequest(from._internal_pakeregistrationrequest());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_userpublickey().empty()) {
    _this->_internal_set_userpublickey(from._internal_userpublickey());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PakeRegistrationRequestAndUserID::CopyFrom(const PakeRegistrationRequestAndUserID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.PakeRegistrationRequestAndUserID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PakeRegistrationRequestAndUserID::IsInitialized() const {
  return true;
}

void PakeRegistrationRequestAndUserID::InternalSwap(PakeRegistrationRequestAndUserID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userid_, lhs_arena,
      &other->_impl_.userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pakeregistrationrequest_, lhs_arena,
      &other->_impl_.pakeregistrationrequest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userpublickey_, lhs_arena,
      &other->_impl_.userpublickey_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PakeRegistrationRequestAndUserID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_identity_2eproto_getter, &descriptor_table_identity_2eproto_once,
      file_level_metadata_identity_2eproto[0]);
}

// ===================================================================

class PakeCredentialRequestAndUserID::_Internal {
 public:
};

PakeCredentialRequestAndUserID::PakeCredentialRequestAndUserID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:identity.PakeCredentialRequestAndUserID)
}
PakeCredentialRequestAndUserID::PakeCredentialRequestAndUserID(const PakeCredentialRequestAndUserID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PakeCredentialRequestAndUserID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.pakecredentialrequest_){}
    , decltype(_impl_.userpublickey_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pakecredentialrequest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pakecredentialrequest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pakecredentialrequest().empty()) {
    _this->_impl_.pakecredentialrequest_.Set(from._internal_pakecredentialrequest(), 
      _this->GetArenaForAllocation());
  }
  _impl_.userpublickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userpublickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userpublickey().empty()) {
    _this->_impl_.userpublickey_.Set(from._internal_userpublickey(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:identity.PakeCredentialRequestAndUserID)
}

inline void PakeCredentialRequestAndUserID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.pakecredentialrequest_){}
    , decltype(_impl_.userpublickey_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pakecredentialrequest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pakecredentialrequest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.userpublickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userpublickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PakeCredentialRequestAndUserID::~PakeCredentialRequestAndUserID() {
  // @@protoc_insertion_point(destructor:identity.PakeCredentialRequestAndUserID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PakeCredentialRequestAndUserID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
  _impl_.deviceid_.Destroy();
  _impl_.pakecredentialrequest_.Destroy();
  _impl_.userpublickey_.Destroy();
}

void PakeCredentialRequestAndUserID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PakeCredentialRequestAndUserID::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.PakeCredentialRequestAndUserID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _impl_.deviceid_.ClearToEmpty();
  _impl_.pakecredentialrequest_.ClearToEmpty();
  _impl_.userpublickey_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PakeCredentialRequestAndUserID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.PakeCredentialRequestAndUserID.userID"));
        } else
          goto handle_unusual;
        continue;
      // string deviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.PakeCredentialRequestAndUserID.deviceID"));
        } else
          goto handle_unusual;
        continue;
      // bytes pakeCredentialRequest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pakecredentialrequest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string userPublicKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_userpublickey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.PakeCredentialRequestAndUserID.userPublicKey"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PakeCredentialRequestAndUserID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identity.PakeCredentialRequestAndUserID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.PakeCredentialRequestAndUserID.userID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // string deviceID = 2;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.PakeCredentialRequestAndUserID.deviceID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  // bytes pakeCredentialRequest = 3;
  if (!this->_internal_pakecredentialrequest().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pakecredentialrequest(), target);
  }

  // string userPublicKey = 4;
  if (!this->_internal_userpublickey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userpublickey().data(), static_cast<int>(this->_internal_userpublickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.PakeCredentialRequestAndUserID.userPublicKey");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_userpublickey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identity.PakeCredentialRequestAndUserID)
  return target;
}

size_t PakeCredentialRequestAndUserID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identity.PakeCredentialRequestAndUserID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string deviceID = 2;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // bytes pakeCredentialRequest = 3;
  if (!this->_internal_pakecredentialrequest().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pakecredentialrequest());
  }

  // string userPublicKey = 4;
  if (!this->_internal_userpublickey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userpublickey());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PakeCredentialRequestAndUserID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PakeCredentialRequestAndUserID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PakeCredentialRequestAndUserID::GetClassData() const { return &_class_data_; }


void PakeCredentialRequestAndUserID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PakeCredentialRequestAndUserID*>(&to_msg);
  auto& from = static_cast<const PakeCredentialRequestAndUserID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.PakeCredentialRequestAndUserID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (!from._internal_deviceid().empty()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_pakecredentialrequest().empty()) {
    _this->_internal_set_pakecredentialrequest(from._internal_pakecredentialrequest());
  }
  if (!from._internal_userpublickey().empty()) {
    _this->_internal_set_userpublickey(from._internal_userpublickey());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PakeCredentialRequestAndUserID::CopyFrom(const PakeCredentialRequestAndUserID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.PakeCredentialRequestAndUserID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PakeCredentialRequestAndUserID::IsInitialized() const {
  return true;
}

void PakeCredentialRequestAndUserID::InternalSwap(PakeCredentialRequestAndUserID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userid_, lhs_arena,
      &other->_impl_.userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pakecredentialrequest_, lhs_arena,
      &other->_impl_.pakecredentialrequest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userpublickey_, lhs_arena,
      &other->_impl_.userpublickey_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PakeCredentialRequestAndUserID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_identity_2eproto_getter, &descriptor_table_identity_2eproto_once,
      file_level_metadata_identity_2eproto[1]);
}

// ===================================================================

class PakeLoginRequest::_Internal {
 public:
  static const ::identity::PakeCredentialRequestAndUserID& pakecredentialrequestanduserid(const PakeLoginRequest* msg);
};

const ::identity::PakeCredentialRequestAndUserID&
PakeLoginRequest::_Internal::pakecredentialrequestanduserid(const PakeLoginRequest* msg) {
  return *msg->_impl_.data_.pakecredentialrequestanduserid_;
}
void PakeLoginRequest::set_allocated_pakecredentialrequestanduserid(::identity::PakeCredentialRequestAndUserID* pakecredentialrequestanduserid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (pakecredentialrequestanduserid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pakecredentialrequestanduserid);
    if (message_arena != submessage_arena) {
      pakecredentialrequestanduserid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pakecredentialrequestanduserid, submessage_arena);
    }
    set_has_pakecredentialrequestanduserid();
    _impl_.data_.pakecredentialrequestanduserid_ = pakecredentialrequestanduserid;
  }
  // @@protoc_insertion_point(field_set_allocated:identity.PakeLoginRequest.pakeCredentialRequestAndUserID)
}
PakeLoginRequest::PakeLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:identity.PakeLoginRequest)
}
PakeLoginRequest::PakeLoginRequest(const PakeLoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PakeLoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kPakeCredentialRequestAndUserID: {
      _this->_internal_mutable_pakecredentialrequestanduserid()->::identity::PakeCredentialRequestAndUserID::MergeFrom(
          from._internal_pakecredentialrequestanduserid());
      break;
    }
    case kPakeCredentialFinalization: {
      _this->_internal_set_pakecredentialfinalization(from._internal_pakecredentialfinalization());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:identity.PakeLoginRequest)
}

inline void PakeLoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

PakeLoginRequest::~PakeLoginRequest() {
  // @@protoc_insertion_point(destructor:identity.PakeLoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PakeLoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void PakeLoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PakeLoginRequest::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:identity.PakeLoginRequest)
  switch (data_case()) {
    case kPakeCredentialRequestAndUserID: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.pakecredentialrequestanduserid_;
      }
      break;
    }
    case kPakeCredentialFinalization: {
      _impl_.data_.pakecredentialfinalization_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void PakeLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.PakeLoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PakeLoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .identity.PakeCredentialRequestAndUserID pakeCredentialRequestAndUserID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pakecredentialrequestanduserid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pakeCredentialFinalization = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pakecredentialfinalization();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PakeLoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identity.PakeLoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .identity.PakeCredentialRequestAndUserID pakeCredentialRequestAndUserID = 1;
  if (_internal_has_pakecredentialrequestanduserid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pakecredentialrequestanduserid(this),
        _Internal::pakecredentialrequestanduserid(this).GetCachedSize(), target, stream);
  }

  // bytes pakeCredentialFinalization = 2;
  if (_internal_has_pakecredentialfinalization()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pakecredentialfinalization(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identity.PakeLoginRequest)
  return target;
}

size_t PakeLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identity.PakeLoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .identity.PakeCredentialRequestAndUserID pakeCredentialRequestAndUserID = 1;
    case kPakeCredentialRequestAndUserID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.pakecredentialrequestanduserid_);
      break;
    }
    // bytes pakeCredentialFinalization = 2;
    case kPakeCredentialFinalization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pakecredentialfinalization());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PakeLoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PakeLoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PakeLoginRequest::GetClassData() const { return &_class_data_; }


void PakeLoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PakeLoginRequest*>(&to_msg);
  auto& from = static_cast<const PakeLoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.PakeLoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kPakeCredentialRequestAndUserID: {
      _this->_internal_mutable_pakecredentialrequestanduserid()->::identity::PakeCredentialRequestAndUserID::MergeFrom(
          from._internal_pakecredentialrequestanduserid());
      break;
    }
    case kPakeCredentialFinalization: {
      _this->_internal_set_pakecredentialfinalization(from._internal_pakecredentialfinalization());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PakeLoginRequest::CopyFrom(const PakeLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.PakeLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PakeLoginRequest::IsInitialized() const {
  return true;
}

void PakeLoginRequest::InternalSwap(PakeLoginRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PakeLoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_identity_2eproto_getter, &descriptor_table_identity_2eproto_once,
      file_level_metadata_identity_2eproto[2]);
}

// ===================================================================

class PakeLoginResponse::_Internal {
 public:
};

PakeLoginResponse::PakeLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:identity.PakeLoginResponse)
}
PakeLoginResponse::PakeLoginResponse(const PakeLoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PakeLoginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kPakeCredentialResponse: {
      _this->_internal_set_pakecredentialresponse(from._internal_pakecredentialresponse());
      break;
    }
    case kAccessToken: {
      _this->_internal_set_accesstoken(from._internal_accesstoken());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:identity.PakeLoginResponse)
}

inline void PakeLoginResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

PakeLoginResponse::~PakeLoginResponse() {
  // @@protoc_insertion_point(destructor:identity.PakeLoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PakeLoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void PakeLoginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PakeLoginResponse::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:identity.PakeLoginResponse)
  switch (data_case()) {
    case kPakeCredentialResponse: {
      _impl_.data_.pakecredentialresponse_.Destroy();
      break;
    }
    case kAccessToken: {
      _impl_.data_.accesstoken_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void PakeLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.PakeLoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PakeLoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pakeCredentialResponse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pakecredentialresponse();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.PakeLoginResponse.accessToken"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PakeLoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identity.PakeLoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pakeCredentialResponse = 1;
  if (_internal_has_pakecredentialresponse()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pakecredentialresponse(), target);
  }

  // string accessToken = 2;
  if (_internal_has_accesstoken()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.PakeLoginResponse.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identity.PakeLoginResponse)
  return target;
}

size_t PakeLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identity.PakeLoginResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // bytes pakeCredentialResponse = 1;
    case kPakeCredentialResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pakecredentialresponse());
      break;
    }
    // string accessToken = 2;
    case kAccessToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_accesstoken());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PakeLoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PakeLoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PakeLoginResponse::GetClassData() const { return &_class_data_; }


void PakeLoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PakeLoginResponse*>(&to_msg);
  auto& from = static_cast<const PakeLoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.PakeLoginResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kPakeCredentialResponse: {
      _this->_internal_set_pakecredentialresponse(from._internal_pakecredentialresponse());
      break;
    }
    case kAccessToken: {
      _this->_internal_set_accesstoken(from._internal_accesstoken());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PakeLoginResponse::CopyFrom(const PakeLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.PakeLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PakeLoginResponse::IsInitialized() const {
  return true;
}

void PakeLoginResponse::InternalSwap(PakeLoginResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PakeLoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_identity_2eproto_getter, &descriptor_table_identity_2eproto_once,
      file_level_metadata_identity_2eproto[3]);
}

// ===================================================================

class PakeRegistrationUploadAndCredentialRequest::_Internal {
 public:
};

PakeRegistrationUploadAndCredentialRequest::PakeRegistrationUploadAndCredentialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:identity.PakeRegistrationUploadAndCredentialRequest)
}
PakeRegistrationUploadAndCredentialRequest::PakeRegistrationUploadAndCredentialRequest(const PakeRegistrationUploadAndCredentialRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PakeRegistrationUploadAndCredentialRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pakeregistrationupload_){}
    , decltype(_impl_.pakecredentialrequest_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pakeregistrationupload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pakeregistrationupload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pakeregistrationupload().empty()) {
    _this->_impl_.pakeregistrationupload_.Set(from._internal_pakeregistrationupload(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pakecredentialrequest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pakecredentialrequest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pakecredentialrequest().empty()) {
    _this->_impl_.pakecredentialrequest_.Set(from._internal_pakecredentialrequest(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:identity.PakeRegistrationUploadAndCredentialRequest)
}

inline void PakeRegistrationUploadAndCredentialRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pakeregistrationupload_){}
    , decltype(_impl_.pakecredentialrequest_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pakeregistrationupload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pakeregistrationupload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pakecredentialrequest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pakecredentialrequest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PakeRegistrationUploadAndCredentialRequest::~PakeRegistrationUploadAndCredentialRequest() {
  // @@protoc_insertion_point(destructor:identity.PakeRegistrationUploadAndCredentialRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PakeRegistrationUploadAndCredentialRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pakeregistrationupload_.Destroy();
  _impl_.pakecredentialrequest_.Destroy();
}

void PakeRegistrationUploadAndCredentialRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PakeRegistrationUploadAndCredentialRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.PakeRegistrationUploadAndCredentialRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pakeregistrationupload_.ClearToEmpty();
  _impl_.pakecredentialrequest_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PakeRegistrationUploadAndCredentialRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pakeRegistrationUpload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pakeregistrationupload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pakeCredentialRequest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pakecredentialrequest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PakeRegistrationUploadAndCredentialRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identity.PakeRegistrationUploadAndCredentialRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pakeRegistrationUpload = 1;
  if (!this->_internal_pakeregistrationupload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pakeregistrationupload(), target);
  }

  // bytes pakeCredentialRequest = 2;
  if (!this->_internal_pakecredentialrequest().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pakecredentialrequest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identity.PakeRegistrationUploadAndCredentialRequest)
  return target;
}

size_t PakeRegistrationUploadAndCredentialRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identity.PakeRegistrationUploadAndCredentialRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pakeRegistrationUpload = 1;
  if (!this->_internal_pakeregistrationupload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pakeregistrationupload());
  }

  // bytes pakeCredentialRequest = 2;
  if (!this->_internal_pakecredentialrequest().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pakecredentialrequest());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PakeRegistrationUploadAndCredentialRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PakeRegistrationUploadAndCredentialRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PakeRegistrationUploadAndCredentialRequest::GetClassData() const { return &_class_data_; }


void PakeRegistrationUploadAndCredentialRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PakeRegistrationUploadAndCredentialRequest*>(&to_msg);
  auto& from = static_cast<const PakeRegistrationUploadAndCredentialRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.PakeRegistrationUploadAndCredentialRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pakeregistrationupload().empty()) {
    _this->_internal_set_pakeregistrationupload(from._internal_pakeregistrationupload());
  }
  if (!from._internal_pakecredentialrequest().empty()) {
    _this->_internal_set_pakecredentialrequest(from._internal_pakecredentialrequest());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PakeRegistrationUploadAndCredentialRequest::CopyFrom(const PakeRegistrationUploadAndCredentialRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.PakeRegistrationUploadAndCredentialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PakeRegistrationUploadAndCredentialRequest::IsInitialized() const {
  return true;
}

void PakeRegistrationUploadAndCredentialRequest::InternalSwap(PakeRegistrationUploadAndCredentialRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pakeregistrationupload_, lhs_arena,
      &other->_impl_.pakeregistrationupload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pakecredentialrequest_, lhs_arena,
      &other->_impl_.pakecredentialrequest_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PakeRegistrationUploadAndCredentialRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_identity_2eproto_getter, &descriptor_table_identity_2eproto_once,
      file_level_metadata_identity_2eproto[4]);
}

// ===================================================================

class WalletLoginRequest::_Internal {
 public:
};

WalletLoginRequest::WalletLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:identity.WalletLoginRequest)
}
WalletLoginRequest::WalletLoginRequest(const WalletLoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WalletLoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.siwemessage_){}
    , decltype(_impl_.siwesignature_){}
    , decltype(_impl_.userpublickey_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.siwemessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.siwemessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_siwemessage().empty()) {
    _this->_impl_.siwemessage_.Set(from._internal_siwemessage(), 
      _this->GetArenaForAllocation());
  }
  _impl_.siwesignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.siwesignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_siwesignature().empty()) {
    _this->_impl_.siwesignature_.Set(from._internal_siwesignature(), 
      _this->GetArenaForAllocation());
  }
  _impl_.userpublickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userpublickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userpublickey().empty()) {
    _this->_impl_.userpublickey_.Set(from._internal_userpublickey(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:identity.WalletLoginRequest)
}

inline void WalletLoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.siwemessage_){}
    , decltype(_impl_.siwesignature_){}
    , decltype(_impl_.userpublickey_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.siwemessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.siwemessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.siwesignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.siwesignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.userpublickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userpublickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WalletLoginRequest::~WalletLoginRequest() {
  // @@protoc_insertion_point(destructor:identity.WalletLoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WalletLoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
  _impl_.deviceid_.Destroy();
  _impl_.siwemessage_.Destroy();
  _impl_.siwesignature_.Destroy();
  _impl_.userpublickey_.Destroy();
}

void WalletLoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WalletLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.WalletLoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _impl_.deviceid_.ClearToEmpty();
  _impl_.siwemessage_.ClearToEmpty();
  _impl_.siwesignature_.ClearToEmpty();
  _impl_.userpublickey_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WalletLoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.WalletLoginRequest.userID"));
        } else
          goto handle_unusual;
        continue;
      // string deviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.WalletLoginRequest.deviceID"));
        } else
          goto handle_unusual;
        continue;
      // string siweMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_siwemessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.WalletLoginRequest.siweMessage"));
        } else
          goto handle_unusual;
        continue;
      // bytes siweSignature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_siwesignature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string userPublicKey = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_userpublickey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.WalletLoginRequest.userPublicKey"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WalletLoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identity.WalletLoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.WalletLoginRequest.userID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // string deviceID = 2;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.WalletLoginRequest.deviceID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  // string siweMessage = 3;
  if (!this->_internal_siwemessage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_siwemessage().data(), static_cast<int>(this->_internal_siwemessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.WalletLoginRequest.siweMessage");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_siwemessage(), target);
  }

  // bytes siweSignature = 4;
  if (!this->_internal_siwesignature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_siwesignature(), target);
  }

  // string userPublicKey = 5;
  if (!this->_internal_userpublickey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userpublickey().data(), static_cast<int>(this->_internal_userpublickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.WalletLoginRequest.userPublicKey");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_userpublickey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identity.WalletLoginRequest)
  return target;
}

size_t WalletLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identity.WalletLoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string deviceID = 2;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string siweMessage = 3;
  if (!this->_internal_siwemessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_siwemessage());
  }

  // bytes siweSignature = 4;
  if (!this->_internal_siwesignature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_siwesignature());
  }

  // string userPublicKey = 5;
  if (!this->_internal_userpublickey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userpublickey());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WalletLoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WalletLoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WalletLoginRequest::GetClassData() const { return &_class_data_; }


void WalletLoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WalletLoginRequest*>(&to_msg);
  auto& from = static_cast<const WalletLoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.WalletLoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (!from._internal_deviceid().empty()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_siwemessage().empty()) {
    _this->_internal_set_siwemessage(from._internal_siwemessage());
  }
  if (!from._internal_siwesignature().empty()) {
    _this->_internal_set_siwesignature(from._internal_siwesignature());
  }
  if (!from._internal_userpublickey().empty()) {
    _this->_internal_set_userpublickey(from._internal_userpublickey());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WalletLoginRequest::CopyFrom(const WalletLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.WalletLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletLoginRequest::IsInitialized() const {
  return true;
}

void WalletLoginRequest::InternalSwap(WalletLoginRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userid_, lhs_arena,
      &other->_impl_.userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.siwemessage_, lhs_arena,
      &other->_impl_.siwemessage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.siwesignature_, lhs_arena,
      &other->_impl_.siwesignature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userpublickey_, lhs_arena,
      &other->_impl_.userpublickey_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WalletLoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_identity_2eproto_getter, &descriptor_table_identity_2eproto_once,
      file_level_metadata_identity_2eproto[5]);
}

// ===================================================================

class WalletLoginResponse::_Internal {
 public:
};

WalletLoginResponse::WalletLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:identity.WalletLoginResponse)
}
WalletLoginResponse::WalletLoginResponse(const WalletLoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WalletLoginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:identity.WalletLoginResponse)
}

inline void WalletLoginResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WalletLoginResponse::~WalletLoginResponse() {
  // @@protoc_insertion_point(destructor:identity.WalletLoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WalletLoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
}

void WalletLoginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WalletLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.WalletLoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WalletLoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string accessToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.WalletLoginResponse.accessToken"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WalletLoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identity.WalletLoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string accessToken = 1;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.WalletLoginResponse.accessToken");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_accesstoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identity.WalletLoginResponse)
  return target;
}

size_t WalletLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identity.WalletLoginResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 1;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WalletLoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WalletLoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WalletLoginResponse::GetClassData() const { return &_class_data_; }


void WalletLoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WalletLoginResponse*>(&to_msg);
  auto& from = static_cast<const WalletLoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.WalletLoginResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WalletLoginResponse::CopyFrom(const WalletLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.WalletLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletLoginResponse::IsInitialized() const {
  return true;
}

void WalletLoginResponse::InternalSwap(WalletLoginResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WalletLoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_identity_2eproto_getter, &descriptor_table_identity_2eproto_once,
      file_level_metadata_identity_2eproto[6]);
}

// ===================================================================

class RegistrationRequest::_Internal {
 public:
  static const ::identity::PakeRegistrationRequestAndUserID& pakeregistrationrequestanduserid(const RegistrationRequest* msg);
  static const ::identity::PakeRegistrationUploadAndCredentialRequest& pakeregistrationuploadandcredentialrequest(const RegistrationRequest* msg);
};

const ::identity::PakeRegistrationRequestAndUserID&
RegistrationRequest::_Internal::pakeregistrationrequestanduserid(const RegistrationRequest* msg) {
  return *msg->_impl_.data_.pakeregistrationrequestanduserid_;
}
const ::identity::PakeRegistrationUploadAndCredentialRequest&
RegistrationRequest::_Internal::pakeregistrationuploadandcredentialrequest(const RegistrationRequest* msg) {
  return *msg->_impl_.data_.pakeregistrationuploadandcredentialrequest_;
}
void RegistrationRequest::set_allocated_pakeregistrationrequestanduserid(::identity::PakeRegistrationRequestAndUserID* pakeregistrationrequestanduserid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (pakeregistrationrequestanduserid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pakeregistrationrequestanduserid);
    if (message_arena != submessage_arena) {
      pakeregistrationrequestanduserid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pakeregistrationrequestanduserid, submessage_arena);
    }
    set_has_pakeregistrationrequestanduserid();
    _impl_.data_.pakeregistrationrequestanduserid_ = pakeregistrationrequestanduserid;
  }
  // @@protoc_insertion_point(field_set_allocated:identity.RegistrationRequest.pakeRegistrationRequestAndUserID)
}
void RegistrationRequest::set_allocated_pakeregistrationuploadandcredentialrequest(::identity::PakeRegistrationUploadAndCredentialRequest* pakeregistrationuploadandcredentialrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (pakeregistrationuploadandcredentialrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pakeregistrationuploadandcredentialrequest);
    if (message_arena != submessage_arena) {
      pakeregistrationuploadandcredentialrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pakeregistrationuploadandcredentialrequest, submessage_arena);
    }
    set_has_pakeregistrationuploadandcredentialrequest();
    _impl_.data_.pakeregistrationuploadandcredentialrequest_ = pakeregistrationuploadandcredentialrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:identity.RegistrationRequest.pakeRegistrationUploadAndCredentialRequest)
}
RegistrationRequest::RegistrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:identity.RegistrationRequest)
}
RegistrationRequest::RegistrationRequest(const RegistrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistrationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kPakeRegistrationRequestAndUserID: {
      _this->_internal_mutable_pakeregistrationrequestanduserid()->::identity::PakeRegistrationRequestAndUserID::MergeFrom(
          from._internal_pakeregistrationrequestanduserid());
      break;
    }
    case kPakeRegistrationUploadAndCredentialRequest: {
      _this->_internal_mutable_pakeregistrationuploadandcredentialrequest()->::identity::PakeRegistrationUploadAndCredentialRequest::MergeFrom(
          from._internal_pakeregistrationuploadandcredentialrequest());
      break;
    }
    case kPakeCredentialFinalization: {
      _this->_internal_set_pakecredentialfinalization(from._internal_pakecredentialfinalization());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:identity.RegistrationRequest)
}

inline void RegistrationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

RegistrationRequest::~RegistrationRequest() {
  // @@protoc_insertion_point(destructor:identity.RegistrationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistrationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void RegistrationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistrationRequest::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:identity.RegistrationRequest)
  switch (data_case()) {
    case kPakeRegistrationRequestAndUserID: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.pakeregistrationrequestanduserid_;
      }
      break;
    }
    case kPakeRegistrationUploadAndCredentialRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.pakeregistrationuploadandcredentialrequest_;
      }
      break;
    }
    case kPakeCredentialFinalization: {
      _impl_.data_.pakecredentialfinalization_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void RegistrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.RegistrationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistrationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .identity.PakeRegistrationRequestAndUserID pakeRegistrationRequestAndUserID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pakeregistrationrequestanduserid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .identity.PakeRegistrationUploadAndCredentialRequest pakeRegistrationUploadAndCredentialRequest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pakeregistrationuploadandcredentialrequest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pakeCredentialFinalization = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pakecredentialfinalization();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistrationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identity.RegistrationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .identity.PakeRegistrationRequestAndUserID pakeRegistrationRequestAndUserID = 1;
  if (_internal_has_pakeregistrationrequestanduserid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pakeregistrationrequestanduserid(this),
        _Internal::pakeregistrationrequestanduserid(this).GetCachedSize(), target, stream);
  }

  // .identity.PakeRegistrationUploadAndCredentialRequest pakeRegistrationUploadAndCredentialRequest = 2;
  if (_internal_has_pakeregistrationuploadandcredentialrequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pakeregistrationuploadandcredentialrequest(this),
        _Internal::pakeregistrationuploadandcredentialrequest(this).GetCachedSize(), target, stream);
  }

  // bytes pakeCredentialFinalization = 3;
  if (_internal_has_pakecredentialfinalization()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pakecredentialfinalization(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identity.RegistrationRequest)
  return target;
}

size_t RegistrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identity.RegistrationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .identity.PakeRegistrationRequestAndUserID pakeRegistrationRequestAndUserID = 1;
    case kPakeRegistrationRequestAndUserID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.pakeregistrationrequestanduserid_);
      break;
    }
    // .identity.PakeRegistrationUploadAndCredentialRequest pakeRegistrationUploadAndCredentialRequest = 2;
    case kPakeRegistrationUploadAndCredentialRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.pakeregistrationuploadandcredentialrequest_);
      break;
    }
    // bytes pakeCredentialFinalization = 3;
    case kPakeCredentialFinalization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pakecredentialfinalization());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistrationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistrationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistrationRequest::GetClassData() const { return &_class_data_; }


void RegistrationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistrationRequest*>(&to_msg);
  auto& from = static_cast<const RegistrationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.RegistrationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kPakeRegistrationRequestAndUserID: {
      _this->_internal_mutable_pakeregistrationrequestanduserid()->::identity::PakeRegistrationRequestAndUserID::MergeFrom(
          from._internal_pakeregistrationrequestanduserid());
      break;
    }
    case kPakeRegistrationUploadAndCredentialRequest: {
      _this->_internal_mutable_pakeregistrationuploadandcredentialrequest()->::identity::PakeRegistrationUploadAndCredentialRequest::MergeFrom(
          from._internal_pakeregistrationuploadandcredentialrequest());
      break;
    }
    case kPakeCredentialFinalization: {
      _this->_internal_set_pakecredentialfinalization(from._internal_pakecredentialfinalization());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistrationRequest::CopyFrom(const RegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.RegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationRequest::IsInitialized() const {
  return true;
}

void RegistrationRequest::InternalSwap(RegistrationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistrationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_identity_2eproto_getter, &descriptor_table_identity_2eproto_once,
      file_level_metadata_identity_2eproto[7]);
}

// ===================================================================

class RegistrationResponse::_Internal {
 public:
  static const ::identity::PakeLoginResponse& pakeloginresponse(const RegistrationResponse* msg);
};

const ::identity::PakeLoginResponse&
RegistrationResponse::_Internal::pakeloginresponse(const RegistrationResponse* msg) {
  return *msg->_impl_.data_.pakeloginresponse_;
}
void RegistrationResponse::set_allocated_pakeloginresponse(::identity::PakeLoginResponse* pakeloginresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (pakeloginresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pakeloginresponse);
    if (message_arena != submessage_arena) {
      pakeloginresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pakeloginresponse, submessage_arena);
    }
    set_has_pakeloginresponse();
    _impl_.data_.pakeloginresponse_ = pakeloginresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:identity.RegistrationResponse.pakeLoginResponse)
}
RegistrationResponse::RegistrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:identity.RegistrationResponse)
}
RegistrationResponse::RegistrationResponse(const RegistrationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistrationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kPakeRegistrationResponse: {
      _this->_internal_set_pakeregistrationresponse(from._internal_pakeregistrationresponse());
      break;
    }
    case kPakeLoginResponse: {
      _this->_internal_mutable_pakeloginresponse()->::identity::PakeLoginResponse::MergeFrom(
          from._internal_pakeloginresponse());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:identity.RegistrationResponse)
}

inline void RegistrationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

RegistrationResponse::~RegistrationResponse() {
  // @@protoc_insertion_point(destructor:identity.RegistrationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistrationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void RegistrationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistrationResponse::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:identity.RegistrationResponse)
  switch (data_case()) {
    case kPakeRegistrationResponse: {
      _impl_.data_.pakeregistrationresponse_.Destroy();
      break;
    }
    case kPakeLoginResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.pakeloginresponse_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void RegistrationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.RegistrationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistrationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pakeRegistrationResponse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pakeregistrationresponse();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .identity.PakeLoginResponse pakeLoginResponse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pakeloginresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistrationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identity.RegistrationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pakeRegistrationResponse = 1;
  if (_internal_has_pakeregistrationresponse()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pakeregistrationresponse(), target);
  }

  // .identity.PakeLoginResponse pakeLoginResponse = 2;
  if (_internal_has_pakeloginresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pakeloginresponse(this),
        _Internal::pakeloginresponse(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identity.RegistrationResponse)
  return target;
}

size_t RegistrationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identity.RegistrationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // bytes pakeRegistrationResponse = 1;
    case kPakeRegistrationResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pakeregistrationresponse());
      break;
    }
    // .identity.PakeLoginResponse pakeLoginResponse = 2;
    case kPakeLoginResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.pakeloginresponse_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistrationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistrationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistrationResponse::GetClassData() const { return &_class_data_; }


void RegistrationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistrationResponse*>(&to_msg);
  auto& from = static_cast<const RegistrationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.RegistrationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kPakeRegistrationResponse: {
      _this->_internal_set_pakeregistrationresponse(from._internal_pakeregistrationresponse());
      break;
    }
    case kPakeLoginResponse: {
      _this->_internal_mutable_pakeloginresponse()->::identity::PakeLoginResponse::MergeFrom(
          from._internal_pakeloginresponse());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistrationResponse::CopyFrom(const RegistrationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.RegistrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationResponse::IsInitialized() const {
  return true;
}

void RegistrationResponse::InternalSwap(RegistrationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistrationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_identity_2eproto_getter, &descriptor_table_identity_2eproto_once,
      file_level_metadata_identity_2eproto[8]);
}

// ===================================================================

class LoginRequest::_Internal {
 public:
  static const ::identity::PakeLoginRequest& pakeloginrequest(const LoginRequest* msg);
  static const ::identity::WalletLoginRequest& walletloginrequest(const LoginRequest* msg);
};

const ::identity::PakeLoginRequest&
LoginRequest::_Internal::pakeloginrequest(const LoginRequest* msg) {
  return *msg->_impl_.data_.pakeloginrequest_;
}
const ::identity::WalletLoginRequest&
LoginRequest::_Internal::walletloginrequest(const LoginRequest* msg) {
  return *msg->_impl_.data_.walletloginrequest_;
}
void LoginRequest::set_allocated_pakeloginrequest(::identity::PakeLoginRequest* pakeloginrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (pakeloginrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pakeloginrequest);
    if (message_arena != submessage_arena) {
      pakeloginrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pakeloginrequest, submessage_arena);
    }
    set_has_pakeloginrequest();
    _impl_.data_.pakeloginrequest_ = pakeloginrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:identity.LoginRequest.pakeLoginRequest)
}
void LoginRequest::set_allocated_walletloginrequest(::identity::WalletLoginRequest* walletloginrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (walletloginrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(walletloginrequest);
    if (message_arena != submessage_arena) {
      walletloginrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, walletloginrequest, submessage_arena);
    }
    set_has_walletloginrequest();
    _impl_.data_.walletloginrequest_ = walletloginrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:identity.LoginRequest.walletLoginRequest)
}
LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:identity.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kPakeLoginRequest: {
      _this->_internal_mutable_pakeloginrequest()->::identity::PakeLoginRequest::MergeFrom(
          from._internal_pakeloginrequest());
      break;
    }
    case kWalletLoginRequest: {
      _this->_internal_mutable_walletloginrequest()->::identity::WalletLoginRequest::MergeFrom(
          from._internal_walletloginrequest());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:identity.LoginRequest)
}

inline void LoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:identity.LoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void LoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginRequest::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:identity.LoginRequest)
  switch (data_case()) {
    case kPakeLoginRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.pakeloginrequest_;
      }
      break;
    }
    case kWalletLoginRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.walletloginrequest_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.LoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .identity.PakeLoginRequest pakeLoginRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pakeloginrequest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .identity.WalletLoginRequest walletLoginRequest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_walletloginrequest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identity.LoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .identity.PakeLoginRequest pakeLoginRequest = 1;
  if (_internal_has_pakeloginrequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pakeloginrequest(this),
        _Internal::pakeloginrequest(this).GetCachedSize(), target, stream);
  }

  // .identity.WalletLoginRequest walletLoginRequest = 2;
  if (_internal_has_walletloginrequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::walletloginrequest(this),
        _Internal::walletloginrequest(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identity.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identity.LoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .identity.PakeLoginRequest pakeLoginRequest = 1;
    case kPakeLoginRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.pakeloginrequest_);
      break;
    }
    // .identity.WalletLoginRequest walletLoginRequest = 2;
    case kWalletLoginRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.walletloginrequest_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginRequest::GetClassData() const { return &_class_data_; }


void LoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginRequest*>(&to_msg);
  auto& from = static_cast<const LoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.LoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kPakeLoginRequest: {
      _this->_internal_mutable_pakeloginrequest()->::identity::PakeLoginRequest::MergeFrom(
          from._internal_pakeloginrequest());
      break;
    }
    case kWalletLoginRequest: {
      _this->_internal_mutable_walletloginrequest()->::identity::WalletLoginRequest::MergeFrom(
          from._internal_walletloginrequest());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_identity_2eproto_getter, &descriptor_table_identity_2eproto_once,
      file_level_metadata_identity_2eproto[9]);
}

// ===================================================================

class LoginResponse::_Internal {
 public:
  static const ::identity::PakeLoginResponse& pakeloginresponse(const LoginResponse* msg);
  static const ::identity::WalletLoginResponse& walletloginresponse(const LoginResponse* msg);
};

const ::identity::PakeLoginResponse&
LoginResponse::_Internal::pakeloginresponse(const LoginResponse* msg) {
  return *msg->_impl_.data_.pakeloginresponse_;
}
const ::identity::WalletLoginResponse&
LoginResponse::_Internal::walletloginresponse(const LoginResponse* msg) {
  return *msg->_impl_.data_.walletloginresponse_;
}
void LoginResponse::set_allocated_pakeloginresponse(::identity::PakeLoginResponse* pakeloginresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (pakeloginresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pakeloginresponse);
    if (message_arena != submessage_arena) {
      pakeloginresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pakeloginresponse, submessage_arena);
    }
    set_has_pakeloginresponse();
    _impl_.data_.pakeloginresponse_ = pakeloginresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:identity.LoginResponse.pakeLoginResponse)
}
void LoginResponse::set_allocated_walletloginresponse(::identity::WalletLoginResponse* walletloginresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (walletloginresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(walletloginresponse);
    if (message_arena != submessage_arena) {
      walletloginresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, walletloginresponse, submessage_arena);
    }
    set_has_walletloginresponse();
    _impl_.data_.walletloginresponse_ = walletloginresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:identity.LoginResponse.walletLoginResponse)
}
LoginResponse::LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:identity.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kPakeLoginResponse: {
      _this->_internal_mutable_pakeloginresponse()->::identity::PakeLoginResponse::MergeFrom(
          from._internal_pakeloginresponse());
      break;
    }
    case kWalletLoginResponse: {
      _this->_internal_mutable_walletloginresponse()->::identity::WalletLoginResponse::MergeFrom(
          from._internal_walletloginresponse());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:identity.LoginResponse)
}

inline void LoginResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:identity.LoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void LoginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginResponse::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:identity.LoginResponse)
  switch (data_case()) {
    case kPakeLoginResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.pakeloginresponse_;
      }
      break;
    }
    case kWalletLoginResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.walletloginresponse_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.LoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .identity.PakeLoginResponse pakeLoginResponse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pakeloginresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .identity.WalletLoginResponse walletLoginResponse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_walletloginresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identity.LoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .identity.PakeLoginResponse pakeLoginResponse = 1;
  if (_internal_has_pakeloginresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pakeloginresponse(this),
        _Internal::pakeloginresponse(this).GetCachedSize(), target, stream);
  }

  // .identity.WalletLoginResponse walletLoginResponse = 2;
  if (_internal_has_walletloginresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::walletloginresponse(this),
        _Internal::walletloginresponse(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identity.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identity.LoginResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .identity.PakeLoginResponse pakeLoginResponse = 1;
    case kPakeLoginResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.pakeloginresponse_);
      break;
    }
    // .identity.WalletLoginResponse walletLoginResponse = 2;
    case kWalletLoginResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.walletloginresponse_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginResponse::GetClassData() const { return &_class_data_; }


void LoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginResponse*>(&to_msg);
  auto& from = static_cast<const LoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.LoginResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kPakeLoginResponse: {
      _this->_internal_mutable_pakeloginresponse()->::identity::PakeLoginResponse::MergeFrom(
          from._internal_pakeloginresponse());
      break;
    }
    case kWalletLoginResponse: {
      _this->_internal_mutable_walletloginresponse()->::identity::WalletLoginResponse::MergeFrom(
          from._internal_walletloginresponse());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_identity_2eproto_getter, &descriptor_table_identity_2eproto_once,
      file_level_metadata_identity_2eproto[10]);
}

// ===================================================================

class VerifyUserTokenRequest::_Internal {
 public:
};

VerifyUserTokenRequest::VerifyUserTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:identity.VerifyUserTokenRequest)
}
VerifyUserTokenRequest::VerifyUserTokenRequest(const VerifyUserTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VerifyUserTokenRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.accesstoken_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:identity.VerifyUserTokenRequest)
}

inline void VerifyUserTokenRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.accesstoken_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VerifyUserTokenRequest::~VerifyUserTokenRequest() {
  // @@protoc_insertion_point(destructor:identity.VerifyUserTokenRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyUserTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
  _impl_.deviceid_.Destroy();
  _impl_.accesstoken_.Destroy();
}

void VerifyUserTokenRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifyUserTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.VerifyUserTokenRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _impl_.deviceid_.ClearToEmpty();
  _impl_.accesstoken_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyUserTokenRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.VerifyUserTokenRequest.userID"));
        } else
          goto handle_unusual;
        continue;
      // string deviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.VerifyUserTokenRequest.deviceID"));
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.VerifyUserTokenRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyUserTokenRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identity.VerifyUserTokenRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.VerifyUserTokenRequest.userID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // string deviceID = 2;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.VerifyUserTokenRequest.deviceID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  // string accessToken = 3;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.VerifyUserTokenRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_accesstoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identity.VerifyUserTokenRequest)
  return target;
}

size_t VerifyUserTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identity.VerifyUserTokenRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string deviceID = 2;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string accessToken = 3;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyUserTokenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VerifyUserTokenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyUserTokenRequest::GetClassData() const { return &_class_data_; }


void VerifyUserTokenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VerifyUserTokenRequest*>(&to_msg);
  auto& from = static_cast<const VerifyUserTokenRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.VerifyUserTokenRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (!from._internal_deviceid().empty()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyUserTokenRequest::CopyFrom(const VerifyUserTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.VerifyUserTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyUserTokenRequest::IsInitialized() const {
  return true;
}

void VerifyUserTokenRequest::InternalSwap(VerifyUserTokenRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userid_, lhs_arena,
      &other->_impl_.userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyUserTokenRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_identity_2eproto_getter, &descriptor_table_identity_2eproto_once,
      file_level_metadata_identity_2eproto[11]);
}

// ===================================================================

class VerifyUserTokenResponse::_Internal {
 public:
};

VerifyUserTokenResponse::VerifyUserTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:identity.VerifyUserTokenResponse)
}
VerifyUserTokenResponse::VerifyUserTokenResponse(const VerifyUserTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VerifyUserTokenResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tokenvalid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tokenvalid_ = from._impl_.tokenvalid_;
  // @@protoc_insertion_point(copy_constructor:identity.VerifyUserTokenResponse)
}

inline void VerifyUserTokenResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tokenvalid_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VerifyUserTokenResponse::~VerifyUserTokenResponse() {
  // @@protoc_insertion_point(destructor:identity.VerifyUserTokenResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyUserTokenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VerifyUserTokenResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifyUserTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.VerifyUserTokenResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tokenvalid_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyUserTokenResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool tokenValid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tokenvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyUserTokenResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identity.VerifyUserTokenResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool tokenValid = 1;
  if (this->_internal_tokenvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_tokenvalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identity.VerifyUserTokenResponse)
  return target;
}

size_t VerifyUserTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identity.VerifyUserTokenResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool tokenValid = 1;
  if (this->_internal_tokenvalid() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyUserTokenResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VerifyUserTokenResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyUserTokenResponse::GetClassData() const { return &_class_data_; }


void VerifyUserTokenResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VerifyUserTokenResponse*>(&to_msg);
  auto& from = static_cast<const VerifyUserTokenResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.VerifyUserTokenResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tokenvalid() != 0) {
    _this->_internal_set_tokenvalid(from._internal_tokenvalid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyUserTokenResponse::CopyFrom(const VerifyUserTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.VerifyUserTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyUserTokenResponse::IsInitialized() const {
  return true;
}

void VerifyUserTokenResponse::InternalSwap(VerifyUserTokenResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.tokenvalid_, other->_impl_.tokenvalid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyUserTokenResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_identity_2eproto_getter, &descriptor_table_identity_2eproto_once,
      file_level_metadata_identity_2eproto[12]);
}

// ===================================================================

class GetUserIDRequest::_Internal {
 public:
};

GetUserIDRequest::GetUserIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:identity.GetUserIDRequest)
}
GetUserIDRequest::GetUserIDRequest(const GetUserIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserIDRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userinfo_){}
    , decltype(_impl_.authtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userinfo().empty()) {
    _this->_impl_.userinfo_.Set(from._internal_userinfo(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.authtype_ = from._impl_.authtype_;
  // @@protoc_insertion_point(copy_constructor:identity.GetUserIDRequest)
}

inline void GetUserIDRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userinfo_){}
    , decltype(_impl_.authtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUserIDRequest::~GetUserIDRequest() {
  // @@protoc_insertion_point(destructor:identity.GetUserIDRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userinfo_.Destroy();
}

void GetUserIDRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.GetUserIDRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userinfo_.ClearToEmpty();
  _impl_.authtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserIDRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .identity.GetUserIDRequest.AuthType authType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_authtype(static_cast<::identity::GetUserIDRequest_AuthType>(val));
        } else
          goto handle_unusual;
        continue;
      // string userInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_userinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.GetUserIDRequest.userInfo"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserIDRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identity.GetUserIDRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .identity.GetUserIDRequest.AuthType authType = 1;
  if (this->_internal_authtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_authtype(), target);
  }

  // string userInfo = 2;
  if (!this->_internal_userinfo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userinfo().data(), static_cast<int>(this->_internal_userinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.GetUserIDRequest.userInfo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_userinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identity.GetUserIDRequest)
  return target;
}

size_t GetUserIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identity.GetUserIDRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userInfo = 2;
  if (!this->_internal_userinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userinfo());
  }

  // .identity.GetUserIDRequest.AuthType authType = 1;
  if (this->_internal_authtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_authtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserIDRequest::GetClassData() const { return &_class_data_; }


void GetUserIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserIDRequest*>(&to_msg);
  auto& from = static_cast<const GetUserIDRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.GetUserIDRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userinfo().empty()) {
    _this->_internal_set_userinfo(from._internal_userinfo());
  }
  if (from._internal_authtype() != 0) {
    _this->_internal_set_authtype(from._internal_authtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserIDRequest::CopyFrom(const GetUserIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.GetUserIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserIDRequest::IsInitialized() const {
  return true;
}

void GetUserIDRequest::InternalSwap(GetUserIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userinfo_, lhs_arena,
      &other->_impl_.userinfo_, rhs_arena
  );
  swap(_impl_.authtype_, other->_impl_.authtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserIDRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_identity_2eproto_getter, &descriptor_table_identity_2eproto_once,
      file_level_metadata_identity_2eproto[13]);
}

// ===================================================================

class GetUserIDResponse::_Internal {
 public:
};

GetUserIDResponse::GetUserIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:identity.GetUserIDResponse)
}
GetUserIDResponse::GetUserIDResponse(const GetUserIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserIDResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:identity.GetUserIDResponse)
}

inline void GetUserIDResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUserIDResponse::~GetUserIDResponse() {
  // @@protoc_insertion_point(destructor:identity.GetUserIDResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
}

void GetUserIDResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.GetUserIDResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserIDResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "identity.GetUserIDResponse.userID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserIDResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:identity.GetUserIDResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "identity.GetUserIDResponse.userID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:identity.GetUserIDResponse)
  return target;
}

size_t GetUserIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:identity.GetUserIDResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserIDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserIDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserIDResponse::GetClassData() const { return &_class_data_; }


void GetUserIDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserIDResponse*>(&to_msg);
  auto& from = static_cast<const GetUserIDResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.GetUserIDResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserIDResponse::CopyFrom(const GetUserIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.GetUserIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserIDResponse::IsInitialized() const {
  return true;
}

void GetUserIDResponse::InternalSwap(GetUserIDResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userid_, lhs_arena,
      &other->_impl_.userid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserIDResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_identity_2eproto_getter, &descriptor_table_identity_2eproto_once,
      file_level_metadata_identity_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace identity
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::identity::PakeRegistrationRequestAndUserID*
Arena::CreateMaybeMessage< ::identity::PakeRegistrationRequestAndUserID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::identity::PakeRegistrationRequestAndUserID >(arena);
}
template<> PROTOBUF_NOINLINE ::identity::PakeCredentialRequestAndUserID*
Arena::CreateMaybeMessage< ::identity::PakeCredentialRequestAndUserID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::identity::PakeCredentialRequestAndUserID >(arena);
}
template<> PROTOBUF_NOINLINE ::identity::PakeLoginRequest*
Arena::CreateMaybeMessage< ::identity::PakeLoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::identity::PakeLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::identity::PakeLoginResponse*
Arena::CreateMaybeMessage< ::identity::PakeLoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::identity::PakeLoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::identity::PakeRegistrationUploadAndCredentialRequest*
Arena::CreateMaybeMessage< ::identity::PakeRegistrationUploadAndCredentialRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::identity::PakeRegistrationUploadAndCredentialRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::identity::WalletLoginRequest*
Arena::CreateMaybeMessage< ::identity::WalletLoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::identity::WalletLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::identity::WalletLoginResponse*
Arena::CreateMaybeMessage< ::identity::WalletLoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::identity::WalletLoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::identity::RegistrationRequest*
Arena::CreateMaybeMessage< ::identity::RegistrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::identity::RegistrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::identity::RegistrationResponse*
Arena::CreateMaybeMessage< ::identity::RegistrationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::identity::RegistrationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::identity::LoginRequest*
Arena::CreateMaybeMessage< ::identity::LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::identity::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::identity::LoginResponse*
Arena::CreateMaybeMessage< ::identity::LoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::identity::LoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::identity::VerifyUserTokenRequest*
Arena::CreateMaybeMessage< ::identity::VerifyUserTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::identity::VerifyUserTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::identity::VerifyUserTokenResponse*
Arena::CreateMaybeMessage< ::identity::VerifyUserTokenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::identity::VerifyUserTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::identity::GetUserIDRequest*
Arena::CreateMaybeMessage< ::identity::GetUserIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::identity::GetUserIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::identity::GetUserIDResponse*
Arena::CreateMaybeMessage< ::identity::GetUserIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::identity::GetUserIDResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
