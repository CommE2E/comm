// @generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backup.proto

#include "backup.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace backup {
PROTOBUF_CONSTEXPR CreateNewBackupRequest::CreateNewBackupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CreateNewBackupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateNewBackupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateNewBackupRequestDefaultTypeInternal() {}
  union {
    CreateNewBackupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateNewBackupRequestDefaultTypeInternal _CreateNewBackupRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateNewBackupResponse::CreateNewBackupResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.backupid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateNewBackupResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateNewBackupResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateNewBackupResponseDefaultTypeInternal() {}
  union {
    CreateNewBackupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateNewBackupResponseDefaultTypeInternal _CreateNewBackupResponse_default_instance_;
PROTOBUF_CONSTEXPR SendLogRequest::SendLogRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SendLogRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendLogRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendLogRequestDefaultTypeInternal() {}
  union {
    SendLogRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendLogRequestDefaultTypeInternal _SendLogRequest_default_instance_;
PROTOBUF_CONSTEXPR SendLogResponse::SendLogResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logcheckpoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendLogResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendLogResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendLogResponseDefaultTypeInternal() {}
  union {
    SendLogResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendLogResponseDefaultTypeInternal _SendLogResponse_default_instance_;
PROTOBUF_CONSTEXPR RecoverBackupKeyRequest::RecoverBackupKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecoverBackupKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecoverBackupKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecoverBackupKeyRequestDefaultTypeInternal() {}
  union {
    RecoverBackupKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecoverBackupKeyRequestDefaultTypeInternal _RecoverBackupKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR RecoverBackupKeyResponse::RecoverBackupKeyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.backupid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecoverBackupKeyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecoverBackupKeyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecoverBackupKeyResponseDefaultTypeInternal() {}
  union {
    RecoverBackupKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecoverBackupKeyResponseDefaultTypeInternal _RecoverBackupKeyResponse_default_instance_;
PROTOBUF_CONSTEXPR PullBackupRequest::PullBackupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.backupid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PullBackupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PullBackupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PullBackupRequestDefaultTypeInternal() {}
  union {
    PullBackupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PullBackupRequestDefaultTypeInternal _PullBackupRequest_default_instance_;
PROTOBUF_CONSTEXPR PullBackupResponse::PullBackupResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attachmentholders_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PullBackupResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PullBackupResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PullBackupResponseDefaultTypeInternal() {}
  union {
    PullBackupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PullBackupResponseDefaultTypeInternal _PullBackupResponse_default_instance_;
PROTOBUF_CONSTEXPR AddAttachmentsRequest::AddAttachmentsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.backupid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.holders_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddAttachmentsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddAttachmentsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddAttachmentsRequestDefaultTypeInternal() {}
  union {
    AddAttachmentsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddAttachmentsRequestDefaultTypeInternal _AddAttachmentsRequest_default_instance_;
}  // namespace backup
static ::_pb::Metadata file_level_metadata_backup_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_backup_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_backup_2eproto = nullptr;

const uint32_t TableStruct_backup_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::backup::CreateNewBackupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::backup::CreateNewBackupRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::backup::CreateNewBackupRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::backup::CreateNewBackupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::backup::CreateNewBackupResponse, _impl_.backupid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::backup::SendLogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::backup::SendLogRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::backup::SendLogRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::backup::SendLogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::backup::SendLogResponse, _impl_.logcheckpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::backup::RecoverBackupKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::backup::RecoverBackupKeyRequest, _impl_.userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::backup::RecoverBackupKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::backup::RecoverBackupKeyResponse, _impl_.backupid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::backup::PullBackupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::backup::PullBackupRequest, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::backup::PullBackupRequest, _impl_.backupid_),
  PROTOBUF_FIELD_OFFSET(::backup::PullBackupResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::backup::PullBackupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::backup::PullBackupResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::backup::PullBackupResponse, _impl_.attachmentholders_),
  PROTOBUF_FIELD_OFFSET(::backup::PullBackupResponse, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::backup::PullBackupResponse, _impl_.data_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::backup::AddAttachmentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::backup::AddAttachmentsRequest, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::backup::AddAttachmentsRequest, _impl_.backupid_),
  PROTOBUF_FIELD_OFFSET(::backup::AddAttachmentsRequest, _impl_.logid_),
  PROTOBUF_FIELD_OFFSET(::backup::AddAttachmentsRequest, _impl_.holders_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::backup::CreateNewBackupRequest)},
  { 12, -1, -1, sizeof(::backup::CreateNewBackupResponse)},
  { 19, -1, -1, sizeof(::backup::SendLogRequest)},
  { 30, -1, -1, sizeof(::backup::SendLogResponse)},
  { 37, -1, -1, sizeof(::backup::RecoverBackupKeyRequest)},
  { 44, -1, -1, sizeof(::backup::RecoverBackupKeyResponse)},
  { 51, -1, -1, sizeof(::backup::PullBackupRequest)},
  { 59, 72, -1, sizeof(::backup::PullBackupResponse)},
  { 77, -1, -1, sizeof(::backup::AddAttachmentsRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::backup::_CreateNewBackupRequest_default_instance_._instance,
  &::backup::_CreateNewBackupResponse_default_instance_._instance,
  &::backup::_SendLogRequest_default_instance_._instance,
  &::backup::_SendLogResponse_default_instance_._instance,
  &::backup::_RecoverBackupKeyRequest_default_instance_._instance,
  &::backup::_RecoverBackupKeyResponse_default_instance_._instance,
  &::backup::_PullBackupRequest_default_instance_._instance,
  &::backup::_PullBackupResponse_default_instance_._instance,
  &::backup::_AddAttachmentsRequest_default_instance_._instance,
};

const char descriptor_table_protodef_backup_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014backup.proto\022\006backup\032\033google/protobuf/"
  "empty.proto\"\227\001\n\026CreateNewBackupRequest\022\020"
  "\n\006userID\030\001 \001(\tH\000\022\022\n\010deviceID\030\002 \001(\tH\000\022\024\n\n"
  "keyEntropy\030\003 \001(\014H\000\022\033\n\021newCompactionHash\030"
  "\004 \001(\014H\000\022\034\n\022newCompactionChunk\030\005 \001(\014H\000B\006\n"
  "\004data\"+\n\027CreateNewBackupResponse\022\020\n\010back"
  "upID\030\001 \001(\t\"d\n\016SendLogRequest\022\020\n\006userID\030\001"
  " \001(\tH\000\022\022\n\010backupID\030\002 \001(\tH\000\022\021\n\007logHash\030\003 "
  "\001(\014H\000\022\021\n\007logData\030\004 \001(\014H\000B\006\n\004data\"(\n\017Send"
  "LogResponse\022\025\n\rlogCheckpoint\030\001 \001(\t\")\n\027Re"
  "coverBackupKeyRequest\022\016\n\006userID\030\001 \001(\t\",\n"
  "\030RecoverBackupKeyResponse\022\020\n\010backupID\030\004 "
  "\001(\t\"5\n\021PullBackupRequest\022\016\n\006userID\030\001 \001(\t"
  "\022\020\n\010backupID\030\002 \001(\t\"\254\001\n\022PullBackupRespons"
  "e\022\022\n\010backupID\030\001 \001(\tH\000\022\017\n\005logID\030\002 \001(\tH\000\022\031"
  "\n\017compactionChunk\030\003 \001(\014H\001\022\022\n\010logChunk\030\004 "
  "\001(\014H\001\022\036\n\021attachmentHolders\030\005 \001(\tH\002\210\001\001B\004\n"
  "\002idB\006\n\004dataB\024\n\022_attachmentHolders\"Y\n\025Add"
  "AttachmentsRequest\022\016\n\006userID\030\001 \001(\t\022\020\n\010ba"
  "ckupID\030\002 \001(\t\022\r\n\005logID\030\003 \001(\t\022\017\n\007holders\030\004"
  " \001(\t2\232\003\n\rBackupService\022X\n\017CreateNewBacku"
  "p\022\036.backup.CreateNewBackupRequest\032\037.back"
  "up.CreateNewBackupResponse\"\000(\0010\001\022>\n\007Send"
  "Log\022\026.backup.SendLogRequest\032\027.backup.Sen"
  "dLogResponse\"\000(\001\022[\n\020RecoverBackupKey\022\037.b"
  "ackup.RecoverBackupKeyRequest\032 .backup.R"
  "ecoverBackupKeyResponse\"\000(\0010\001\022G\n\nPullBac"
  "kup\022\031.backup.PullBackupRequest\032\032.backup."
  "PullBackupResponse\"\0000\001\022I\n\016AddAttachments"
  "\022\035.backup.AddAttachmentsRequest\032\026.google"
  ".protobuf.Empty\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_backup_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_backup_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_backup_2eproto = {
    false, false, 1225, descriptor_table_protodef_backup_2eproto,
    "backup.proto",
    &descriptor_table_backup_2eproto_once, descriptor_table_backup_2eproto_deps, 1, 9,
    schemas, file_default_instances, TableStruct_backup_2eproto::offsets,
    file_level_metadata_backup_2eproto, file_level_enum_descriptors_backup_2eproto,
    file_level_service_descriptors_backup_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_backup_2eproto_getter() {
  return &descriptor_table_backup_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_backup_2eproto(&descriptor_table_backup_2eproto);
namespace backup {

// ===================================================================

class CreateNewBackupRequest::_Internal {
 public:
};

CreateNewBackupRequest::CreateNewBackupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:backup.CreateNewBackupRequest)
}
CreateNewBackupRequest::CreateNewBackupRequest(const CreateNewBackupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateNewBackupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kUserID: {
      _this->_internal_set_userid(from._internal_userid());
      break;
    }
    case kDeviceID: {
      _this->_internal_set_deviceid(from._internal_deviceid());
      break;
    }
    case kKeyEntropy: {
      _this->_internal_set_keyentropy(from._internal_keyentropy());
      break;
    }
    case kNewCompactionHash: {
      _this->_internal_set_newcompactionhash(from._internal_newcompactionhash());
      break;
    }
    case kNewCompactionChunk: {
      _this->_internal_set_newcompactionchunk(from._internal_newcompactionchunk());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:backup.CreateNewBackupRequest)
}

inline void CreateNewBackupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

CreateNewBackupRequest::~CreateNewBackupRequest() {
  // @@protoc_insertion_point(destructor:backup.CreateNewBackupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateNewBackupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void CreateNewBackupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateNewBackupRequest::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:backup.CreateNewBackupRequest)
  switch (data_case()) {
    case kUserID: {
      _impl_.data_.userid_.Destroy();
      break;
    }
    case kDeviceID: {
      _impl_.data_.deviceid_.Destroy();
      break;
    }
    case kKeyEntropy: {
      _impl_.data_.keyentropy_.Destroy();
      break;
    }
    case kNewCompactionHash: {
      _impl_.data_.newcompactionhash_.Destroy();
      break;
    }
    case kNewCompactionChunk: {
      _impl_.data_.newcompactionchunk_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void CreateNewBackupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:backup.CreateNewBackupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateNewBackupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.CreateNewBackupRequest.userID"));
        } else
          goto handle_unusual;
        continue;
      // string deviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.CreateNewBackupRequest.deviceID"));
        } else
          goto handle_unusual;
        continue;
      // bytes keyEntropy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_keyentropy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes newCompactionHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_newcompactionhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes newCompactionChunk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_newcompactionchunk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateNewBackupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:backup.CreateNewBackupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userID = 1;
  if (_internal_has_userid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.CreateNewBackupRequest.userID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // string deviceID = 2;
  if (_internal_has_deviceid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.CreateNewBackupRequest.deviceID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  // bytes keyEntropy = 3;
  if (_internal_has_keyentropy()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_keyentropy(), target);
  }

  // bytes newCompactionHash = 4;
  if (_internal_has_newcompactionhash()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_newcompactionhash(), target);
  }

  // bytes newCompactionChunk = 5;
  if (_internal_has_newcompactionchunk()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_newcompactionchunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:backup.CreateNewBackupRequest)
  return target;
}

size_t CreateNewBackupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:backup.CreateNewBackupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // string userID = 1;
    case kUserID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_userid());
      break;
    }
    // string deviceID = 2;
    case kDeviceID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deviceid());
      break;
    }
    // bytes keyEntropy = 3;
    case kKeyEntropy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_keyentropy());
      break;
    }
    // bytes newCompactionHash = 4;
    case kNewCompactionHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_newcompactionhash());
      break;
    }
    // bytes newCompactionChunk = 5;
    case kNewCompactionChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_newcompactionchunk());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateNewBackupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateNewBackupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateNewBackupRequest::GetClassData() const { return &_class_data_; }


void CreateNewBackupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateNewBackupRequest*>(&to_msg);
  auto& from = static_cast<const CreateNewBackupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:backup.CreateNewBackupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kUserID: {
      _this->_internal_set_userid(from._internal_userid());
      break;
    }
    case kDeviceID: {
      _this->_internal_set_deviceid(from._internal_deviceid());
      break;
    }
    case kKeyEntropy: {
      _this->_internal_set_keyentropy(from._internal_keyentropy());
      break;
    }
    case kNewCompactionHash: {
      _this->_internal_set_newcompactionhash(from._internal_newcompactionhash());
      break;
    }
    case kNewCompactionChunk: {
      _this->_internal_set_newcompactionchunk(from._internal_newcompactionchunk());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateNewBackupRequest::CopyFrom(const CreateNewBackupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backup.CreateNewBackupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNewBackupRequest::IsInitialized() const {
  return true;
}

void CreateNewBackupRequest::InternalSwap(CreateNewBackupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateNewBackupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_backup_2eproto_getter, &descriptor_table_backup_2eproto_once,
      file_level_metadata_backup_2eproto[0]);
}

// ===================================================================

class CreateNewBackupResponse::_Internal {
 public:
};

CreateNewBackupResponse::CreateNewBackupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:backup.CreateNewBackupResponse)
}
CreateNewBackupResponse::CreateNewBackupResponse(const CreateNewBackupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateNewBackupResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.backupid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.backupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_backupid().empty()) {
    _this->_impl_.backupid_.Set(from._internal_backupid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:backup.CreateNewBackupResponse)
}

inline void CreateNewBackupResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.backupid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.backupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateNewBackupResponse::~CreateNewBackupResponse() {
  // @@protoc_insertion_point(destructor:backup.CreateNewBackupResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateNewBackupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.backupid_.Destroy();
}

void CreateNewBackupResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateNewBackupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:backup.CreateNewBackupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.backupid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateNewBackupResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string backupID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_backupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.CreateNewBackupResponse.backupID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateNewBackupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:backup.CreateNewBackupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string backupID = 1;
  if (!this->_internal_backupid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_backupid().data(), static_cast<int>(this->_internal_backupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.CreateNewBackupResponse.backupID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_backupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:backup.CreateNewBackupResponse)
  return target;
}

size_t CreateNewBackupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:backup.CreateNewBackupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string backupID = 1;
  if (!this->_internal_backupid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_backupid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateNewBackupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateNewBackupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateNewBackupResponse::GetClassData() const { return &_class_data_; }


void CreateNewBackupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateNewBackupResponse*>(&to_msg);
  auto& from = static_cast<const CreateNewBackupResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:backup.CreateNewBackupResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_backupid().empty()) {
    _this->_internal_set_backupid(from._internal_backupid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateNewBackupResponse::CopyFrom(const CreateNewBackupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backup.CreateNewBackupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNewBackupResponse::IsInitialized() const {
  return true;
}

void CreateNewBackupResponse::InternalSwap(CreateNewBackupResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.backupid_, lhs_arena,
      &other->_impl_.backupid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateNewBackupResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_backup_2eproto_getter, &descriptor_table_backup_2eproto_once,
      file_level_metadata_backup_2eproto[1]);
}

// ===================================================================

class SendLogRequest::_Internal {
 public:
};

SendLogRequest::SendLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:backup.SendLogRequest)
}
SendLogRequest::SendLogRequest(const SendLogRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendLogRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kUserID: {
      _this->_internal_set_userid(from._internal_userid());
      break;
    }
    case kBackupID: {
      _this->_internal_set_backupid(from._internal_backupid());
      break;
    }
    case kLogHash: {
      _this->_internal_set_loghash(from._internal_loghash());
      break;
    }
    case kLogData: {
      _this->_internal_set_logdata(from._internal_logdata());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:backup.SendLogRequest)
}

inline void SendLogRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

SendLogRequest::~SendLogRequest() {
  // @@protoc_insertion_point(destructor:backup.SendLogRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendLogRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void SendLogRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendLogRequest::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:backup.SendLogRequest)
  switch (data_case()) {
    case kUserID: {
      _impl_.data_.userid_.Destroy();
      break;
    }
    case kBackupID: {
      _impl_.data_.backupid_.Destroy();
      break;
    }
    case kLogHash: {
      _impl_.data_.loghash_.Destroy();
      break;
    }
    case kLogData: {
      _impl_.data_.logdata_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void SendLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:backup.SendLogRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendLogRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.SendLogRequest.userID"));
        } else
          goto handle_unusual;
        continue;
      // string backupID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_backupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.SendLogRequest.backupID"));
        } else
          goto handle_unusual;
        continue;
      // bytes logHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_loghash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes logData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_logdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendLogRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:backup.SendLogRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userID = 1;
  if (_internal_has_userid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.SendLogRequest.userID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // string backupID = 2;
  if (_internal_has_backupid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_backupid().data(), static_cast<int>(this->_internal_backupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.SendLogRequest.backupID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_backupid(), target);
  }

  // bytes logHash = 3;
  if (_internal_has_loghash()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_loghash(), target);
  }

  // bytes logData = 4;
  if (_internal_has_logdata()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_logdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:backup.SendLogRequest)
  return target;
}

size_t SendLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:backup.SendLogRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // string userID = 1;
    case kUserID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_userid());
      break;
    }
    // string backupID = 2;
    case kBackupID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_backupid());
      break;
    }
    // bytes logHash = 3;
    case kLogHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_loghash());
      break;
    }
    // bytes logData = 4;
    case kLogData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_logdata());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendLogRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendLogRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendLogRequest::GetClassData() const { return &_class_data_; }


void SendLogRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendLogRequest*>(&to_msg);
  auto& from = static_cast<const SendLogRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:backup.SendLogRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kUserID: {
      _this->_internal_set_userid(from._internal_userid());
      break;
    }
    case kBackupID: {
      _this->_internal_set_backupid(from._internal_backupid());
      break;
    }
    case kLogHash: {
      _this->_internal_set_loghash(from._internal_loghash());
      break;
    }
    case kLogData: {
      _this->_internal_set_logdata(from._internal_logdata());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendLogRequest::CopyFrom(const SendLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backup.SendLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendLogRequest::IsInitialized() const {
  return true;
}

void SendLogRequest::InternalSwap(SendLogRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendLogRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_backup_2eproto_getter, &descriptor_table_backup_2eproto_once,
      file_level_metadata_backup_2eproto[2]);
}

// ===================================================================

class SendLogResponse::_Internal {
 public:
};

SendLogResponse::SendLogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:backup.SendLogResponse)
}
SendLogResponse::SendLogResponse(const SendLogResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendLogResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logcheckpoint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.logcheckpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logcheckpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logcheckpoint().empty()) {
    _this->_impl_.logcheckpoint_.Set(from._internal_logcheckpoint(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:backup.SendLogResponse)
}

inline void SendLogResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.logcheckpoint_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.logcheckpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logcheckpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendLogResponse::~SendLogResponse() {
  // @@protoc_insertion_point(destructor:backup.SendLogResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendLogResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.logcheckpoint_.Destroy();
}

void SendLogResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:backup.SendLogResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.logcheckpoint_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendLogResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string logCheckpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_logcheckpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.SendLogResponse.logCheckpoint"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendLogResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:backup.SendLogResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string logCheckpoint = 1;
  if (!this->_internal_logcheckpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logcheckpoint().data(), static_cast<int>(this->_internal_logcheckpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.SendLogResponse.logCheckpoint");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_logcheckpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:backup.SendLogResponse)
  return target;
}

size_t SendLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:backup.SendLogResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string logCheckpoint = 1;
  if (!this->_internal_logcheckpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logcheckpoint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendLogResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendLogResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendLogResponse::GetClassData() const { return &_class_data_; }


void SendLogResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendLogResponse*>(&to_msg);
  auto& from = static_cast<const SendLogResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:backup.SendLogResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_logcheckpoint().empty()) {
    _this->_internal_set_logcheckpoint(from._internal_logcheckpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendLogResponse::CopyFrom(const SendLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backup.SendLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendLogResponse::IsInitialized() const {
  return true;
}

void SendLogResponse::InternalSwap(SendLogResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logcheckpoint_, lhs_arena,
      &other->_impl_.logcheckpoint_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SendLogResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_backup_2eproto_getter, &descriptor_table_backup_2eproto_once,
      file_level_metadata_backup_2eproto[3]);
}

// ===================================================================

class RecoverBackupKeyRequest::_Internal {
 public:
};

RecoverBackupKeyRequest::RecoverBackupKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:backup.RecoverBackupKeyRequest)
}
RecoverBackupKeyRequest::RecoverBackupKeyRequest(const RecoverBackupKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecoverBackupKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:backup.RecoverBackupKeyRequest)
}

inline void RecoverBackupKeyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RecoverBackupKeyRequest::~RecoverBackupKeyRequest() {
  // @@protoc_insertion_point(destructor:backup.RecoverBackupKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecoverBackupKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
}

void RecoverBackupKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecoverBackupKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:backup.RecoverBackupKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecoverBackupKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.RecoverBackupKeyRequest.userID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecoverBackupKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:backup.RecoverBackupKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.RecoverBackupKeyRequest.userID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:backup.RecoverBackupKeyRequest)
  return target;
}

size_t RecoverBackupKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:backup.RecoverBackupKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecoverBackupKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecoverBackupKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecoverBackupKeyRequest::GetClassData() const { return &_class_data_; }


void RecoverBackupKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecoverBackupKeyRequest*>(&to_msg);
  auto& from = static_cast<const RecoverBackupKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:backup.RecoverBackupKeyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecoverBackupKeyRequest::CopyFrom(const RecoverBackupKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backup.RecoverBackupKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverBackupKeyRequest::IsInitialized() const {
  return true;
}

void RecoverBackupKeyRequest::InternalSwap(RecoverBackupKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userid_, lhs_arena,
      &other->_impl_.userid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RecoverBackupKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_backup_2eproto_getter, &descriptor_table_backup_2eproto_once,
      file_level_metadata_backup_2eproto[4]);
}

// ===================================================================

class RecoverBackupKeyResponse::_Internal {
 public:
};

RecoverBackupKeyResponse::RecoverBackupKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:backup.RecoverBackupKeyResponse)
}
RecoverBackupKeyResponse::RecoverBackupKeyResponse(const RecoverBackupKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecoverBackupKeyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.backupid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.backupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_backupid().empty()) {
    _this->_impl_.backupid_.Set(from._internal_backupid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:backup.RecoverBackupKeyResponse)
}

inline void RecoverBackupKeyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.backupid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.backupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RecoverBackupKeyResponse::~RecoverBackupKeyResponse() {
  // @@protoc_insertion_point(destructor:backup.RecoverBackupKeyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecoverBackupKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.backupid_.Destroy();
}

void RecoverBackupKeyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecoverBackupKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:backup.RecoverBackupKeyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.backupid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecoverBackupKeyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string backupID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_backupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.RecoverBackupKeyResponse.backupID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecoverBackupKeyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:backup.RecoverBackupKeyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string backupID = 4;
  if (!this->_internal_backupid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_backupid().data(), static_cast<int>(this->_internal_backupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.RecoverBackupKeyResponse.backupID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_backupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:backup.RecoverBackupKeyResponse)
  return target;
}

size_t RecoverBackupKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:backup.RecoverBackupKeyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string backupID = 4;
  if (!this->_internal_backupid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_backupid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecoverBackupKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecoverBackupKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecoverBackupKeyResponse::GetClassData() const { return &_class_data_; }


void RecoverBackupKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecoverBackupKeyResponse*>(&to_msg);
  auto& from = static_cast<const RecoverBackupKeyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:backup.RecoverBackupKeyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_backupid().empty()) {
    _this->_internal_set_backupid(from._internal_backupid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecoverBackupKeyResponse::CopyFrom(const RecoverBackupKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backup.RecoverBackupKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverBackupKeyResponse::IsInitialized() const {
  return true;
}

void RecoverBackupKeyResponse::InternalSwap(RecoverBackupKeyResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.backupid_, lhs_arena,
      &other->_impl_.backupid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RecoverBackupKeyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_backup_2eproto_getter, &descriptor_table_backup_2eproto_once,
      file_level_metadata_backup_2eproto[5]);
}

// ===================================================================

class PullBackupRequest::_Internal {
 public:
};

PullBackupRequest::PullBackupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:backup.PullBackupRequest)
}
PullBackupRequest::PullBackupRequest(const PullBackupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PullBackupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.backupid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.backupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_backupid().empty()) {
    _this->_impl_.backupid_.Set(from._internal_backupid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:backup.PullBackupRequest)
}

inline void PullBackupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.backupid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.backupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PullBackupRequest::~PullBackupRequest() {
  // @@protoc_insertion_point(destructor:backup.PullBackupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PullBackupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
  _impl_.backupid_.Destroy();
}

void PullBackupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PullBackupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:backup.PullBackupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _impl_.backupid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PullBackupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.PullBackupRequest.userID"));
        } else
          goto handle_unusual;
        continue;
      // string backupID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_backupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.PullBackupRequest.backupID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PullBackupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:backup.PullBackupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.PullBackupRequest.userID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // string backupID = 2;
  if (!this->_internal_backupid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_backupid().data(), static_cast<int>(this->_internal_backupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.PullBackupRequest.backupID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_backupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:backup.PullBackupRequest)
  return target;
}

size_t PullBackupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:backup.PullBackupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string backupID = 2;
  if (!this->_internal_backupid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_backupid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PullBackupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PullBackupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PullBackupRequest::GetClassData() const { return &_class_data_; }


void PullBackupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PullBackupRequest*>(&to_msg);
  auto& from = static_cast<const PullBackupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:backup.PullBackupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (!from._internal_backupid().empty()) {
    _this->_internal_set_backupid(from._internal_backupid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PullBackupRequest::CopyFrom(const PullBackupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backup.PullBackupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullBackupRequest::IsInitialized() const {
  return true;
}

void PullBackupRequest::InternalSwap(PullBackupRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userid_, lhs_arena,
      &other->_impl_.userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.backupid_, lhs_arena,
      &other->_impl_.backupid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PullBackupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_backup_2eproto_getter, &descriptor_table_backup_2eproto_once,
      file_level_metadata_backup_2eproto[6]);
}

// ===================================================================

class PullBackupResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PullBackupResponse>()._impl_._has_bits_);
  static void set_has_attachmentholders(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PullBackupResponse::PullBackupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:backup.PullBackupResponse)
}
PullBackupResponse::PullBackupResponse(const PullBackupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PullBackupResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attachmentholders_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attachmentholders_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentholders_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attachmentholders()) {
    _this->_impl_.attachmentholders_.Set(from._internal_attachmentholders(), 
      _this->GetArenaForAllocation());
  }
  clear_has_id();
  switch (from.id_case()) {
    case kBackupID: {
      _this->_internal_set_backupid(from._internal_backupid());
      break;
    }
    case kLogID: {
      _this->_internal_set_logid(from._internal_logid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  clear_has_data();
  switch (from.data_case()) {
    case kCompactionChunk: {
      _this->_internal_set_compactionchunk(from._internal_compactionchunk());
      break;
    }
    case kLogChunk: {
      _this->_internal_set_logchunk(from._internal_logchunk());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:backup.PullBackupResponse)
}

inline void PullBackupResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attachmentholders_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.attachmentholders_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentholders_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_id();
  clear_has_data();
}

PullBackupResponse::~PullBackupResponse() {
  // @@protoc_insertion_point(destructor:backup.PullBackupResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PullBackupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attachmentholders_.Destroy();
  if (has_id()) {
    clear_id();
  }
  if (has_data()) {
    clear_data();
  }
}

void PullBackupResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PullBackupResponse::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:backup.PullBackupResponse)
  switch (id_case()) {
    case kBackupID: {
      _impl_.id_.backupid_.Destroy();
      break;
    }
    case kLogID: {
      _impl_.id_.logid_.Destroy();
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ID_NOT_SET;
}

void PullBackupResponse::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:backup.PullBackupResponse)
  switch (data_case()) {
    case kCompactionChunk: {
      _impl_.data_.compactionchunk_.Destroy();
      break;
    }
    case kLogChunk: {
      _impl_.data_.logchunk_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = DATA_NOT_SET;
}


void PullBackupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:backup.PullBackupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attachmentholders_.ClearNonDefaultToEmpty();
  }
  clear_id();
  clear_data();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PullBackupResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string backupID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_backupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.PullBackupResponse.backupID"));
        } else
          goto handle_unusual;
        continue;
      // string logID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_logid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.PullBackupResponse.logID"));
        } else
          goto handle_unusual;
        continue;
      // bytes compactionChunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_compactionchunk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes logChunk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_logchunk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string attachmentHolders = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_attachmentholders();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.PullBackupResponse.attachmentHolders"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PullBackupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:backup.PullBackupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string backupID = 1;
  if (_internal_has_backupid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_backupid().data(), static_cast<int>(this->_internal_backupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.PullBackupResponse.backupID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_backupid(), target);
  }

  // string logID = 2;
  if (_internal_has_logid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logid().data(), static_cast<int>(this->_internal_logid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.PullBackupResponse.logID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_logid(), target);
  }

  // bytes compactionChunk = 3;
  if (_internal_has_compactionchunk()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_compactionchunk(), target);
  }

  // bytes logChunk = 4;
  if (_internal_has_logchunk()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_logchunk(), target);
  }

  // optional string attachmentHolders = 5;
  if (_internal_has_attachmentholders()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attachmentholders().data(), static_cast<int>(this->_internal_attachmentholders().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.PullBackupResponse.attachmentHolders");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_attachmentholders(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:backup.PullBackupResponse)
  return target;
}

size_t PullBackupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:backup.PullBackupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string attachmentHolders = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attachmentholders());
  }

  switch (id_case()) {
    // string backupID = 1;
    case kBackupID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_backupid());
      break;
    }
    // string logID = 2;
    case kLogID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_logid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  switch (data_case()) {
    // bytes compactionChunk = 3;
    case kCompactionChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_compactionchunk());
      break;
    }
    // bytes logChunk = 4;
    case kLogChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_logchunk());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PullBackupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PullBackupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PullBackupResponse::GetClassData() const { return &_class_data_; }


void PullBackupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PullBackupResponse*>(&to_msg);
  auto& from = static_cast<const PullBackupResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:backup.PullBackupResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attachmentholders()) {
    _this->_internal_set_attachmentholders(from._internal_attachmentholders());
  }
  switch (from.id_case()) {
    case kBackupID: {
      _this->_internal_set_backupid(from._internal_backupid());
      break;
    }
    case kLogID: {
      _this->_internal_set_logid(from._internal_logid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  switch (from.data_case()) {
    case kCompactionChunk: {
      _this->_internal_set_compactionchunk(from._internal_compactionchunk());
      break;
    }
    case kLogChunk: {
      _this->_internal_set_logchunk(from._internal_logchunk());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PullBackupResponse::CopyFrom(const PullBackupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backup.PullBackupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullBackupResponse::IsInitialized() const {
  return true;
}

void PullBackupResponse::InternalSwap(PullBackupResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachmentholders_, lhs_arena,
      &other->_impl_.attachmentholders_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PullBackupResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_backup_2eproto_getter, &descriptor_table_backup_2eproto_once,
      file_level_metadata_backup_2eproto[7]);
}

// ===================================================================

class AddAttachmentsRequest::_Internal {
 public:
};

AddAttachmentsRequest::AddAttachmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:backup.AddAttachmentsRequest)
}
AddAttachmentsRequest::AddAttachmentsRequest(const AddAttachmentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddAttachmentsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.backupid_){}
    , decltype(_impl_.logid_){}
    , decltype(_impl_.holders_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.backupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_backupid().empty()) {
    _this->_impl_.backupid_.Set(from._internal_backupid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.logid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logid().empty()) {
    _this->_impl_.logid_.Set(from._internal_logid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.holders_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.holders_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_holders().empty()) {
    _this->_impl_.holders_.Set(from._internal_holders(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:backup.AddAttachmentsRequest)
}

inline void AddAttachmentsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , decltype(_impl_.backupid_){}
    , decltype(_impl_.logid_){}
    , decltype(_impl_.holders_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.backupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.holders_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.holders_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddAttachmentsRequest::~AddAttachmentsRequest() {
  // @@protoc_insertion_point(destructor:backup.AddAttachmentsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddAttachmentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userid_.Destroy();
  _impl_.backupid_.Destroy();
  _impl_.logid_.Destroy();
  _impl_.holders_.Destroy();
}

void AddAttachmentsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddAttachmentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:backup.AddAttachmentsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _impl_.backupid_.ClearToEmpty();
  _impl_.logid_.ClearToEmpty();
  _impl_.holders_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddAttachmentsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.AddAttachmentsRequest.userID"));
        } else
          goto handle_unusual;
        continue;
      // string backupID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_backupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.AddAttachmentsRequest.backupID"));
        } else
          goto handle_unusual;
        continue;
      // string logID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_logid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.AddAttachmentsRequest.logID"));
        } else
          goto handle_unusual;
        continue;
      // string holders = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_holders();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "backup.AddAttachmentsRequest.holders"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddAttachmentsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:backup.AddAttachmentsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.AddAttachmentsRequest.userID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // string backupID = 2;
  if (!this->_internal_backupid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_backupid().data(), static_cast<int>(this->_internal_backupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.AddAttachmentsRequest.backupID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_backupid(), target);
  }

  // string logID = 3;
  if (!this->_internal_logid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logid().data(), static_cast<int>(this->_internal_logid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.AddAttachmentsRequest.logID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_logid(), target);
  }

  // string holders = 4;
  if (!this->_internal_holders().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_holders().data(), static_cast<int>(this->_internal_holders().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "backup.AddAttachmentsRequest.holders");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_holders(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:backup.AddAttachmentsRequest)
  return target;
}

size_t AddAttachmentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:backup.AddAttachmentsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userID = 1;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string backupID = 2;
  if (!this->_internal_backupid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_backupid());
  }

  // string logID = 3;
  if (!this->_internal_logid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logid());
  }

  // string holders = 4;
  if (!this->_internal_holders().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_holders());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddAttachmentsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddAttachmentsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddAttachmentsRequest::GetClassData() const { return &_class_data_; }


void AddAttachmentsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddAttachmentsRequest*>(&to_msg);
  auto& from = static_cast<const AddAttachmentsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:backup.AddAttachmentsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (!from._internal_backupid().empty()) {
    _this->_internal_set_backupid(from._internal_backupid());
  }
  if (!from._internal_logid().empty()) {
    _this->_internal_set_logid(from._internal_logid());
  }
  if (!from._internal_holders().empty()) {
    _this->_internal_set_holders(from._internal_holders());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddAttachmentsRequest::CopyFrom(const AddAttachmentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backup.AddAttachmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddAttachmentsRequest::IsInitialized() const {
  return true;
}

void AddAttachmentsRequest::InternalSwap(AddAttachmentsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userid_, lhs_arena,
      &other->_impl_.userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.backupid_, lhs_arena,
      &other->_impl_.backupid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logid_, lhs_arena,
      &other->_impl_.logid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.holders_, lhs_arena,
      &other->_impl_.holders_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AddAttachmentsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_backup_2eproto_getter, &descriptor_table_backup_2eproto_once,
      file_level_metadata_backup_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace backup
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::backup::CreateNewBackupRequest*
Arena::CreateMaybeMessage< ::backup::CreateNewBackupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::backup::CreateNewBackupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::backup::CreateNewBackupResponse*
Arena::CreateMaybeMessage< ::backup::CreateNewBackupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::backup::CreateNewBackupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::backup::SendLogRequest*
Arena::CreateMaybeMessage< ::backup::SendLogRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::backup::SendLogRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::backup::SendLogResponse*
Arena::CreateMaybeMessage< ::backup::SendLogResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::backup::SendLogResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::backup::RecoverBackupKeyRequest*
Arena::CreateMaybeMessage< ::backup::RecoverBackupKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::backup::RecoverBackupKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::backup::RecoverBackupKeyResponse*
Arena::CreateMaybeMessage< ::backup::RecoverBackupKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::backup::RecoverBackupKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::backup::PullBackupRequest*
Arena::CreateMaybeMessage< ::backup::PullBackupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::backup::PullBackupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::backup::PullBackupResponse*
Arena::CreateMaybeMessage< ::backup::PullBackupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::backup::PullBackupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::backup::AddAttachmentsRequest*
Arena::CreateMaybeMessage< ::backup::AddAttachmentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::backup::AddAttachmentsRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
