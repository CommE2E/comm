syntax = "proto3";

import "identity_unauth.proto";

package identity.auth;

// RPCs from a client (iOS, Android, or web) to identity service
//
// This service will assert authenticity of a device by verifying the access
// token through an interceptor, thus avoiding the need to explicitly pass
// the credentials on every request
service IdentityClientService {

  /* X3DH actions */

  // Replenish one-time preKeys
  rpc UploadOneTimeKeys(UploadOneTimeKeysRequest)
    returns (identity.unauth.Empty) {}
  // Rotate a device's prekey and prekey signature
  // Rotated for deniability of older messages
  rpc RefreshUserPrekeys(RefreshUserPrekeysRequest)
    returns (identity.unauth.Empty) {}

  // Called by clients to get all device keys associated with a user in order
  // to open a new channel of communication on any of their devices.
  // Specially, this will return the following per device:
  //   - Identity keys (both Content and Notif Keys)
  //   - Prekey (including prekey signature)
  //   - One-time Prekey
  rpc GetOutboundKeysForUser(OutboundKeysForUserRequest) returns
    (OutboundKeysForUserResponse) {}
  // Called by receivers of a communication request. The reponse will return
  // identity keys (both content and notif keys) and related prekeys per device,
  // but will not contain one-time keys. Additionally, the response will contain
  // the other user's username.
  rpc GetInboundKeysForUser(InboundKeysForUserRequest) returns
    (InboundKeysForUserResponse) {}
  // Called by clients to get required keys for opening a connection
  // to a user's keyserver
  rpc GetKeyserverKeys(OutboundKeysForUserRequest) returns
    (KeyserverKeysResponse) {}

  /* Account actions */

  // Called by user to update password
  rpc UpdateUserPasswordStart(UpdateUserPasswordStartRequest) returns
    (UpdateUserPasswordStartResponse) {}
  rpc UpdateUserPasswordFinish(UpdateUserPasswordFinishRequest) returns
    (identity.unauth.Empty) {}

  // Called by user to log out (clears device's keys and access token)
  rpc LogOutUser(identity.unauth.Empty) returns (identity.unauth.Empty) {}
  // Called by a ssecondary device to log out (clear its keys and access token)
  rpc LogOutSecondaryDevice(identity.unauth.Empty) returns
    (identity.unauth.Empty) {}
  // Called by a primary device to log out (clear all devices' keys and tokens)
  rpc LogOutPrimaryDevice(PrimaryDeviceLogoutRequest) returns
    (identity.unauth.Empty) {}

  // Called by a user to delete their own account
  rpc DeletePasswordUserStart(DeletePasswordUserStartRequest) returns
    (DeletePasswordUserStartResponse) {}
  rpc DeletePasswordUserFinish(DeletePasswordUserFinishRequest) returns
    (identity.unauth.Empty) {}
  rpc DeleteWalletUser(identity.unauth.Empty) returns (identity.unauth.Empty) {}

  // Called by Comm staff to delete user accounts. Usage is strictly limited to
  // accounts flagged for violating terms of service.
  rpc PrivilegedDeleteUsers(PrivilegedDeleteUsersRequest) returns
    (identity.unauth.Empty) {};

  // Called by Comm staff to reset user passwords. Usage is strictly limited to
  // accounts that have requested a password reset.
  rpc PrivilegedResetUserPasswordStart(PrivilegedResetUserPasswordStartRequest)
    returns (PrivilegedResetUserPasswordStartResponse) {};
  rpc PrivilegedResetUserPasswordFinish
    (PrivilegedResetUserPasswordFinishRequest) returns
    (identity.unauth.Empty) {};

  /* Device list actions */

  // Returns device list history
  rpc GetDeviceListForUser(GetDeviceListRequest) returns
    (GetDeviceListResponse) {}
  // Returns current device list for a set of users
  rpc GetDeviceListsForUsers (PeersDeviceListsRequest) returns
    (PeersDeviceListsResponse) {}

  rpc UpdateDeviceList(UpdateDeviceListRequest) returns
    (identity.unauth.Empty) {}

  /* Farcaster actions */

  // Called by an existing user to link their Farcaster account
  rpc LinkFarcasterAccount(LinkFarcasterAccountRequest) returns
    (identity.unauth.Empty) {}
  // Called by an existing user to unlink their Farcaster account
  rpc UnlinkFarcasterAccount(identity.unauth.Empty) returns
    (identity.unauth.Empty) {}

  /* Miscellaneous actions */

  rpc FindUserIdentities(UserIdentitiesRequest) returns
    (UserIdentitiesResponse) {}

  // Updates current device PlatformDetails stored on Identity Service.
  // It doesn't require any input - all values are passed via request metadata.
  rpc SyncPlatformDetails(identity.unauth.Empty) returns
    (identity.unauth.Empty) {}
}

// Helper types

message EthereumIdentity {
  string wallet_address = 1;
  string siwe_message = 2;
  string siwe_signature = 3;
}

message Identity {
  // this is wallet address for Ethereum users
  string username = 1;
  optional EthereumIdentity eth_identity = 2;
  optional string farcaster_id = 3;
}

// UploadOneTimeKeys

// As OPKs get exhausted, they need to be refreshed
message UploadOneTimeKeysRequest {
  repeated string content_one_time_prekeys = 1;
  repeated string notif_one_time_prekeys = 2;
}


// RefreshUserPreKeys

message RefreshUserPrekeysRequest {
  identity.unauth.Prekey new_content_prekey = 1;
  identity.unauth.Prekey new_notif_prekey = 2;
}

// Information needed when establishing communication to someone else's device
message OutboundKeyInfo {
  identity.unauth.IdentityKeyInfo identity_info = 1;
  identity.unauth.Prekey content_prekey = 2;
  identity.unauth.Prekey notif_prekey = 3;
  optional string one_time_content_prekey = 4;
  optional string one_time_notif_prekey = 5;
}

message KeyserverKeysResponse {
  // this was never used, we can reuse this field again
  // when min supported version is NEXT_CODE_VERSION
  reserved 3;
  reserved "primary_device_identity_info";

  OutboundKeyInfo keyserver_info = 1;
  Identity identity = 2;
}

// GetOutboundKeysForUser

message OutboundKeysForUserResponse {
  // Map is keyed on devices' public ed25519 key used for signing
  map<string, OutboundKeyInfo> devices = 1;
}

// Information needed by a device to establish communcation when responding
// to a request.
// The device receiving a request only needs the content key and prekey.
message OutboundKeysForUserRequest {
  string user_id = 1;
}

// GetInboundKeysForUser

message InboundKeyInfo {
  identity.unauth.IdentityKeyInfo identity_info = 1;
  identity.unauth.Prekey content_prekey = 2;
  identity.unauth.Prekey notif_prekey = 3;
}

message InboundKeysForUserResponse {
  // Map is keyed on devices' public ed25519 key used for signing
  map<string, InboundKeyInfo> devices = 1;
  Identity identity = 2;
}

message InboundKeysForUserRequest {
  string user_id = 1;
}

// UpdateUserPassword

message UpdateUserPasswordStartRequest {
  // Initiate PAKE registration with new password
  bytes opaque_registration_request = 1;
  // Initiate PAKE login with old password
  bytes opaque_login_request = 2;
}

message UpdateUserPasswordFinishRequest {
  // Identifier used to correlate start and finish request
  string session_id = 1;
  // Complete PAKE registration with new password
  bytes opaque_registration_upload = 2;
  // Complete PAKE login with old password
  bytes opaque_login_upload = 3;
}

message UpdateUserPasswordStartResponse {
  // Identifier used to correlate start request with finish request
  string session_id = 1;
  // Continue PAKE registration on server with new password
  bytes opaque_registration_response = 2;
  // Continue PAKE login on server with old password
  bytes opaque_login_response = 3;
}

// LogOutPrimaryDevice

message PrimaryDeviceLogoutRequest {
  // A stringified JSON object of the following format:
  // {
  //   "rawDeviceList": JSON.stringify({
  //     "devices": [<primary_device_id: string>]
  //     "timestamp": <UTC timestamp in milliseconds: int>,
  //   }),
  //   "curPrimarySignature": "base64-encoded primary device signature"
  // }
  // When the primary device logs out, it removes all secondary devices from
  // the device list, and sends up a new singleton device list consisting of
  // just itself.
  string signed_device_list = 1;
}

// DeletePasswordUser

// First user must log in
message DeletePasswordUserStartRequest {
  // Message sent to initiate PAKE login
  bytes opaque_login_request = 1;
}

// If login is successful, the user's account will be deleted
message DeletePasswordUserFinishRequest {
  // Identifier used to correlate requests in the same workflow
  string session_id = 1;
  bytes opaque_login_upload = 2;
}

message DeletePasswordUserStartResponse {
  // Identifier used to correlate requests in the same workflow
  string session_id = 1;
  bytes opaque_login_response = 2;
}

// PrivilegedDeleteUsers

message PrivilegedDeleteUsersRequest {
  repeated string user_ids = 1;
}

// PrivilegedResetUserPassword

message PrivilegedResetUserPasswordStartRequest {
  // Initiate PAKE registration with new password
  bytes opaque_registration_request = 1;
  string username = 2;
  // when true, user is reset to unsigned device list without password change
  bool skip_password_reset = 3;
}

message PrivilegedResetUserPasswordStartResponse {
  // Identifier used to correlate start request with finish request
  string session_id = 1;
  // Continue PAKE registration on server with new password
  bytes opaque_registration_response = 2;
}

message PrivilegedResetUserPasswordFinishRequest {
  // Identifier used to correlate start and finish request
  string session_id = 1;
  // Complete PAKE registration with new password
  bytes opaque_registration_upload = 2;
}

// GetDeviceListForUser

message GetDeviceListRequest {
  // User whose device lists we want to retrieve
  string user_id = 1;
  // UTC timestamp in milliseconds
  // If none, whole device list history will be retrieved
  optional int64 since_timestamp = 2;
}

message GetDeviceListResponse {
  // A list of stringified JSON objects of the following format:
  // {
  //   "rawDeviceList": JSON.stringify({
  //     "devices": [<device_id: string>, ...]
  //     "timestamp": <UTC timestamp in milliseconds: int>,
  //   })
  // }
  repeated string device_list_updates = 1;
}

// GetDeviceListsForUsers

// platform details for single device
message PlatformDetails {
  identity.unauth.DeviceType device_type = 1;
  uint64 code_version = 2;
  optional uint64 state_version = 3;
  optional uint64 major_desktop_version = 4;
}

// platform details for user's devices
message UserDevicesPlatformDetails {
  // keys are device IDs
  map<string, PlatformDetails> devices_platform_details = 1;
}

message PeersDeviceListsRequest {
  repeated string user_ids = 1;
}

message PeersDeviceListsResponse {
  // keys are user_id
  // values are JSON-stringified device list payloads
  // (see GetDeviceListResponse message for payload structure)
  map<string, string> users_device_lists = 1;

  // keys are user IDs
  map<string, UserDevicesPlatformDetails> users_devices_platform_details = 2;
}

// UpdateDeviceListForUser

message UpdateDeviceListRequest {
  // A stringified JSON object of the following format:
  // {
  //   "rawDeviceList": JSON.stringify({
  //     "devices": [<device_id: string>, ...]
  //     "timestamp": <UTC timestamp in milliseconds: int>,
  //   })
  // }
  string new_device_list = 1;
}

// LinkFarcasterAccount

message LinkFarcasterAccountRequest {
  string farcaster_id = 1;
}

// FindUserIdentities

message UserIdentitiesRequest {
  // user IDs for which we want to get the identity
  repeated string user_ids = 1;
}

message UserIdentitiesResponse {
  map<string, Identity> identities = 1;

  // reserved usernames or wallet addresses
  map<string, string> reserved_user_identifiers = 2;
}
