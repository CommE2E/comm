syntax = "proto3";

import "identity_unauth.proto";

package identity.auth;

// RPCs from a client (iOS, Android, or web) to identity service
//
// This service will assert authenticity of a device by verifying the access
// token through an interceptor, thus avoiding the need to explicitly pass
// the credentials on every request
service IdentityClientService {

  /* X3DH actions */

  // Replenish one-time preKeys
  rpc UploadOneTimeKeys(UploadOneTimeKeysRequest)
    returns (identity.unauth.Empty) {}
  // Rotate a device's prekey and prekey signature
  // Rotated for deniability of older messages
  rpc RefreshUserPrekeys(RefreshUserPrekeysRequest)
    returns (identity.unauth.Empty) {}

  // Called by clients to get all device keys associated with a user in order
  // to open a new channel of communication on any of their devices.
  // Specially, this will return the following per device:
  //   - Identity keys (both Content and Notif Keys)
  //   - Prekey (including prekey signature)
  //   - One-time Prekey
  rpc GetOutboundKeysForUser(OutboundKeysForUserRequest) returns
    (OutboundKeysForUserResponse) {}
  // Called by receivers of a communication request. The reponse will return
  // identity keys (both content and notif keys) and related prekeys per device,
  // but will not contain one-time keys. Additionally, the response will contain
  // the other user's username.
  rpc GetInboundKeysForUser(InboundKeysForUserRequest) returns
    (InboundKeysForUserResponse) {}
  // Called by clients to get required keys for opening a connection
  // to a user's keyserver
  rpc GetKeyserverKeys(OutboundKeysForUserRequest) returns
    (KeyserverKeysResponse) {}

  /* Account actions */

  // Called by user to update password and receive new access token
  rpc UpdateUserPasswordStart(UpdateUserPasswordStartRequest) returns
    (UpdateUserPasswordStartResponse) {}
  rpc UpdateUserPasswordFinish(UpdateUserPasswordFinishRequest) returns
    (identity.unauth.Empty) {}

  // Called by user to log out (clears device's keys and access token)
  rpc LogOutUser(identity.unauth.Empty) returns (identity.unauth.Empty) {}
  // Called by a user to delete their own account
  rpc DeleteUser(identity.unauth.Empty) returns (identity.unauth.Empty) {}

  /* Device list actions */

  // Returns device list history
  rpc GetDeviceListForUser(GetDeviceListRequest) returns
    (GetDeviceListResponse) {}

  rpc UpdateDeviceList(UpdateDeviceListRequest) returns
    (identity.unauth.Empty) {}

  /* Farcaster actions */

  // Called by an existing user to link their Farcaster account
  rpc LinkFarcasterAccount(LinkFarcasterAccountRequest) returns
    (identity.unauth.Empty) {}
  // Called by an existing user to unlink their Farcaster account
  rpc UnlinkFarcasterAccount(identity.unauth.Empty) returns
    (identity.unauth.Empty) {}

  /* Miscellaneous actions */

  rpc FindUserIdentity(UserIdentityRequest) returns (UserIdentityResponse) {}
}

// Helper types

message EthereumIdentity {
  string wallet_address = 1;
  string social_proof = 2;
}

message Identity {
  oneof identity_info {
    string username = 1;
    EthereumIdentity eth_identity = 2;
  }
}

// UploadOneTimeKeys

// As OPKs get exhausted, they need to be refreshed
message UploadOneTimeKeysRequest {
  repeated string content_one_time_prekeys = 1;
  repeated string notif_one_time_prekeys = 2;
}


// RefreshUserPreKeys

message RefreshUserPrekeysRequest {
  identity.unauth.Prekey new_content_prekeys = 1;
  identity.unauth.Prekey new_notif_prekeys = 2;
}

// Information needed when establishing communication to someone else's device
message OutboundKeyInfo {
  identity.unauth.IdentityKeyInfo identity_info = 1;
  identity.unauth.Prekey content_prekey = 2;
  identity.unauth.Prekey notif_prekey = 3;
  optional string one_time_content_prekey = 4;
  optional string one_time_notif_prekey = 5;
}

message KeyserverKeysResponse {
  optional OutboundKeyInfo keyserver_info = 1;
  Identity identity = 2;
  identity.unauth.IdentityKeyInfo primary_device_identity_info = 3;
}

// GetOutboundKeysForUser

message OutboundKeysForUserResponse {
  // Map is keyed on devices' public ed25519 key used for signing
  map<string, OutboundKeyInfo> devices = 1;
}

// Information needed by a device to establish communcation when responding
// to a request.
// The device receiving a request only needs the content key and prekey.
message OutboundKeysForUserRequest {
  string user_id = 1;
}

// GetInboundKeysForUser

message InboundKeyInfo {
  identity.unauth.IdentityKeyInfo identity_info = 1;
  identity.unauth.Prekey content_prekey = 2;
  identity.unauth.Prekey notif_prekey = 3;
}

message InboundKeysForUserResponse {
  // Map is keyed on devices' public ed25519 key used for signing
  map<string, InboundKeyInfo> devices = 1;
  Identity identity = 2;
}

message InboundKeysForUserRequest {
  string user_id = 1;
}

// UpdateUserPassword

// Request for updating a user, similar to registration but need a
// access token to validate user before updating password
message UpdateUserPasswordStartRequest {
  // Message sent to initiate PAKE registration (step 1)
  bytes opaque_registration_request = 1;
}

// Do a user registration, but overwrite the existing credentials
// after validation of user
message UpdateUserPasswordFinishRequest {
  // Identifier used to correlate start and finish request
  string session_id = 1;
  // Opaque client registration upload (step 3)
  bytes opaque_registration_upload = 2;
}

message UpdateUserPasswordStartResponse {
  // Identifier used to correlate start request with finish request
  string session_id = 1;
  bytes opaque_registration_response = 2;
}

// GetDeviceListForUser

message GetDeviceListRequest {
  // User whose device lists we want to retrieve
  string user_id = 1;
  // UTC timestamp in milliseconds
  // If none, whole device list history will be retrieved
  optional int64 since_timestamp = 2;
}

message GetDeviceListResponse {
  // A list of stringified JSON objects of the following format:
  // {
  //   "rawDeviceList": JSON.stringify({
  //     "devices": [<device_id: string>, ...]
  //     "timestamp": <UTC timestamp in milliseconds: int>,
  //   })
  // }
  repeated string device_list_updates = 1;
}

// UpdateDeviceListForUser

message UpdateDeviceListRequest {
  // A stringified JSON object of the following format:
  // {
  //   "rawDeviceList": JSON.stringify({
  //     "devices": [<device_id: string>, ...]
  //     "timestamp": <UTC timestamp in milliseconds: int>,
  //   })
  // }
  string new_device_list = 1;
}

// LinkFarcasterAccount

message LinkFarcasterAccountRequest {
  string farcaster_id = 1;
}

// FindUserIdentity

message UserIdentityRequest {
  // user ID for which we want to get the identity
  string user_id = 1;
}

message UserIdentityResponse {
  Identity identity = 1;
}
